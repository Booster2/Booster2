system PetStore

set CreditCardType {Visa, Mastercard, AmericanExpress}

set OrderStatus {Draft, Complete, Prepared, Dispatched}


class ProductLine{
	attributes
		name (ID) : string
		description : string
		products : SET ( Product . productLine ) [*]
	methods
		create { pl! : ProductLine' & pl!.name' = name? & pl!.description' = description? }
		update { name' = name? & description' = description? }
}

class Product {
	attributes
		name (ID) : string
		description : string
		productLine : ProductLine . products
		inStock : int
		cost : decimal 
		lineItems : set ( LineItem . product ) [*]
	invariants
		inStock >= 0
	methods
		create { p! : Product' &
				p!.name' = name? & 
				p!.description' = description? & 
				p!.productLine' = productLine? & 
				p!.inStock' = inStock? & 
				p!.cost' = cost?  }
}

class LineItem {
	attributes
		product (ID) : Product . lineItems
		quantity (ID) : int
		lineCost (ID) : decimal
		itemForOrder : Order . lineItems
		preparedBy : [ StaffMember . preparedLineItems ]
		preparedOn : [ dateTime ]
	invariants
		quantity > 0
	methods
		prepare {   itemForOrder.status = Complete &
					preparedBy = null &
					preparedBy' = preparedBy? &
					preparedOn' = currentDateTime}
}

class Order {
	attributes
		forCustomer : Customer . orders
		createdOn (ID) : dateTime
		totalCost : decimal
		status (ID) : OrderStatus
		paymentCard : [ CreditCard . usedForPayment ]
		paymentDate : [ dateTime ]
		billingAddress : [ Address . billingForOrders ]
		shippingAddress : [ Address . shippingForOrders ]
		lineItems : set ( LineItem . itemForOrder)[*]
		dispatchedBy : [ StaffMember . fulfilledOrders ]
		dispatchedOn : [ dateTime ]
	invariants
		paymentCard : forCustomer . creditCards
		billingAddress : forCustomer . addresses
		shippingAddress : forCustomer . addresses
	methods
		addLineItem {/*product?.inStock >= quantity? & */
					status = Draft &
					li! : LineItem' &
					 li!.product' = product? & 
					 li!.quantity' = quantity?  &
					 li!.lineCost' = product?.cost * quantity? &
					 li!.itemForOrder' = this  &
					 this.totalCost' = this.totalCost + product?.cost * quantity? &
					 product?.inStock' = product?.inStock - quantity?
					 }
		complete { status = Draft & 
					card(lineItems) > 0
					& status' = Complete
					& paymentDate' = currentDateTime
					& paymentCard' = paymentCard?
					& billingAddress' = billingAddress?
					& shippingAddress' = shippingAddress?
		}
		dispatch {  status = Complete &
					(forall s : lineItems @ s . preparedBy /= null) 
					& status' = Dispatched 
					& dispatchedBy' = dispatchedBy?
					& dispatchedOn' = currentDateTime}			 
}

class Customer {
	attributes
		lastName (ID) : string
		firstName (ID) : string
		creditCards : set ( CreditCard . forCustomer)[*]
		addresses : set ( Address . forCustomer )[*]
		orders : set ( Order . forCustomer ) [*]
	methods
		create { c! : Customer' ; c!.lastName' = lastName? & c!.firstName' = firstName?}
		newCreditCard { cc! : CreditCard' ; cc!.type' = type? & cc!.number' = number? & cc!.forCustomer' = this}
		newAddress { a! : Address' & 
					a!.line1' = line1? & 
					a!.line2' = line2? & 
					a!.line3' = line3? &
					a!.country' = country? &
					a!.postcode' = postcode? &
					a!.forCustomer' = this}
		newOrder { o! : Order' &
					o!.createdOn' = currentDateTime &
					o!.totalCost' = 0  & 
					o!.status' = Draft &
					o!.forCustomer' = this}
}

class CreditCard {
	attributes
		type (ID) : CreditCardType
		number (ID) : string
		forCustomer : Customer . creditCards
		usedForPayment : set ( Order . paymentCard )[*]
}

class Address { 
	attributes
		line1 (ID) : string
		line2 (ID) : string
		line3 (ID) : string
		country (ID) : Country . countryAddresses
		postcode : string
		forCustomer : Customer . addresses
		billingForOrders : set (Order . billingAddress)[*]
		shippingForOrders : set (Order . shippingAddress)[*]
}

class StaffMember {
	attributes
		lastName (ID) : string
		firstName (ID) : string
		preparedLineItems : SET ( LineItem . preparedBy ) [*]
		fulfilledOrders : SET ( Order . dispatchedBy ) [*]
	methods
		create { sm! : StaffMember' & sm!.lastName' = lastName? & sm!.firstName' = firstName?}
}

class Country {
	attributes
		name (ID) : string
		countryAddresses : SET(Address . country)[*]
	methods
		create { country! : Country' & country! . name' = name?}

}