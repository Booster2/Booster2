module parse/class

imports

  include/Booster2
  
  parse/attribute
  parse/method



rules

/* get-class-name: 
		Takes a class and returns its class name
*/
			
	get-class-name:
		Class(name,extends, classComponents) 
			-> name
			
			
/* get-class-attributes: 
		Takes a class and returns a list of attributes 
*/
 
 	get-class-attributes:
 		Class(name, extends, classComponents)
 			-> atts
 		where
 			attSections := <filter(isAttSection)> classComponents;
 			atts := <foldr([], union)> attSections

	isAttSection:
		 Attributes(attrs) -> attrs
 
 			
/* get-class-attribute-names: 
		Takes a class and returns a pair of name, attribute names
*/

	get-class-attribute-names: 
		Class(name, extends, systemComponents*)
			-> (name, attnames)
		with
			attnames := <map(get-attribute-name)> <get-class-attributes> Class(name, extends, systemComponents*)

/* get-class-attribute-types: 
		Takes a class and returns a list of triples: classname, attname, type
*/

	get-class-attribute-types: 
		Class(name, extends, systemComponents*)
			-> xs
		with
			attnames := <map(get-attribute-name)> <get-class-attributes> Class(name, extends, systemComponents*);
			atttypes := <map(get-attribute-type)> <get-class-attributes> Class(name, extends, systemComponents*);
			xs := <zip>(<cart(id)>([name], attnames), atttypes)

/* get-class-attribute-max-mults: 
		Takes a class and returns a list of triples: classname, attname, maxmult
*/

	get-class-attribute-max-mults: 
		Class(name, extends, systemComponents*)
			-> xs
		with
			attnames := <map(get-attribute-name)> <get-class-attributes> Class(name, extends, systemComponents*);
			maxmults := <map(get-attribute-max-mult)> <get-class-attributes> Class(name, extends, systemComponents*);
			xs :=  <zip>(<cart(id)>([name], attnames), maxmults)

/* get-class-attribute-min-mults: 
		Takes a class and returns a list of triples: classname, attname, minmult
*/

	get-class-attribute-min-mults: 
		Class(name, extends, systemComponents*)
			-> xs
		with
			attnames := <map(get-attribute-name)> <get-class-attributes> Class(name, extends, systemComponents*);
			minmults := <map(get-attribute-min-mult)> <get-class-attributes> Class(name, extends, systemComponents*);
			xs :=  <zip>(<cart(id)>([name], attnames), minmults)

/* get-class-attribute-opposites: 
		Takes a class and returns a list of triples: classname, attname, opposite
*/

	get-class-attribute-opposites: 
		Class(name, extends, systemComponents*)
			-> xs
		with
			attnames := <map(get-attribute-name)> <get-class-attributes> Class(name, extends, systemComponents*);
			opposites := <map(get-attribute-opposite)> <get-class-attributes> Class(name, extends, systemComponents*);
			xs :=  <filter(has-opposite)> <zip>(<cart(id)>([name], attnames), opposites)


/* get-class-invariant: 
		Takes a class and returns its invariant
*/
 
 
  	get-class-invariant:
 		Class(name, extends, classComponents)
 			-> invs
 		where
 			invSections := <filter(isInvSection)> classComponents;
 			invs := <foldr(!True(), conjoinInvs)> invSections

	isInvSection:
		 Invariant(invs) -> 
		 	<foldr(!True(), conjoinInvs)> invs
 
 	conjoinInvs:
 		(const1,True())
 			-> const1
 
 	conjoinInvs:
 		(const1,const2)
 			-> And(const1, const2)
 

 	

/* get-class-methods: 
		Takes a class and returns a list of methods 
*/

 
 	get-class-methods:
 		Class(name, extends, classComponents)
 			-> meths
 		where
 			methSections := <filter(isMethSection)> classComponents;
 			meths := <foldr([], union)> methSections

	isMethSection:
		 Methods(meths) -> meths 
 
 


/* get-class-method-names: 
		Takes a class and returns a pair of name, method names
*/

	get-class-method-names: 
		Class(name, extends, classComponents)
			-> (name, methnames)
		with
			methnames := <filter(get-method-name)> <get-class-methods> Class(name, extends, classComponents)

/* get-class-method-constraints: 
		Takes a class and returns a list of triples: classname, methodname, constraint
*/

	get-class-method-constraints: 
		Class(name, extends,  classComponents)
			-> xs
		with
			meths := <get-class-methods> Class(name, extends, classComponents) ;
			methnames := <filter(get-method-name)> meths;
			constraints := <filter(get-method-constraint)> meths;
			xs := <zip>(<cart(id)>([name], methnames), constraints) 
			
			
