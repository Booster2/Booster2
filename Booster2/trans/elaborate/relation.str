module elaborate/relation

imports
  include/Booster2
   
  elaborate/expression
  elaborate/valueExpression
  
  library/binRel
 
 rules
 	
 	
/*	deduce-types:
		Description goes here
*/ 	
	
	deduce-types:
		(classname, methodname, BinRel(expr1, rel, expr2), alreadyknown)
		 	-> types2
		where
			(type1, types1) := <deduce-types> (classname, methodname, expr1, alreadyknown );
			(type2, types2) := <deduce-types> (classname, methodname, expr2, types1);
			[] := <get-binrel-type> (type1, rel, type2)
			
	deduce-types:
		(classname, methodname, BinRel(expr1, rel, expr2), alreadyknown)
		 	-> types2
		where
			(type1, types1) := <deduce-types> (classname, methodname, expr2, alreadyknown );
			(type2, types2) := <deduce-types> (classname, methodname, expr1, types1);
			[] := <get-binrel-type> (type1, rel, type2)

    deduce-types:
		(classname, methodname, BinRel(expr1, rel, expr2), alreadyknown)
		 	-> types2
		where
			(type1, types1) := <deduce-types> (classname, methodname, expr1, alreadyknown );
			type2 := <get-binrel-type> (type1, rel);
			types2 := <infer-type> (classname, methodname, expr2, type2, types1)

    deduce-types:
		(classname, methodname, BinRel(expr1, rel, expr2), alreadyknown)
		 	-> types2
		where
			(type1, types1) := <deduce-types> (classname, methodname, expr2, alreadyknown );
			type2 := <get-binrel-type> (rel, type1);
			types2 := <infer-type> (classname, methodname, expr1, type2, types1)




/* 	insert-this:
		Takes a constraint, and returns it with any paths transformed so that
		they have 'this' at the front, if applicable 
*/

	insert-this:
		(BinRel(expr1, binrel, expr2), classname)
			-> BinRel(expr3, binrel, expr4)
		where
			expr3 := <insert-this> (expr1, classname);
			expr4 := <insert-this> (expr2, classname)




	
	
	replace-this-for-attribute:
		(thisclassname, otherclassname, attname, BinRel(expr1, binrel, expr2))
			-> (And(constraint1, constraint2), BinRel(expr3, binrel, expr4))
		where
			(constraint1, expr3) := <replace-this-for-attribute> (thisclassname, otherclassname, attname, expr1);
			(constraint2, expr4) := <replace-this-for-attribute> (thisclassname, otherclassname, attname, expr2)

