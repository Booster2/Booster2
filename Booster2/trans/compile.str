module compile

imports
  include/Booster2
  
  library/lookupTable
  
  library/constraint
  // Get rid of these if we can...

  library/abstractBoosterModel
  library/environment
  library/expression
  library/valueExpression

rules

/* get-modified-paths:
	Takes a program and returns all the paths that may be modified by it
*/
	get-modified-paths = collect(\ Assign(path, expression) -> path \)
	
/* get-modified-attributes:
	Takes a program and returns all the attributes that may be modified by it
*/
	get-modified-attributes = collect(\ Assign(path, expression) -> <get-path-attribute> path \)

/* conjoin-constraints:
	Takes a list of constraints and returns their conjunction.
	foldr1 isn't documented - it's like a foldr1 from Haskell
	First argument is a function to deal with the singleton list
	Second argument joins two elements
	foldr1 fails on the empty list - provide an exception case.
*/
	conjoin-constraints = foldr1((\ [x] -> x\),(\ (x,y) -> And(x,y) \)) <+ !True()	 	


	get-mentioned-paths = collect( 	?Path(p, pc) <+ 
									?This() <+ 
									?ThisPrimed() <+
									?Input(i) <+
									?Output(o))


compile:
	system -> system
where
	<map(\ ((cname, mname), (constraint, gc, exts, done, inputs, outputs)) -> <compile-each> (cname, mname, constraint) \) >(<LookupTable> "Method")
						
		

/* 	compile-each:
		Generates a program for each constraint, calculates the invariants and performs the WP. 
*/
			
	compile-each:
			(classname, methname, constraint)
				-> (classname, methname, constraint) 
				
			with
				program := <program> (classname, methname, constraint);
				paths := <get-modified-paths> program;
				/*log(|Error(), "modified paths", <foldout(expression)> (paths, ","));*/
				constraint2a :=  <conjoin-constraints><map(get-type-constraint)> paths;
				/*log(|Error(), "constraint 2a", <constraint> constraint2a);*/
				constraint2b :=  <conjoin-constraints><filter(get-multiplicity-constraint)> paths;
				/* log(|Error(), "constraint 2b", <constraint> constraint2b); */
				constraint3 := <make-post-state> And(constraint2a, constraint2b) ;
				/* log(|Error(), "constraint 3", <constraint> constraint3); */
				
				mod-atts := <get-modified-attributes> program;
				invs := <conjoin-constraints><map(lookup-invariant)> mod-atts;
				/* log(|Error(), "invs", <constraint> invs); */
				constraint4 := <make-post-state> invs ;
				/* log(|Error(), "constraint 4", <constraint> constraint4); */
				
				constraint5 := And(constraint4, constraint3);
				/* log(|Error(), "constraint 5", <constraint> constraint5); */
				
				(constraint6, program2) := <calculate-wp>(program, constraint5, classname, methname);
				/* log(|Error(), "constraint 6", <constraint> constraint6); */
				/* log(|Error(), "program 2", <guardedCommand> program2); */
				
				constraint7 := <make-pre-state> constraint6; 
				<updateMethodProgram> (classname, methname, Guard(constraint7, program2))
			
/*
*/
	calculate-wp:
		(Skip(), constraint, classname, methodname)
			-> (constraint, Skip())

	calculate-wp:
		(Assign(path, expression), constraint1, classname, methname)
			-> (And( constraint2, And(constraint3, constraint4)), Assign(path, expression))
		where 
			path1 := <make-post-state> path;
			constraint2 := <aliasing-substitute> (classname, methname, constraint1, path1, expression, <new-environment>[]);
			constraint3 := <is-defined> (classname, methname, expression, <new-environment>[]);
			constraint4 := <is-defined> (classname, methname, path, <new-environment>[])
			

	calculate-wp:
		(New(o, cl), constraint1, classname, methname)
			-> (And(constraint4, And(constraint3, constraint2)), New(o, cl))
		where 
			
			constraint2 := <aliasing-substitute> (classname, methname, constraint1, PathStart(cl, None()), BinOp(PathStart(cl, None()),Union(), Output(o)), <new-environment>[]);
			constraint3 := <is-defined> (classname, methname, BinOp(PathStart(cl, None()),Union(),Output(o)), <new-environment>[]);
			constraint4 := <is-defined> (classname, methname, PathStart(cl, None()), <new-environment>[])


	// Thomas: Why is the guard "constraint1" never used subsequently?
	// James: Good question!
		
	calculate-wp:
		(Guard(constraint1, program1), constraint2, classname, methname)
			-> (And(constraint4, constraint3), Guard(constraint1, program2))
		where
			log(|Error(),"wp prog w.r.t. prost condition:",(program1,"!!!",constraint2));
			(constraint3, program2) := <calculate-wp> (program1, constraint2, classname, methname);
			log(|Error(),"c3,p2",(constraint3,"!!!",program2));
			constraint4 := <is-defined>(classname, methname, constraint3, <new-environment>[]);
			log(|Error(),"c4",constraint4)
			
			
			
	calculate-wp:
		(Sequence(program1, program2), constraint1, classname, methname)
			-> (constraint3, Sequence(program4, program3))
		where
			(constraint2, program3) := <calculate-wp> (program2, constraint1, classname, methname);
			(constraint3, program4) := <calculate-wp> (program1, constraint2, classname, methname)

	calculate-wp:
		(Choice(program1, program2), constraint1, classname, methname)
			-> (Or(constraint2, constraint3), 
				Choice(Guard(constraint2, program3), 
					   Guard(constraint3, program4)))
				where
			(constraint2, program3) := <calculate-wp> (program1, constraint1, classname, methname);
			(constraint3, program4) := <calculate-wp> (program2, constraint1, classname, methname)

	calculate-wp:
		(Parallel(program1, program2), constraint1, classname, methname)
			-> (constraint3, Parallel(program3, program4))
		where
			(constraint2, program3) := <calculate-wp> (program2, constraint1, classname, methname);
			//<debug> ("constraint2", constraint2);
			(constraint3, program4) := <calculate-wp> (program1, constraint2, classname, methname)
			//<debug> ("constraint3", constraint3)
			


rules

/* 	program:
		takes a constraint, in the context of a class, and a method name,
		and a model, and returns a candidate program to achieve 
		the constraint as a goal			
*/


	program:
		(classname, methodname, True())
			-> Skip()

	program:
		(classname, methodname, False())
			-> Guard(False(), Skip())

	program:
		(classname, methodname, And(constraint1, constraint2))
			-> Parallel(program1, program2)
		with
			program1 := <program> (classname, methodname, constraint1);
			program2 := <program> (classname, methodname, constraint2)

	program:
		(classname, methodname, Or(constraint1, constraint2))
			-> Choice(program1, program2)
		with
			program1 := <program> (classname, methodname, constraint1);
			program2 := <program> (classname, methodname, constraint2)

	program:
		(classname, methodname, Then(constraint1, constraint2))
			-> Sequence(program1, program2)
		with
			program1 := <program> (classname, methodname, constraint1);
			program2 := <program> (classname, methodname, constraint2)

	program:
		(classname, methodname, Implies(constraint1, constraint2))
			-> Choice(Guard(constraint1,program1), Guard(Not(constraint1),Skip()))
		with
			program1 := <program> (classname, methodname, constraint1)

	program:
		(classname, methodname, Not(constraint1))
			-> Guard(Not(constraint1),Skip())



/*	TODO:
		These are incomplete
*/
	program:
		(classname, methodname, Exists(name, expr, constraint))
			-> Any(name, expr, program)
		with
			program := <program> (classname, methodname, constraint)
		
	program:
		(classname, methodname, Forall(name, expr, constraint))
			-> All(name, expr, program)
		with
			program := <program> (classname, methodname, constraint)
		
/* 	program:
		takes a relation, in the context of a class, and a method name,
		and a model, and returns a candidate program to achieve 
		the constraint as a goal			
*/


	program:
		(classname, methodname, BinRel(Path(a,b) {type}, Equal(), expression))
			-> Assign(path1 {type}, expression)
		where
			<not(is-pre-state)> Path(a,b) ;
			path1 := <make-pre-state> Path(a,b);
			<?BasicType(t) <+ ?Optional(BasicType(t)) <+ Set(BasicType(t))> type 

	program:
		(classname, methodname, BinRel(expression, In(), Path(a,b) {type} ))
			-> Assign(path1 {type}, BinOp(path1, Union(), SetExtent([expression])))
		where
			<not(is-pre-state)> Path(a,b) ;
			path1 := <make-pre-state> Path(a,b);
			<?Set(BasicType(t))> type 


	program:
		(classname, methodname, BinRel(Path(a,b) {Reference(name)} , Equal(), expression))
			-> Assign(path1 {Reference(name)} , expression)
		where
			<not(is-pre-state)> Path(a,b) ;
			path1 := <make-pre-state> Path(a,b);
			<is-set-name> name

	program:
		(classname, methodname, BinRel(Path(a,b) { Optional(Reference(name)) }, Equal(), expression))
			-> Assign(path1 { Optional(Reference(name)) }, expression)
		where
			<not(is-pre-state)> Path(a,b) ;
			path1 := <make-pre-state> Path(a,b);
			<is-set-name> name
			
			
	program:
		(classname, methodname, BinRel(Output(o), In(), PathStart(cl,Some(Primed())) { Set(Reference(cl)) }))
			-> New(Output(o), cl) 
		where
			/*log(|Warning(), "Matching new"); */
			<not(is-pre-state)> PathStart(cl,Some(Primed()));
			path1 := <make-pre-state> PathStart(cl,Some(Primed()))  


			

 
 /* Optional-to-Mandatory */
	program:			
		(classname, methodname, BinRel(Path(a {Reference(name4) },b) { Optional(Reference(name2)) }, Equal(), Null()))
			-> Parallel(Assign(path3 { Optional(Reference(name2)) }, Null()),
						Guard(BinRel(path3 { Optional(Reference(name2)) } , NotEqual(), Null() ),
							  Assign(PathStart(name2, None()) {Set(Reference(name2))},
							  		 BinOp(PathStart(name2, None()) {Set(Reference(name2))}, Minus(),
							  		 	   SetExtent([path3 { Optional(Reference(name2)) }]) { Set(Reference(name2))}))))
		where
			<not(is-pre-state)> (Path(a,b));
			<is-class-name> name2;
			name3 := <get-path-attribute-name> Path(a,b);
			(name2, name6) := <lookup-opposite> (name4, name3);
			Reference(name4) := <lookup-attribute-type> (name2, name6);
			path3 := <make-pre-state> (Path(a,b))



 /* Optional-to-Optional */
	program:			
		(classname, methodname, BinRel(Path(a { Reference(name4) },b) { Optional(Reference(name2)) }, Equal(), Null(){ Optional(Reference(name2)) }))
			-> Parallel(Assign(path3 { Optional(Reference(name2)) }, Null(){ Optional(Reference(name2)) }),
						Choice(Guard(BinRel(path3 { Optional(Reference(name2)) }, NotEqual(), Null(){ Optional(Reference(name2)) }),
							  Assign(Path(path3 { Optional(Reference(name2)) }, PathComponent(name6, None())) { Optional(Reference(name4)) },
							  		 Null())),
							  Guard(BinRel(path3 { Optional(Reference(name2)) }, Equal(), Null(){ Optional(Reference(name2)) }),Skip())))
		where
			<not(is-pre-state)> (Path(a,b));
			<is-class-name> name2;
			name3 := <get-path-attribute-name> (Path(a,b));
			(name2, name6) := <lookup-opposite> ((name4, name3));
			Optional(Reference(name4)) := <lookup-attribute-type> ((name2, name6));
			path3 := <make-pre-state> (Path(a,b))
	
 /* Optional-to-Set-valued */
	program:			
		(classname, methodname, BinRel(Path(a { Reference(name4) },b) {Optional(Reference(name2))}, Equal(), Null()))
			-> Parallel(Assign(path3 {Optional(Reference(name2))}, Null()),
						Guard(BinRel(path3 {Optional(Reference(name2))}, NotEqual(), Null()),
							  Assign(Path(path3{Optional(Reference(name2))}, 
							  		 			PathComponent(name6, None())){Set(Reference(name4))},
							  		 BinOp(Path(path3 {Optional(Reference(name2))}, 
							  		 			PathComponent(name6, None())) {Set(Reference(name4))}, Minus(),  
							  		 	   SetExtent([a { Reference(name4) }]){Set(Reference(name4))}))))
		where
			<not(is-pre-state)> (Path(a,b));		
			<is-class-name> name2;
			name3 := <get-path-attribute-name> (Path(a,b));
			(name2, name6) := <lookup-opposite> ((name4, name3));
			Set(Reference(name4)) := <lookup-attribute-type> ((name2, name6));
			path3 := <make-pre-state> (Path(a,b))

 /* Set-valued-to-Mandatory */
	program:			
		(classname, methodname, BinRel(expression { Reference(name2)}, NotIn(), Path(a { Reference(name4) },b) { Set(Reference(name2))}))
			-> Parallel(Assign(path3 { Set(Reference(name2))}, BinOp(path3 { Set(Reference(name2))}, Minus(), SetExtent([expression{Reference(name2)}]){ Set(Reference(name2))})),
					    Assign(PathStart(name2, None()){ Set(Reference(name2))},
					    	   BinOp(PathStart(name2, None()){ Set(Reference(name2))}, Minus(), 
					    	   		 SetExtent([expression{ Reference(name2)}]){ Set(Reference(name2))})))
		where
			<not(is-pre-state)> (Path(a,b));
			<is-class-name> name2;
			name3 := <get-path-attribute-name> (Path(a,b));
			(name2, name6) := <lookup-opposite> ((name4, name3));
			Reference(name4) := <lookup-attribute-type> ((name2, name6));
			path3 := <make-pre-state> (Path(a,b))
			
 /* Set-valued-to-Optional */
	program:			
		(classname, methodname, BinRel(expression { Reference(name2) }, NotIn(), Path(a { Reference(name4) },b) { Set(Reference(name2)) }))
			-> Parallel(Assign(path3,
							   BinOp(path3, Minus(), SetExtent([expression{ Reference(name2) }]){ Set(Reference(name2)) })),
						Assign(Path(expression{ Reference(name2) }, PathComponent(name6, None())),
							   Null()))
		where
			<not(is-pre-state)> (Path(a,b));
			<is-class-name> name2;
			name3 := <get-path-attribute-name> (Path(a,b));
			(name2, name6) := <lookup-opposite> ((name4, name3));
			Optional(Reference(name4)) := <lookup-attribute-type> ((name2, name6));
			path3 := <make-pre-state> (Path(a,b))
			

 /* Set-valued-to-Set-valued */
	program:			
		(classname, methodname, BinRel(expression { Reference(name2) }, NotIn(), Path(a{Reference(name4)},b) { Set(Reference(name2)) }))
			-> Parallel(Assign(path3,
							   BinOp(path3{ Set(Reference(name2)) }, Minus(), SetExtent([expression{ Reference(name2) }]){ Set(Reference(name2)) })),
						Assign(Path(expression { Reference(name2) }, PathComponent(name6, None())),
							   BinOp(Path(expression { Reference(name2) }, PathComponent(name6, None())), Minus(),  
							   		 SetExtent([a {Reference(name4)}]{Set(Reference(name4))}))))
		where
			<not(is-pre-state)> (Path(a,b));
			<is-class-name> name2;
			name3 := <get-path-attribute-name> (Path(a,b));
			(name2, name6) := <lookup-opposite> ((name4, name3));
			Set(Reference(name4)) := <lookup-attribute-type> ((name2, name6));
			path3 := <make-pre-state> (Path(a,b))

/* Mandatory-to-Mandatory */
	program:
		(classname, methodname, BinRel(Path(a { Reference(name4) },b){ Reference(name2) }, Equal(), expression {Reference(name2)}))
			-> Guard(BinRel(expression{Reference(name2)}, NotIn(), PathStart(name2, None()){Set(Reference(name2))}), 
				Parallel(Assign(path3{ Reference(name2) }, expression{Reference(name2)}), 
						 Assign(Path(expression{Reference(name2)},PathComponent(name6, None())){Reference(name4)},a {Reference(name4)})))
		where
			<not(is-pre-state)> (Path(a,b));
			<is-class-name> name2;
			name3 := <get-path-attribute-name> (Path(a,b));
			(name2, name6) := <lookup-opposite> ((name4, name3));
			Reference(name4) := <lookup-attribute-type> ((name2, name6));
			path3 := <make-pre-state> (Path(a,b))


/** Up to here! **/
			
/* Mandatory-to-Optional */
	program:
		(classname, methodname, BinRel(Path(a { Reference(name4)},b) { Reference(name2) }, Equal(), expression { Reference(name2) }))
			-> Parallel(Parallel(Assign(path3{ Reference(name2) }, expression{ Reference(name2) }),
								 Assign(Path(expression{ Reference(name2) }, PathComponent(name6, None())){ Reference(name4)}, a { Reference(name4)})),
						Assign(Path(path3{ Reference(name2) }, PathComponent(name6, None())){ Reference(name4)}, Null()) )
		where
			<not(is-pre-state)> (Path(a,b));
			<is-class-name> name2;
			name3 := <get-path-attribute-name> (Path(a,b));
			(name2, name6) := <lookup-opposite> ((name4, name3));
			Optional(Reference(name4)) := <lookup-attribute-type> ((name2, name6));
			path3 := <make-pre-state> (Path(a,b))
			
/* Mandatory-to-Set-valued */
	program:			
		(classname, methodname, BinRel(Path(a{ Reference(name4) },b) { Reference(name2) }, Equal(), expression { Reference(name2) }))
			-> Parallel(Parallel(Assign(path3 { Reference(name2) }, expression { Reference(name2) }),
								 Assign(Path(Path(a { Reference(name4) }, PathComponent(name3, None())){ Reference(name2) }, 
								 			 PathComponent(name6, None())){ Set(Reference(name4)) },
								 		BinOp(Path(Path(a { Reference(name4) }, PathComponent(name3, None())){ Reference(name2) },  
								 	    	  	PathComponent(name6, None())){ Set(Reference(name4)) }, Minus(), 
								 	    	  SetExtent([a { Reference(name4) }]) { Set(Reference(name4)) }))),
						Assign(Path(expression { Reference(name2) }, PathComponent(name6, None())){ Set(Reference(name4)) }, 
							   BinOp(Path(expression { Reference(name2) }, PathComponent(name6, None())){ Set(Reference(name4)) }, Union(),
							   		 SetExtent([a { Reference(name4) }]) { Set(Reference(name4)) })))
								 
		where
			<not(is-pre-state)> (Path(a,b));
			<is-class-name> name2;
			name3 := <get-path-attribute-name>(Path(a,b));
			(name2, name6) := <lookup-opposite> ((name4, name3));
			Set(Reference(name4)) := <lookup-attribute-type> ((name2, name6));
			path3 := <make-pre-state> (Path(a,b))

/* Optional-to-mandatory */
	program:			
		(classname, methodname, BinRel(Path(a { Reference(name4)},b) { Optional(Reference(name2)) }, Equal(), expression { Optional(Reference(name2)) }))
			-> Guard(BinRel(path3{ Optional(Reference(name2)) }, NotEqual(), PathStart(name2, None()){ Optional(Reference(name2)) }),
					 Parallel(Parallel(Assign(path3{ Optional(Reference(name2)) }, expression { Optional(Reference(name2)) } ),
					 		  		   Choice(Guard(And(BinRel(path3{ Optional(Reference(name2)) }, NotEqual(), Null()),
					 		  			                BinRel(path3{ Optional(Reference(name2)) }, NotEqual(), expression { Optional(Reference(name2)) })),
					 		  				        Assign(PathStart(name2, None()){ Set(Reference(name2)) }, BinOp(PathStart(name2, None()) { Set(Reference(name2)) }, Minus(), 
					 		  							  		        SetExtent([Path(a { Reference(name4)}, 
					 		  											                PathComponent(name3, None())){ Optional(Reference(name2)) }]){ Set(Reference(name2)) }))),
					 		  			      Guard(Or(BinRel(path3{ Optional(Reference(name2)) }, Equal(), Null()),
					 		  			      		   BinRel(path3{ Optional(Reference(name2)) }, Equal(), expression { Optional(Reference(name2)) })),
					 		  			      		Skip()))),
					 		  Assign(Path(expression { Optional(Reference(name2)) }, PathComponent(name6, None())){ Reference(name4)},
					 		  	     a { Reference(name4)})))
		where
			<is-class-name> name2;
			<not(is-pre-state)> (Path(a,b));
			name3 := <get-path-attribute-name> (Path(a,b));
			(name2, name6) := <lookup-opposite> ((name4, name3));
			Reference(name4) := <lookup-attribute-type> ((name2, name6));
			path3 := <make-pre-state>(Path(a,b))
			
/* Optional-to-optional */
	program:			
		(classname, methodname, BinRel(Path(a {Reference(name4)},b) { Optional(Reference(name2)) }, Equal(), expression { Optional(Reference(name2)) }))
			-> Parallel(Parallel(Assign(path3 { Optional(Reference(name2)) }, expression { Optional(Reference(name2)) }),
								 Choice(Guard(And(BinRel(path3 { Optional(Reference(name2)) }, NotEqual(), Null()),
								 				  BinRel(path3 { Optional(Reference(name2)) }, NotEqual(), expression { Optional(Reference(name2)) })),
								 			  Assign(Path(Path(a {Reference(name4)}, PathComponent(name3, None())){ Optional(Reference(name2)) },
								 			  			  PathComponent(name6, None())){ Optional(Reference(name4)) },
								 			  		 Null())),
								 		Guard(Or(BinRel(path3 { Optional(Reference(name2)) }, Equal(), Null()),
								 				 BinRel(path3 { Optional(Reference(name2)) }, Equal(), expression { Optional(Reference(name2)) })),
								 			  Skip()))),
						Parallel(Choice(Guard(And(BinRel(Path(expression { Optional(Reference(name2)) }, PathComponent(name6, None())){ Optional(Reference(name4)) },
														   NotEqual(), Null()),
												  BinRel(Path(expression { Optional(Reference(name2)) }, PathComponent(name6, None())){ Optional(Reference(name4)) },
														   NotEqual(), a {Reference(name4)})),
											  Assign(Path(Path(expression { Optional(Reference(name2)) }, PathComponent(name6, None())){ Optional(Reference(name4)) },
											  			  PathComponent(name3, None())){ Optional(Reference(name2)) },
											  		 Null())),
										Guard(Or(BinRel(Path(expression { Optional(Reference(name2)) }, PathComponent(name6, None())){ Optional(Reference(name4)) },
													   Equal(), Null()),
												 BinRel(Path(expression { Optional(Reference(name2)) }, PathComponent(name6, None())){ Optional(Reference(name4)) },
													   Equal(), a {Reference(name4)})),
											  Skip())),
								 Assign(Path(expression { Optional(Reference(name2)) }, PathComponent(name6, None())){ Optional(Reference(name4)) },
								 		a {Reference(name4)})))
		where
			<is-class-name> name2;
			<not(is-pre-state)> (Path(a,b)); 	
			name3 := <get-path-attribute-name>(Path(a,b));
			(name2, name6) := <lookup-opposite>((name4, name3));
			Optional(Reference(name4)) := <lookup-attribute-type> ((name2, name6));
			path3 := <make-pre-state> (Path(a,b))
	
/* Optional-to-Set-valued */
	program:			
		(classname, methodname, BinRel(Path(a {Reference(name4)},b) {Optional(Reference(name2))}, Equal(), expression{Optional(Reference(name2))}))
			-> 	Parallel(
			  		Parallel(
			  			Assign(path3{Optional(Reference(name2))}, expression{Optional(Reference(name2))}),
						Choice(
							Guard(
								And(
									BinRel(path3{Optional(Reference(name2))}, NotEqual(), Null()),
								 	BinRel(path3{Optional(Reference(name2))}, NotEqual(), expression{Optional(Reference(name2))})),
								Assign(
									Path(
										Path(a {Reference(name4)}, PathComponent(name3,None())){Optional(Reference(name2))}, 
								 		PathComponent(name6, None())){Set(Reference(name4))},
								 	BinOp(
								 		Path(
								 			Path(a {Reference(name4)}, PathComponent(name3,None())), 
								 			PathComponent(name6, None())){Set(Reference(name4))}, Minus(), 
								 	SetExtent([a {Reference(name4)}]){Set(Reference(name4))}))),
							Guard(
								Or(
									BinRel(path3{Optional(Reference(name2))}, Equal(), Null()),
								 	BinRel(path3{Optional(Reference(name2))}, Equal(), expression{Optional(Reference(name2))})),
					  		    Skip()))),
					Assign(
						Path(expression {Optional(Reference(name2))}, PathComponent(name6, None())){Set(Reference(name4))},
						BinOp(
							Path(expression{Optional(Reference(name2))}, PathComponent(name6, None())){Set(Reference(name4))}, Union(), 
							SetExtent([a {Reference(name4)}]){Set(Reference(name4))})))
			
		where
			<is-class-name> name2;
			<not(is-pre-state)> (Path(a,b));
			name3 := <get-path-attribute-name>(Path(a,b));
			(name2, name6) := <lookup-opposite> ((name4, name3));
			Set(Reference(name4)) := <lookup-attribute-type> ((name2, name6));
			path3 := <make-pre-state> (Path(a,b))

		
/* Set-valued-to-Mandatory */
	program:			
		(classname, methodname, BinRel(expression {Reference(name2)}, In(), Path(a {Reference(name4)},b) {Set(Reference(name2))}))
			-> (Guard(
					BinRel(expression {Reference(name2)}, NotIn(), path3 {Set(Reference(name2))}), 
					Parallel(
							Parallel(
									Assign(
										path3{Set(Reference(name2))},
							  			BinOp(path3{Set(Reference(name2))}, Union(), SetExtent([expression {Reference(name2)}]))), 
									Assign(
										Path(expression {Reference(name2)}, PathComponent(name6, None())),
							   			a {Reference(name4)})),
							Assign(Path(Path(expression {Reference(name2)}, PathComponent(name6, None())){Reference(name4)},
								 	   			   PathComponent(name3, None())){Set(Reference(name2))},
								 	   		  BinOp(Path(Path(expression {Reference(name2)}, PathComponent(name6, None())){Reference(name4)},
								 	   			   	     PathComponent(name3, None())){Set(Reference(name2))}, Minus(), 
								 	   			   	SetExtent([expression {Reference(name2)}]){Set(Reference(name2))})))))
		where
			<is-class-name> name2;
			<not(is-pre-state)> (Path(a,b));
			name3 := <get-path-attribute-name> (Path(a,b));
			(name2, name6) := <lookup-opposite> ((name4, name3));
			Reference(name4) := <lookup-attribute-type> ((name2, name6));
			path3 := <make-pre-state> (Path(a,b))

/* Set-valued-to-Optional */
	program:			
		(classname, methodname, BinRel(expression{Reference(name2)}, In(), Path(a {Reference(name4)},b){Set(Reference(name2))}))
			-> Parallel(Parallel(Assign(path3{Set(Reference(name2))},
										BinOp(path3{Set(Reference(name2))}, Union(), SetExtent([expression{Reference(name2)}]){Set(Reference(name2))})),
								 Guard(BinRel(Path(expression{Reference(name2)}, 
								 					 PathComponent(name6, None())){Reference(name4)},
								 				NotEqual(), Null()),
								 	   Assign(Path(Path(expression{Reference(name2)}, PathComponent(name6, None())){Reference(name4)},
								 	   			   PathComponent(name3, None())){Set(Reference(name4))},
								 	   		  BinOp(Path(Path(expression{Reference(name2)}, PathComponent(name6, None())){Reference(name4)},
								 	   			   	     PathComponent(name3, None())){Set(Reference(name2))},
								 	   			   	Minus(), 
								 	   			   	SetExtent([Path(expression{Reference(name2)}, PathComponent(name6, None()))]){Set(Reference(name2))})))),
						Assign(Path(expression{Reference(name2)}, PathComponent(name6, None())){Reference(name4)},
							   a {Reference(name4)}))
		where
			<is-class-name> name2;
			<not(is-pre-state)> (Path(a,b));
			name3 := <get-path-attribute-name> (Path(a,b));
			(name2, name6) := <lookup-opposite> ((name4, name3));
			Optional(Reference(name4)) := <lookup-attribute-type> ((name2, name6));
			path3 := <make-pre-state> (Path(a,b))
		
/* Set-valued-to-Set-valued */
	program:			
		(classname, methodname, BinRel(expression{Reference(name2)}, In(), Path(a { Reference(name4) },b){Set(Reference(name2))}))
			-> Parallel(Assign(path3 {Set(Reference(name2))},
							   BinOp(path3{Set(Reference(name2))}, Union(), 
							   		 SetExtent([expression{Reference(name2)}]){Set(Reference(name2))})),
						Assign(Path(expression{Reference(name2)}, PathComponent(name6, None())){ Set(Reference(name4)) },
							   BinOp(Path(expression{Reference(name2)}, PathComponent(name6, None())){ Set(Reference(name4)) }, Union(), 
							   		 SetExtent([a { Reference(name4) }]){ Set(Reference(name4)) })))
		where
			<is-class-name> name2;
			<not(is-pre-state)> (Path(a,b));
			name3 := <get-path-attribute-name> (Path(a,b));
			(name2, name6) := <lookup-opposite> ((name4, name3));
			Set(Reference(name4)) := <lookup-attribute-type> ((name2, name6));
			path3 := <make-pre-state> (Path(a,b))

					
/* Default */

	program:
		(classname, methodname, relation1)
			-> Guard(relation2, Skip())
		where
			relation2 := <make-pre-state> (relation1);
			log(|Warning(), "cannot determine program", relation1)

			
			


/* 	make-pre-state:
		takes a constraint, and returns its representation in the 
		pre-state of a method 			
*/

	make-pre-state:
		constraint ->
			<bottomup(try( (\ PathComponent(name, Some(Primed())) -> PathComponent(name, None()) \) <+
						   (\ PathStart(name, Some(Primed())) -> PathStart(name, None()) \) <+
						   (\ ThisPrimed() -> This() \)  
						   		))> constraint 	

/* 	make-post-state:
		takes a constraint, and returns its representation in the 
		post-state of a method 			
*/

	make-post-state:
		constraint ->
			<bottomup(try( (\ PathComponent(name, None()) {type} -> PathComponent(name, Some(Primed())) {type}  \) <+
						   (\ PathStart(name, None()) {type}  -> PathStart(name, Some(Primed())) {type}  \) <+
						   (\ This() {type}  -> ThisPrimed() {type}  \)  
						   		))> constraint 	

/*	is-pre-state
		takes a constraint, and returns if can be entirely evaluated in the pre-state.  Ie. there are no primes 
*/
	is-pre-state:
		constraint ->
			<equal>([], <collect(?PathComponent(name, Some(Primed())) <+ 
								?PathStart(name, Some(Primed())) <+
								?ThisPrimed() <+
								?Output(s))> constraint)
			 



/* 	get-mentioned-attributes:
		takes an expression, in the context of a class, maybe a method name,
		and a model, and returns the list of attributes that it
		constrains.			
*/		

	get-mentioned-attributes:
		(cname, mname,expr, env)
			-> <collect((\ term -> (cname, mname, term, env)\) ; _get-mentioned-attributes)>

	
	_get-mentioned-attributes:
		(cname, mname, PathStart(attname, maybeprimed), env)
			-> (cname, attname)
		where
			type := <lookup-attribute-type> ((cname, attname))
		// i.e. the attribute does exist
		

	_get-mentioned-attributes:
		(cname, mname, Path(path{ Reference(otherclassname)}, PathComponent(attname, maybeprimed)), env)
			-> (otherclassname, attname)
		where
			type := <lookup-attribute-type> ((otherclassname, attname))

	_get-mentioned-attributes:
		(cname, mname, Path(path { Optional(Reference(otherclassname)) }, PathComponent(attname, maybeprimed)), env)
			-> (otherclassname, attname)
		where
			type := <lookup-attribute-type> ((otherclassname, attname))
			

	get-multiplicity-constraint:
		path 
			-> constraint
		where
			att := <get-path-attribute> path;
			Set(s) := <lookup-attribute-type> att;
			constraint := <get-mult-constraint>(path, att)


	get-mult-constraint:
		(path, att)
			-> BinRel(UnOp(Cardinality(),path), GreaterThanEquals(), BasicValue(Integer(min)))
		where
			"*" := <lookup-max-mult> att ;
			min := <lookup-min-mult> att

	get-mult-constraint:
		(path, att)
			-> And(BinRel(UnOp(Cardinality(),path), LessThanEquals(), BasicValue(Integer(max))), BinRel(UnOp(Cardinality(),path), GreaterThanEquals(), BasicValue(Integer(min))))
		where
			max := <lookup-max-mult> att;
			min := <lookup-min-mult> att


	