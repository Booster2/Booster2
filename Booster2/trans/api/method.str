module trans/api/method

imports
	
	//include/Booster2
	lib/eq
	api/type
	api/path
	api/constraint
	api/guarded-command
	api/_runtime
	api/_runtime-constructors
		
	runtime/types/collect
		
	names/names
	generation/simplify

	runtime/relations/entries
	runtime/nabl/namegen
	runtime/nabl/uri
	
rules // conjoin methods
	
	method-body = ?Method(_, _, <id>)
	method-name = ?Method(<id>, _, _)
	
	method-comp-name: Method(mname, _, gc) -> <concat-strings>[<method-parent> mname, "_", mname]
	
	// @type [Method] -> [Method]
	method-conjoin-all: [] -> []
	method-conjoin-all: [m|m-tail*] -> m'*
		with
			m-tail'* := <method-conjoin-all>m-tail*;
			m'*      := <method-conjoin(|m)>m-tail'*
	
	// @type (|Method) [Method] -> [Method]
	method-conjoin(|m): method* -> method'*
		where
			is-list
		with
			method'* := <one(method-conjoin(|m))>method* <+
			method'* := [m|method*]
	
	// @type (|Method) Method -> Method or fail
	method-conjoin(|m): Method(name1, decs, body1) -> Method(name, decs, body)
		where
			Method(name2, _, body2) := m;
			<eq-an>(name1, name2)
		with
			name := name1;
			body := And(body1, body2)

	method-parent = _nabl-uri ; _nabl-uri-parent ; _nabl-uri-name
	
	is-obj-method: m -> False() where <equal>(<collect-all( ?This() <+ ( ?PathStart(_,_) ; path-prefix ; ?This() ) )> m, [])
	is-obj-method = !True()
	
	method-inputs = ?Method(name, _, <id>) ; collect-all(is-input) ; nub-an
	method-outputs = ?Method(name, _, <id>) ; collect-all(?Output(_) <+ (?New(o, C) ; !Output(o)) ) ; nub-an


	is-input = ?Input(_ {Def(_)}) 
 	is-input = ?This()
 	is-input = ?CurrentUser()
 	is-input: ps@PathStart(_{ann}, _) -> This(){Def(ann')}
 		where   
 			<_nabl-collect-use ; relation-resolve-use ; _nabl-uri-namespace ; ?NablNsAttribute() > ps;
 			uq := <nabl-uri ; nabl-uri-parent; collect-one(?Unique(_))> ann;
 			ann' := <nabl-uri ; nabl-uri-parent ; nabl-extend-uri(|ID(NablNsThis(), This(), uq))>ann

	get-params = <concat>[<method-inputs>, <method-outputs>]

	convert-param = ?Input(n) ; !Input(<concat-strings>[n, "_in"], <_get-type ; sql-type> n)
	convert-param = ?This() ; !Input("this", Varchar("36"))
	convert-param = ?CurrentUser() ; !Input("_currentUser", Varchar("36"))
	convert-param = ?Output(n) ; !Output(<concat-strings>[n, "_out"], <_get-type ; sql-type> n)
	
	get-sql-params = get-params ; nub-an ; map(convert-param) 
	get-sql-inputs = method-inputs ; nub-an ; map(convert-param) 
	
	guard-without-ins-outs = method-body ; get-guard ; remove-inputs-and-outputs(|[]) ; simplify
	
	guard-without-outs = method-body ; get-guard ; remove-outputs(|[]) ; simplify
	
rules	
	