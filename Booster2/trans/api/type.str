module lib/api/type

imports
//	include/Booster2
	trans/api/_runtime
	names/names
	trans/types-manual

rules 

	prim-type-string = (_get-type ; is-prim-type ; type-to-string) <+ (is-class ; !"ClassRef") <+ (is-enum ; !"SetValue")
	multiplicity-string = (_get-type ; get-mult ; mult-to-string) <+ !""
	
	get-mult: Set(_) -> Set()
	get-mult: Optional(_) -> Optional()
	get-mult: _ -> Mandatory()

	is-prim-type = (?Set(BasicType(<id>)) <+ ?Optional(BasicType(<id>)) <+ ?BasicType(<id>)) 
		 		
	type-to-string: String() -> "String"
	type-to-string: Int() -> "Integer"
	type-to-string: DateTime() -> "DateTime"
	type-to-string: Date() -> "Date"
	type-to-string: Time() -> "Time"
	type-to-string: Decimal() -> "Decimal"
	type-to-string: Boolean() -> "Boolean"
	type-to-string: Password() -> "Password"
	
	multiplicity-to-string = get-multiplicity ; multiplicity-string
	
	mult-to-string: Set() -> "Set"
	mult-to-string: Optional() -> "Optional"
	mult-to-string: Mandatory() -> "Mandatory"

	is-class: p -> p where <_get-type ; ?Set(<id>) ; _nabl-uri ; _nabl-uri-namespace ; ?NablNsClass()> p	
	is-class: p -> p where <_get-type ; _nabl-uri ; _nabl-uri-namespace ; ?NablNsClass()> p
	
	is-enum = _get-type ; _nabl-uri ; _nabl-uri-namespace ; ?NablNsSet()



	class-name: x -> y
		where
			Set(y) := <_get-type> x;
			<is-class> x

	class-name: x -> y
		where
			y := <_get-type> x;
			<is-class> x

	class-name: _ -> ""

	set-name: x -> y
		where
			y := <_get-type> x;
			<is-enum> x
			
	set-name: _ -> ""
			
			
	sql-type: String() -> Text()
	sql-type: Int() -> Int()
	sql-type: DateTime() -> DateTime()
	sql-type: Date() -> Date()
	sql-type: Time() -> Time()
	sql-type: Decimal() -> Decimal()
	sql-type: Boolean() -> Bit()
	sql-type: Password() -> Text()
			
	sql-type: BasicType(t) -> <sql-type> t
	
	sql-type: name -> Int() where <is-class> name
	sql-type: name -> Varchar("100") where <is-enum> name
	
rules				
