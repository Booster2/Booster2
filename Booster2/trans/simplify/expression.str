module simplify/expression

imports
  include/Booster2
  
 
  	
rules

	simplify:
		(BinOp(BasicValue(Integer(i)), Times(), BasicValue(Integer(j))))
			-> BasicValue(Integer( k ))
		where
			k := <mulS>(i, j)

			
	simplify:
		(BinOp(BasicValue(Integer(i)), Plus(), BasicValue(Integer(j))))
			-> BasicValue(Integer( k ))
		where
			k := <addS>(i, j)

	simplify:
		(BinOp(BasicValue(Integer(i)), Minus(), BasicValue(Integer(j))))
			-> BasicValue(Integer( k ))
		where
			k := <subtS>(i, j)

	simplify:
		(BinOp(BasicValue(Integer(i)), Divide(), BasicValue(Integer(j))))
			-> BasicValue(Integer( k ))
		where
			k := <divS>(i, j)

			
	simplify:
		Cardinality(BinOp(a,Union(), b))
			-> BinOp(Cardinality(a), Plus(), Cardinality(b))
	
	simplify:
		Cardinality(SetExtent([]))
			-> BasicValue(Integer(0))	

/*	simplify:
		Cardinality(SetExtent([a]))
			-> BasicValue(Integer(1))
*/			
	simplify:
		Cardinality(SetExtent([a, as*]))
			-> BasicValue(Integer(k))
		where
			BasicValue(Integer(i)) := <simplify> Cardinality(SetExtent([as*]));
			k := <add>(i,1)
			

			
