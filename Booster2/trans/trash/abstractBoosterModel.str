module trash/abstractBoosterModel

imports
  include/Booster2

 
 rules
 	
/* 	lookup-set-name:
		Takes an identifier, and a model, and returns it back again
		if the identifier is the name of a set in the model 	
*/

/*	lookup-set-name:
		(setname, AbstractBoosterModel(systemname, sets, classes, extends, invariants, rinvariants, cinvariants, attributes, atttypes, maxmult, minmult, ordering, opposite, operations, constraint, inputs, outputs, program))
			-> setname
		where
			<elem>(setname, <map(get-setdef-name)> sets)
*/
/* 	lookup-set-value:
		Takes an identifier, and a model, and returns the 
		name of the set it appears in 	
*/
/*
	lookup-set-value:
		(setvalue, AbstractBoosterModel(systemname, sets, classes, extends, invariants, rinvariants, cinvariants, attributes, atttypes, maxmult, minmult, ordering, opposite, operations, constraint, inputs, outputs, program))
			-> setname
		where
			setname := <lookup-value-in-sets>(setvalue, sets) 
*/			
/* 	lookup-class-name:
		Takes an identifier, and a model, and returns it back again
		if the identifier is the name of a class in the model 	
*/

/*	lookup-class-name:
		(classname, AbstractBoosterModel(systemname, sets, classes, extends, invariants, rinvariants, cinvariants, attributes, atttypes, maxmult, minmult, ordering, opposite, operations, constraint, inputs, outputs, program))
			-> classname
		where
			<elem>(classname, classes)
*/			
/* 	lookup-attribute-type:
		Takes a class name, and an attribute name, and a model, 
		and returns the type of that attribute in the model 	
*/
/*
	lookup-attribute-type:
		((classname, attname), AbstractBoosterModel(systemname, sets, classes, extends, invariants, rinvariants, cinvariants, attributes, atttypes, maxmult, minmult, ordering, opposite, operations, constraint, inputs, outputs, program))
			-> type
		where
			type := <lookup>((classname, attname), atttypes)
*/			
/* 	lookup-input-type:
		Takes a class name, and a method name, and an input name,
		and a model, 
		and returns the type of that input in the model 	
*/

/*	lookup-input-type:
		(((classname, methname), inputname), AbstractBoosterModel(systemname, sets, classes, extends, invariants, rinvariants, cinvariants, attributes, atttypes, maxmult, minmult, ordering, opposite, operations, constraint, inputs, outputs, program))
			-> type
		where
			type := <lookup>(inputname,<lookup>((classname, methname), inputs))
			
	lookup-input-type:
			e -> String()
		where
			log(|Error(), "lookup-input-type fail", e)
*/			
			
/* 	lookup-input-type:
		Takes a class name, and a method name, and an input name,
		and a model, 
		and returns the type of that input in the model 	
*/

/*	lookup-output-type:
		(((classname, methname), outputname), AbstractBoosterModel(systemname, sets, classes, extends, invariants, rinvariants, cinvariants, attributes, atttypes, maxmult, minmult, ordering, opposite, operations, constraint, inputs, outputs, program))
			-> type
		where
			type := <lookup>(outputname,<lookup>((classname, methname), outputs))
*/			
			
/* 	lookup-opposite:
		Takes a class name, and an attribute name, and a model, 
		and returns the class name, attribute name pair that is its opposite 	
*/

/*	lookup-opposite:
		((classname, attname), AbstractBoosterModel(systemname, sets, classes, extends, invariants, rinvariants, cinvariants, attributes, atttypes, maxmult, minmult, ordering, opposite, operations, constraint, inputs, outputs, program))
			-> (classname1, attname1)
		where
			(classname1, attname1) := <lookup>((classname, attname), opposite)
*/			
			
