module simplify

imports
  include/Booster2
  
  simplify

rules

	simplify-main:
		system -> system
		with
			simp-programs := <map(simp)> <LookupTable> "Programs"; 
			rules(
				LookupTable :+ "Programs" -> simp-programs
			)
			
	simp:
		((classname, progname), prog) 
			-> ((classname, progname), <innermost(simplify)> prog)
			
			// Some normalisation rules?
/*	simplify:
		BinRel(expr, Equal(), This())
			-> BinRel(This(), Equal(), expr)
		where
			<not(eq)>(This(), expr)

	simplify:
		BinRel(expr, NotEqual(), This())
			-> BinRel(This(), NotEqual(), expr)
		where
			<not(eq)>(This(), expr)
*/

	simplify:
		Forall(name, PathStart(classname, None()), Implies(constraint1, constraint2))
			-> True()		
		where
			<elem>((classname, Forall(name, PathStart(classname, None()), constraint2)), <LookupTable> "QualifiedInvariants")  


	simplify:
		And(True(), constraint)
			-> constraint
			
	simplify:
		And(constraint, True())
			-> constraint

	simplify:
		And(False(), constraint)
			-> False()

	simplify:
		And(constraint, False())
			-> False()
			
	simplify:
		Or(constraint, True())
			-> True()
	
	simplify:
		Or(True(), constraint)
			-> True()
			
	simplify:
		Implies(True(), constraint)
			-> constraint

	simplify:
		Implies(False(), constraint)
			-> True()

	simplify:
		Implies(constraint, True())
			-> True()
			
	simplify:
		Implies(constraint, False())
			-> Not(constraint)
			
	simplify:
		Implies(p, Implies(p, constraint))
			-> Implies(p, constraint)



	simplify:
		Implies(
			BinRel(a, Equal(), b),
			Implies(
				BinRel(a, NotEqual(), b),
				constraint
		)) -> Implies(False(), constraint)

	simplify:
		Implies(
			BinRel(a, NotEqual(), b),
			Implies(
				BinRel(a, Equal(), b),
				constraint
		)) -> Implies(False(), constraint)
	
	simplify:
		Guard(True(), program)
			-> program
			
	simplify:
		And(constraint, constraint)
			-> constraint

	simplify:
		And(constraint, And(constraint1, constraint) )
			-> And(constraint1, constraint)
			
	simplify:
		And(constraint, And(constraint, constraint1) )
			-> And(constraint1, constraint)
			
	simplify:
		(Or(constraint, False()))
			-> constraint

	simplify:
		(Or(False(), constraint))
			-> constraint
		

	simplify:
		And(And(constraint, constraint1), constraint  )
			-> And(constraint1, constraint)

	simplify:
		And(And(constraint1, constraint), constraint  )
			-> And(constraint1, constraint)
			
	simplify:
		And(BinRel(expression1, Equal(), expression2), BinRel(expression1, NotEqual(), expression2))
			-> False()

	simplify:
		And(BinRel(expression1, NotEqual(), expression2), BinRel(expression1, Equal(), expression2))
			-> False()
			
	simplify:
		Implies(And(BinRel(e1, Equal(), e2), BinRel(e3, Equal(), e4)), BinRel(e3, NotEqual(), e4))
			-> Or(BinRel(e1, NotEqual(), e2),BinRel(e3,NotEqual(), e4)) 

	simplify:
		Implies(And(BinRel(e1, Equal(), e2), BinRel(e3, NotEqual(), e4)), BinRel(e3, Equal(), e4))
			-> Or(BinRel(e1, NotEqual(), e2),BinRel(e3, Equal(), e4)) 
			
	simplify:
		Or(
			And(
				BinRel(expression1, NotEqual(), expression2),
				BinRel(expression1, NotEqual(), expression3)),
			Or(BinRel(expression1, Equal(), expression2),
			   BinRel(expression1, Equal(), expression3)))
		-> True()
			
	simplify:
		Or(
			And(
				BinRel(expression1, NotEqual(), expression2),
				BinRel(expression1, NotEqual(), expression3)),
			Or(
				BinRel(expression1, Equal(), expression3),
				BinRel(expression1, Equal(), expression2)))
		-> True()
		
	simplify:
		Forall(name, expr, True())
			-> True()
			
	/* here we should really do a literal substitute - name for expr2 */
	simplify:
		Forall(name, expr, Implies(BinRel(PathStart(name, None()), Equal(), expr2), constraint))
			-> constraint
					
			
	simplify:
		Not(And(a, b))
			-> Or(Not(a), Not(b))

	simplify:
		Not(Or(a, b))
			-> And(Not(a), Not(b))
			
	simplify:
		Not(Implies(a,b))
			-> And(a, Not(b))		
			
			
/*	simplify:
		And(Implies(a,c),Implies(b,c))
			->
				Implies(Or(a,b),c) */
				
/*	simplify:
		Implies(p, q)
			-> Or(Not(p), q)
*/



	simplify:
		BinRel(expr, NotEqual(), expr)
			-> False()

	simplify:
		BinRel(expr, Equal(), expr)
			-> True()
	
	simplify:
		BinRel(BinOp(a, Plus(), BasicValue(Integer(i))), LessThanEquals(), BasicValue(Integer(j)))
			-> BinRel(a, LessThanEquals(), BasicValue(Integer(k)))
		where
			k := <subt>(j,i)


	simplify:
		BinRel(BinOp(a, Plus(), BasicValue(Integer(i))), GreaterThanEquals(), BasicValue(Integer(j)))
			-> BinRel(a, GreaterThanEquals(), BasicValue(Integer(k)))
		where
			k := <subt>(j,i)


	simplify:
		BinRel(expression1, In(), BinOp(expression2, Union(), SetExtent([expression1])))
			-> True()
			

	simplify:
		BinRel(BinOp(expression1, Union(), expression2), SubsetEquals(), expression3)
			-> And(BinRel(expression1, SubsetEquals(), expression3), 
					BinRel(expression2, SubsetEquals(), expression3))

	

	simplify:
		BinRel(SetExtent([]), SubsetEquals(), expression2)
			-> True()		

	simplify:
		BinRel(SetExtent([exp, exps*]), SubsetEquals(), expression2)
			-> And(BinRel(exp, In(), expression2), BinRel(SetExtent([exps*]), SubsetEquals(), expression2))

			
	simplify:
		Not(BinRel(e1, Equal(), e2))
		 	-> BinRel(e1, NotEqual(), e2)		

	simplify:
		Not(BinRel(e1, NotEqual(), e2))
		 	-> BinRel(e1, Equal(), e2)		
		 	
	simplify:
		Not(BinRel(e1, In(), e2))
		 	-> BinRel(e1, NotIn(), e2)		

	simplify:
		Not(BinRel(e1, NotIn(), e2))
		 	-> BinRel(e1, In(), e2)	
		 	
	

	simplify:
		(BinOp(BasicValue(Integer(i)), Times(), BasicValue(Integer(j))))
			-> BasicValue(Integer( k ))
		where
			k := <mulS>(i, j)

			
	simplify:
		(BinOp(BasicValue(Integer(i)), Plus(), BasicValue(Integer(j))))
			-> BasicValue(Integer( k ))
		where
			k := <addS>(i, j)

	simplify:
		(BinOp(BasicValue(Integer(i)), Minus(), BasicValue(Integer(j))))
			-> BasicValue(Integer( k ))
		where
			k := <subtS>(i, j)

	simplify:
		(BinOp(BasicValue(Integer(i)), Divide(), BasicValue(Integer(j))))
			-> BasicValue(Integer( k ))
		where
			k := <divS>(i, j)

			
	simplify:
		UnOp(Cardinality(),BinOp(a,Union(), b))
			-> BinOp(UnOp(Cardinality(),a), Plus(), UnOp(Cardinality(),b))
	
	simplify:
		UnOp(Cardinality(),SetExtent([]))
			-> BasicValue(Integer(0))	


	// if n < 0 and 
	//     card(something) >= n
	// then True
	//
	// The cardinality of anything is always greater than 0
	simplify:
		BinRel(UnOp(Cardinality(),something), GreaterThanEquals(), BasicValue(Integer(v)))
			-> True()
		where
			<lt>(v,0)	

	simplify:
		BinRel(UnOp(Cardinality(),something), GreaterThan(), BasicValue(Integer(v)))
			-> True()
		where
			<lt>(v,0)	

	simplify:
		BinRel(UnOp(Cardinality(),something), LessThanEquals(), BasicValue(Integer(v)))
			-> False()
		where
			<lt>(v,0)	

	simplify:
		BinRel(UnOp(Cardinality(),something), LessThan(), BasicValue(Integer(v)))
			-> False()
		where
			<lt>(v,0)	




/*	simplify:
		Cardinality(SetExtent([a]))
			-> BasicValue(Integer(1))
*/			
	simplify:
		UnOp(Cardinality(),SetExtent([a, as*]))
			-> BasicValue(Integer(k))
		where
			BasicValue(Integer(i)) := <simplify> UnOp(Cardinality(),SetExtent([as*]));
			k := <add>(i,1)
			

			
	simplify:
		Guard(e1, Guard(e2, p))
			-> Guard(And(e1,e2),p)

	simplify:
		Guard(True(), p)
			-> p
			

