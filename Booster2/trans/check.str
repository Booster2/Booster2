module check

imports
  include/Booster2


rules


	constraint-error:
		Class(name, _, _) -> (name, $[Duplicate class name: [name]])
	where
		not(<filter(\ (cn, cdef) -> cn where <equal>(cn, name) \)> <LookupTable> "Class" => [_])
		

	constraint-error:
		SetDef(name, vs) -> (name, $[Duplicate set name: [name]])
	where
		not(<filter(\ (sn, sdef) -> sn where <equal>(sn, name) \)> <LookupTable> "SetDef" => [_])



		
/*		
	constraint-error:
		SetDef(name, [vs*]) -> [es*]
	where
		[es*] := <currymap(constraint-error-setvalue)> (name, [vs*])

	constraint-error:
		Class(name, extends, [cs*]) -> [es*]
	where
		[es*] := <currymap(constraint-error-components)> (name, [cs*])

	constraint-error-components:
		(name, Attributes([as*])) -> [es*]
	where
		[es*] := <currymap(constraint-error-attribute)> (name, [as*])

	constraint-error-components:
		(name, Methods([ms*])) -> [es*]
	where
		[es*] := <currymap(constraint-error-method)> (name, [ms*])

	constraint-error-components:
		(name, Invariant([is*])) -> []
*/
    /* *****************************************************************
   ********** Workflow Stuff - BEGIN *******************************
   *****************************************************************  */	    
/*
  constraint-error-components:
		(name, Workflows([wfs*])) -> [nwfs*]
	where
		[nwfs*] := <currymap(constraint-error-workflow)> (name, [wfs*])
		
  constraint-error-workflow:
  	    (cname,SeqWf(name,definition)) -> (name, $[Duplicate (sequential) workflow: [name]])
  	where
  		not(<bagof-SeqWfs> (cname,name) => [_])
  	
  constraint-error-workflow:
  		(cname,SeqWf(name,definition)) -> (name,error)
  where error := <collect-all(check(!cname,!name))> definition;
         not(<equal>([],error))

  check(cname,name): WorkflowReference(ref) -> $[Sequential workflow name [ref] not defined.]
  where not(<SeqWfs> (<cname>,ref))
*/
  //check(cname,name): MethodReference(path,args) -> $[Method name not defined]
  //where
  //	<equal>(<name>,"hallo")
/*  
  constraint-error-workflow:
		(cname, ParWf(name, definition)) -> (name, $[Duplicate (parallel) workflow: [name]])
	where
		not(<bagof-ParWfs>(cname,name) => [_])
	
  constraint-error-workflow:
  	    (cname,ParWf(pname,definition)) -> <constraint-error-parwf> (cname,definition)	
*/
  // I don't know why this is necessary.
/*  constraint-error-workflow: t -> []
    
                              
  constraint-error-parwf:
  	    (cname,Single(name)) -> (name, $[sequential workflow [name] not defined]) 
  	where                          
         not(<SeqWfs> (cname,name))
         
  constraint-error-parwf:
  	    (cname,Multiple(name,definition)) -> (name, $[sequential workflow [name] not defined]) 
  	where                          
         not(<SeqWfs> (cname,name))
         
  constraint-error-parwf:
  	    (cname,Multiple(name,definition)) -> <constraint-error-parwf> (cname,definition)
  	 
  // I don't know why this is necessary.	    
  constraint-error-parwf: t -> []
*/                                                    
/* *****************************************************************
   ********** Workflow Stuff - END *********************************
   *****************************************************************  */
/*
	constraint-error-attribute:
		(cname, Attribute(aname, decorations, type)) -> (aname, $[Duplicate attribute name "[aname]" in class [cname]])
	where
		not(<bagof-Attributes> (cname, aname) => [_])

	constraint-error-attribute:
		(cname, aname) -> []


	
	constraint-error-method:
		(cname, Method(mname, constraint)) -> (mname, $[Duplicate method name "[mname]" in class [cname]])
	where
		not(<bagof-Methods> (cname, mname) => [_])

	constraint-error-method:
		(cname, mname) -> []


*/		
/*  

  
  constraint-error:	
  	MultMinAndMax(min, max) -> (MultMinAndMax(min,max), $[invalid mutiplicity [min]..[max].  Did you mean [max]..[min]?])
  		where
  			(max, min) := <ltS>(max,min)
  			
  			
    
  // Reports an error if a property type is undefined.
  // This error is reported on the type name 'type'.
  constraint-error:
    UniDirectional(type) -> (type, $[Type [type] is not defined])
    where
      not(<GetClass> type);
      not(<GetSetDef> type)
  

  constraint-error:
    Class(x, _) -> (x, $[Duplicate class name: [x]])
    where
      not(<bagof-GetClass> x => [_])

  constraint-error:
    Class(x, _) -> (x, $[Class and set have duplicate names: [x]])
    where
      not(<bagof-GetSetDef> x => [_])

	constraint-error:
		SetDef(name, [vs*]) -> (name, $[Class and set have duplicate names: [name]])
	where
		not(<bagof-SetDefs> name => [_])
  
  constraint-error:
    SetDef(name, [_,v,vs*]) -> (v, $[Duplicate set element name])
    where
      not(<bagof-GetSetValue> v => [_]) 
  		
  constraint-error:
    SetDef(name, [vs*]) -> <constraint-error-setValue> [vs*] 


  constraint-error-setValue:
	 [] -> []
	 
  constraint-error-setValue:
	 [v,vs*] -> [(v, $[Duplicate set element [v]]),es*]
    where
      not(<bagof-GetSetValue> v => [_]);
      [es*] := <constraint-error-setValue> [vs*] 
  
  constraint-error-setValue:
	 [v,vs*] -> [es*]
    where
      [es*] := <constraint-error-setValue> [vs*] 
*/
  
  
   constraint-note:
    Class("Test", extends, _) -> ("Test", $[This is just an example program in the "entities" language
                                      (this note is defined in trans/check.str) ])
                                      
   constraint-warning:
  	Class(name, extends, []) -> (name, $[Empty class [name]])
 	
                                         
  constraint-error:
  	x -> (x, $[True is equal to False])
  		where
  		<equal>(True(), False()) 

