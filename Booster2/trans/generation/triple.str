module trans/generation/triple

imports
	
	lib/eq
	api/attribute
	api/method
	api/class
	api/type
	api/path
	api/guarded-command
	api/constraint
	api/_runtime
	
	generation/simplify
	
	lib/nabl-ext
	
rules
	
	generate-mapping: x@System(name, cs) -> StatementList([
			Prefixes(name, name),
			StatementList(<collect-all(class-mapping)> x)
		])

	class-mapping: y@Class(name, exts, comps) -> 				
			StatementList([
				CreateMapping(mappingname, dbdottable, subject, amappings),
				rmappings
			])	
	where
			not(?Class("User",_,_));
			not(?Class("AuditModOp",_,_));
			sysname := <_nabl-uri ; _nabl-uri-parent ; _nabl-uri-name> name;
			idcol := <concat-strings> [name, "Id"];
			mappingname := name;
			dbdottable := DBdotView(sysname,name,"all");
			subject := Subject(sysname,idcol,sysname,name);
			amappings := AttrMapList(
						<filter(attr-mapping)><class-get-attributes> y
						);
			rmappings := StatementList(
						<filter(fk-mapping)><class-get-attributes> y
						)
			
//basic attributes
	attr-mapping: z@Attribute(name, decs, type)-> 
			AttrMap(dbcname,name)
	where
			(<attr-is-basic> name);
			sysname := <_nabl-uri ; _nabl-uri-parent ; _nabl-uri-parent ; _nabl-uri-name> name;
			dbcname := DBColName(sysname,name)

//bi- directional Assoc attributes (incl set valued)
	attr-mapping: z@Attribute(name, decs, type)-> 
			AttrMapRel(dbcname,mapname,mapname,idcolumn)
	where
			(<attr-is-bidir> name);
			//(<attr-is-unidir> name);
			sysname := <_nabl-uri ; _nabl-uri-parent ; _nabl-uri-parent ; _nabl-uri-name> name;
			clas:= <_nabl-uri ; _nabl-uri-parent ; _nabl-uri-name> name;
			mapname :=  <concat-strings> [clas,"_",name];
			dbcname := DBColName(sysname,mapname);
			idcolumn := <concat-strings> [clas,"Id"]
			
	fk-mapping: z@Attribute(name, decs, type)-> 
			Simple(mapname,dbdottable,subject)
	where
			(<attr-is-bidir> name);
			inverse := <attr-get-inverse> name;
			inverseclass := <_nabl-uri ; _nabl-uri-parent ; _nabl-uri-name> inverse;
			clas := <_nabl-uri ; _nabl-uri-parent ; _nabl-uri-name> name;
			mapname :=  <concat-strings> [clas,"_",name];
			sysname := <_nabl-uri ; _nabl-uri-parent ; _nabl-uri-parent ; _nabl-uri-name> name;		
			dbdottable := DBdotView(sysname,clas,name);
			subject := SubjectSimple(sysname,inverseclass,inverse,sysname,inverseclass)
			