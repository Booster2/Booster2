module wp

imports
  include/Booster2
  
  elaborate
  library/strategy
  
  library/lookupTable
  
  library/constraint
  // Get rid of these if we can...

  library/basicTypes
  library/environment
  library/expression
  library/valueExpression
  
  // these are here for pretty-printing debug output.
  // remove for production version!
  translate/booster/booster
  translate/helpers
  simplify
 

rules

/* get-modified-paths:
	Takes a program and returns all the paths that may be modified by it
*/
	get-modified-paths = collect(\ Assign(path, expression) -> path \)
	
/* get-modified-attributes:
	Takes a program and returns all the attributes that may be modified by it
*/
	get-modified-attributes = collect(\ Assign(path, expression) -> <get-path-attribute> path \)

/* conjoin-constraints:
	Takes a list of constraints and returns their conjunction.
	foldr1 isn't documented - it's like a foldr1 from Haskell
	First argument is a function to deal with the singleton list
	Second argument joins two elements
	foldr1 fails on the empty list - provide an exception case.
*/
	conjoin-constraints = foldr1((\ [x] -> x\),(\ (x,y) -> And(x,y) \)) <+ !True()	 	


	get-mentioned-paths = collect( 	?Path(p, pc) <+ 
									?This() <+ 
									?ThisPrimed() <+
									?Input(i) <+
									?Output(o) <+
									?PathStart(p, pc) {Set(Reference(c))})


wp:
	system -> system
where
	<map(\ ((cname, mname), (constraint, gc, exts, done, inputs, outputs)) -> <wp-each> (cname, mname, constraint, gc) \) >(<LookupTable> "Method")
						
		

/* 	compile-each:
		Generates a program for each constraint, calculates the invariants and performs the WP. 
*/
			
	wp-each:
			(classname, methname, constraint, program)
				-> (classname, methname, constraint, Guard(constraint7, program2)) 
				
			with
				log(|Error(), "wp constraint", <constraint> constraint);
				log(|Error(), "program", program);
				paths := <get-modified-paths> program;
				log(|Error(), "modified paths", <foldout(expression)> (paths, ","));
				typeConstraint :=  <make-post-state><conjoin-constraints><map(get-type-constraint)> paths;
				log(|Error(), "type constraint", <constraint> typeConstraint);
				multiplicityConstraint :=  <make-post-state><conjoin-constraints><filter(get-multiplicity-constraint)> paths;
				log(|Error(), "multiplicity constraint", <constraint> multiplicityConstraint);
				// For each path modified by the program:
				//   For each invariant which mentions it 
				//   	take the object of the path, and replace it for 'this'
				//attpaths := <zip>(paths, <get-modified-attributes> program);
				attpaths := <zip>(paths, <map(get-path-attribute)> paths);
				log(|Error(), "attpaths", attpaths);
				classInvariants := <get-class-invariants> classname;
				newClassInvariant := <make-post-state><conjoin-constraints><concat><filter(\(Path(p, pc), a) -> 
															<nub><filter(\i -> <literal-substitute> (i, [(<lookup>(a, <get-mentioned-attributes> (classname, i, [])), Path(p, pc))]) 
																	 \)> classInvariants \)>
																			attpaths;
																		
				log(|Error(), "new invariant", /* <constraint> <innermost(simplify)> */ newClassInvariant);
				//classInvariant := <make-post-state><conjoin-constraints> <nub><filter(\i -> i where <not(equal)>([], <isect>((<get-modified-attributes> program), (<get-mentioned-attributes> (classname, i, []))))\)> <get-class-invariants> classname;
				//log(|Error(), "classInvariant", classInvariant);
				invariant := <conjoin-constraints>[ newClassInvariant, typeConstraint, multiplicityConstraint];
				(constraint6, program2) := <calculate-wp>(program, And(invariant, constraint ), classname, methname);
				//log(|Error(), "weakest precondition", <constraint> constraint6);
				//log(|Error(), "program 2", <guardedCommand> program2);
				
				constraint7 := <make-pre-state> constraint6; 
				//log(|Error(), "weakest precondition", <constraint> constraint6);
				<updateMethodProgram> (classname, methname, Guard(constraint7, program2))
			

	/* 	get-mentioned-attributes:
		takes an expression, in the context of a class, maybe a method name,
		and a model, and returns the list of attributes that it
		constrains.			
*/		

	get-mentioned-attributes:
		(cname, expr, env)
			-> <collect((\ term -> (cname, term, env)\) ; _get-mentioned-attributes)>

	
	_get-mentioned-attributes:
		(cname, PathStart(attname, maybeprimed), env)
			-> ((cname, attname), PathStart(attname, maybeprimed))
		where
			type := <lookup-attribute-type> ((cname, attname))
		// i.e. the attribute does exist
		

	_get-mentioned-attributes:
		(cname, Path(path{ Reference(otherclassname)}, PathComponent(attname, maybeprimed)), env)
			-> ((otherclassname, attname), Path(path{ Reference(otherclassname)}, PathComponent(attname, maybeprimed)))
		where
			type := <lookup-attribute-type> ((otherclassname, attname))

	_get-mentioned-attributes:
		(cname, Path(path { Optional(Reference(otherclassname)) }, PathComponent(attname, maybeprimed)), env)
			-> ((otherclassname, attname), Path(path { Optional(Reference(otherclassname)) }, PathComponent(attname, maybeprimed)))
		where
			type := <lookup-attribute-type> ((otherclassname, attname))

  

	calculate-wp:
		(Skip(), constraint, classname, methodname)
			-> ( constraint, Skip())

/*	calculate-wp:
		(Assign(path, expression), constraint1, classname, methname)
			-> (constraint2, Assign(path, expression))
		where 
			//log(|Error(), "wp constraint", <constraint> constraint1);
			path1 := <make-post-state> path;
			constraint2 := <literal-substitute> (constraint1, [(path1, expression)]);
			//log(|Error(), "wp aliasing substitute result", <constraint> constraint2);
			constraint3 := <is-defined> (classname, methname, expression, <new-environment>[]);
			constraint4 := <is-defined> (classname, methname, path, <new-environment>[])
*/		

	calculate-wp:
		(Assign(path, expression), constraint1, classname, methname)
			-> (And( constraint2, And(constraint3, constraint4)), Assign(path, expression))
		where 
			//log(|Error(), "wp constraint", <constraint> constraint1);
			path1 := <make-post-state> path;
			constraint2 := <aliasing-substitute> (classname, methname, constraint1, path1, expression, <new-environment>[]);
			//log(|Error(), "wp aliasing substitute result", <constraint> constraint2);
			constraint3 := <is-defined> (classname, methname, expression, <new-environment>[]);
			constraint4 := <is-defined> (classname, methname, path, <new-environment>[])
			

	calculate-wp:
		(New(Output(o){ Reference(c)}, PathStart(c, None()) { Set(Reference(c))}), constraint1, classname, methname)
			-> (And(constraint4, constraint2), New(Output(o){ Reference(c)}, PathStart(c, None()){ Set(Reference(c))}))
		where 
			//log(|Error(), "calculate-wp, New");
			constraint2 := <literal-substitute>(constraint1, [(PathStart(c, Some(Primed())) { Set(Reference(c))}, BinOp(PathStart(c, None()){ Set(Reference(c))},Union(), SetExtent([Output(o){ Reference(c)}]){ Set(Reference(c))}))]); 
			//constraint2 := <aliasing-substitute> (classname, methname, constraint1, PathStart(c, Some(Primed())) { Set(Reference(c))}, BinOp(PathStart(c, None()){ Set(Reference(c))},Union(), SetExtent([Output(o){ Reference(c)}]){ Set(Reference(c))}), <new-environment>[]);
			constraint4 := <is-defined> (classname, methname, PathStart(c, None()){ Set(Reference(c))}, <new-environment>[])
			//log(|Error(), "constraint2", <constraint> constraint2);
			//log(|Error(), "constraint4", <constraint> constraint4)



	// Thomas: Why is the guard "constraint1" never used subsequently?
	// James: Good question!
		
	calculate-wp:
		(Guard(constraint1, program1), constraint2, classname, methname)
			-> (And(constraint4, constraint3), Guard(<make-pre-state> constraint1, program2))
		where
			// log(|Error(),"wp prog w.r.t. prost condition:",(program1,"!!!",constraint2));
			(constraint3, program2) := <calculate-wp> (program1, constraint2, classname, methname);
			//log(|Error(),"c3,p2",(constraint3,"!!!",program2));
			constraint4 := <is-defined>(classname, methname, constraint3, <new-environment>[]) /*;
			log(|Error(),"c4",constraint4) */
			
			
			
	calculate-wp:
		(Sequence(program1, program2), constraint1, classname, methname)
			-> (constraint3, Sequence(program4, program3))
		where
			(constraint2, program3) := <calculate-wp> (program2, constraint1, classname, methname);
			//log(|Error(), "wp-sequence first part", (<constraint> constraint2, <guardedCommand> program3));
			(constraint3, program4) := <calculate-wp> (program1, <make-post-state> constraint2, classname, methname)
			//log(|Error(), "wp-sequence second part", (<constraint> constraint3, <guardedCommand> program4))

	calculate-wp:
		(Choice(program1, program2), constraint1, classname, methname)
			-> (Or(constraint2, constraint3), 
				Choice(Guard(<make-pre-state> constraint2, program3), 
					   Guard(<make-pre-state> constraint3, program4)))
				where
			(constraint2, program3) := <calculate-wp> (program1, constraint1, classname, methname);
			(constraint3, program4) := <calculate-wp> (program2, constraint1, classname, methname)
			
	calculate-wp:
		(Parallel(program1, program2), constraint1, classname, methname)
			-> (constraint3, Parallel(program3, program4))
		where
			<debug> ("parallel wp", <constraint> <innermost(simplify)>constraint1);
			(constraint2, program3) := <calculate-wp> (program2, constraint1, classname, methname);
			<debug> ("constraint2", <constraint> <innermost(simplify)>constraint2);
			(constraint3, program4) := <calculate-wp> (program1, constraint2, classname, methname);
			<debug> ("constraint3", <constraint> <innermost(simplify)>constraint3)
			

			
			


/* 	make-pre-state:
		takes a constraint, and returns its representation in the 
		pre-state of a method 			
*/

	make-pre-state:
		constraint ->
			<bottomup(try( (\ PathComponent(name, Some(Primed())) -> PathComponent(name, None()) \) <+
						   (\ PathStart(name, Some(Primed())) {t} -> PathStart(name, None()) {t} \) <+
						   (\ ThisPrimed() {t} -> This() {t} \)  
						   		))> constraint 	

/* 	make-post-state:
		takes a constraint, and returns its representation in the 
		post-state of a method 			
*/

	make-post-state:
		constraint ->
			<try(sometd( (\ Path(ps, PathComponent(name, maybeprimed)) {type} -> Path(ps, PathComponent(name, Some(Primed()))) {type}  \) <+
						   (\ Path(ps, PathComponent(name, maybeprimed)) -> Path(ps, PathComponent(name, Some(Primed()))) \) <+
						   (\ PathStart(name, maybeprimed) {type}  -> PathStart(name, Some(Primed())) {type}  \) <+
						   (\ This() {type}  -> ThisPrimed() {type}  \)  
						   		))> constraint 	

/*	is-pre-state
		takes a constraint, and returns if can be entirely evaluated in the pre-state.  Ie. there are no primes 
*/
	is-pre-state:
		constraint ->
			<equal>([], <collect(?PathComponent(name, Some(Primed())) <+ 
								?PathStart(name, Some(Primed())) <+
								?ThisPrimed() <+
								?Output(s))> constraint)
			 

			

	get-multiplicity-constraint:
		path 
			-> constraint
		where
			att := <get-path-attribute> path;
			Set(s) := <lookup-attribute-type> att;
			constraint := <get-mult-constraint>(path, att)


	get-mult-constraint:
		(path, att)
			-> BinRel(UnOp(Cardinality(),path), GreaterThanEquals(), BasicValue(Integer(min)))
		where
			"*" := <lookup-max-mult> att ;
			min := <lookup-min-mult> att

	get-mult-constraint:
		(path, att)
			-> And(BinRel(UnOp(Cardinality(),path), LessThanEquals(), BasicValue(Integer(max))), BinRel(UnOp(Cardinality(),path), GreaterThanEquals(), BasicValue(Integer(min))))
		where
			max := <lookup-max-mult> att;
			min := <lookup-min-mult> att

/* 	substitute:
		takes a constraint, and replaces all instances of the path with the given expression
*/			
	aliasing-substitute:
		 (classname, methodname, True(), path, expression, env)
		 	-> True()		

	aliasing-substitute:
		 (classname, methodname, False(), path, expression, env)
		 	-> False()
		 	
	aliasing-substitute:
		 (classname, methodname, Not(constraint), path, expression, env)
		 	-> Not(constraint2)
		 where
		 	constraint2 := <aliasing-substitute>	(classname, methodname, constraint, path, expression, env)
		 	
	aliasing-substitute:
		 (classname, methodname, And(constraint1, constraint2), path, expression, env)
		 	-> And(constraint3, constraint4)
		 where
		 	/*log(|Error(), <substitute>	(constraint1, path, expression), <substitute>	(constraint2, path, expression));*/
		 	constraint3 := <aliasing-substitute>	(classname, methodname, constraint1, path, expression, env);
		 	constraint4 := <aliasing-substitute>	(classname, methodname, constraint2, path, expression, env)
	
	aliasing-substitute:
		 (classname, methodname, Or(constraint1, constraint2), path, expression, env)
		 	-> Or(constraint3, constraint4)
		 where
		 	constraint3 := <aliasing-substitute>	(classname, methodname, constraint1, path, expression, env);
		 	constraint4 := <aliasing-substitute>	(classname, methodname, constraint2, path, expression, env)
	
	aliasing-substitute:
		 (classname, methodname, Implies(constraint1, constraint2), path, expression, env)
		 	-> Implies(constraint3, constraint4)
		 where
		 	constraint3 := <aliasing-substitute>	(classname, methodname, constraint1, path, expression, env);
		 	constraint4 := <aliasing-substitute>	(classname, methodname, constraint2, path, expression, env)
	
	aliasing-substitute:
		 (classname, methodname, Then(constraint1, constraint2), path, expression, env)
		 	-> Then(constraint3, constraint4)
		 where
		 	constraint3 := <aliasing-substitute>	(classname, methodname, constraint1, path, expression, env);
		 	constraint4 := <aliasing-substitute>	(classname, methodname, constraint2, path, expression, env)

	aliasing-substitute:
		 (classname, methodname, Exists(name, expr1 { Set(type1) }, constraint1), Path(ps { type1 }, pc), expression, env)
		 	-> And(
		 		Exists(name, expr1, 
		 			Implies(
			 				BinRel(
			 					PathStart(name, None()),
			 					Equal(),
			 					ps),
			 					constraint3)),
	 			Exists(name, expr1, 
	 				Implies(
	 					BinRel(
		 					PathStart(name, None()),
		 					NotEqual(),
		 					ps),
		 					constraint1)))
		 where
		 	//log(|Error(), "Aliasing Substitute", (Forall(name, expr1, constraint1), Path(ps, pc), expression));
			env' := <add-var-to-environment> (name, (classname, methodname, expr1), env);
		 	constraint2 := <literal-substitute>	(constraint1, [(PathStart(name, Some(Primed())), ps)]);
			//log(|Error(), "Constraint3", (constraint2, [Path(ps, pc)], expression));
			constraint3 := <aliasing-substitute>	(classname, methodname, constraint2, Path(ps, pc), expression, env')
		 	

	aliasing-substitute:
		 (classname, methodname, Exists(name, expr1, constraint1), path, expression, env)
		 	-> Exists(name, expr2, constraint2)
		 where
		 	expr2 := <literal-substitute>	(expr1, [(path, expression)]);
		 	env' := <add-var-to-environment> (name, (classname, methodname, expr1), env);
		 	constraint2 := <aliasing-substitute>	(classname, methodname, constraint1, path, expression, env')

	aliasing-substitute:
		 (classname, methodname, Forall(name, expr1 {Set(type1)}, constraint1), Path(ps { type1 }, pc), expression, env)
		 	-> And(
		 		Forall(name, expr1, 
		 			Implies(
			 				BinRel(
			 					PathStart(name, None()),
			 					Equal(),
			 					ps),
			 					constraint3)),
	 			Forall(name, expr1, 
	 				Implies(
	 					BinRel(
		 					PathStart(name, None()),
		 					NotEqual(),
		 					ps),
		 					constraint1)))
		 where
		 	//log(|Error(), "Aliasing Substitute: constraint", <constraint>(Forall(name, expr1 {Set(type1)}, constraint1)));
			//log(|Error(), "Aliasing Substitute: path", <expression>Path(ps { type1 }, pc));
			//log(|Error(), "Aliasing Substitute: expression", <expression> expression);
			//env' := <add-var-to-environment> (name, (classname, methodname, expr1), env);
		 	constraint2 := <literal-substitute>	(constraint1, [(PathStart(name, Some(Primed())), ps)]);
			//log(|Error(), "constraint2", constraint2);
			//log(|Error(), "Constraint3", (constraint2, [Path(ps, pc)], expression));
			constraint3 := <aliasing-substitute>	(classname, methodname, constraint2, Path(ps, pc), expression, env)
		 	

	aliasing-substitute:
		 (classname, methodname, Forall(name, expr1, constraint1), path, expression, env)
		 	-> Forall(name, expr2, constraint2)
		 where
		 	expr2 := <literal-substitute>	(expr1, [(path, expression)]);
			env' := <add-var-to-environment> (name, (classname, methodname, expr1), env);
		 	constraint2 := <aliasing-substitute>	(classname, methodname, constraint1, path, expression, env')
				
	aliasing-substitute:
		 (classname, methodname, BinRel(expression1, binrel, expression2), path, expression, env)
		 	-> constraint
		 where
		 	//log(|Error(), "Aliasing Subst - classname, methodname:", (classname, methodname));
		 	//log(|Error(), "Aliasing Subst - binrel", <constraint>(BinRel(expression1, binrel, expression2)));
		 	//log(|Error(), "Aliasing Subst - path", <expression>path);
		 	//log(|Error(), "Aliasing Subst - expression", <expression> expression);
		 	paths1 := <get-mentioned-paths> expression1;
		 	//log(|Error(), "Aliasing Subst - paths1", <foldout(expression)> (paths1, ","));
		 	paths2 := <get-mentioned-paths> expression2;
		 	//log(|Error(), "Aliasing Subst - paths2", <foldout(expression)> (paths2, ","));
		 	paths := <union>(paths1, paths2);
		 	//log(|Error(), "Aliasing Subst - paths", <foldout(expression)> (paths, ","));
		 	pathstart {type}:= <(\Path(ps, pc) -> ps\) <+ (\ PathStart(ps, maybeprimed) {type} -> PathStart(ps, maybeprimed) {type} \)> path;
		 	//log(|Error(), "Aliasing Subst - type", type);
		 	filtered-paths := <filter((\p -> (type, p) \) ; is-correct-type)> paths;
		 	//log(|Error(), "Aliasing Subst - filtered paths", <foldout(expression)> (filtered-paths, ","));
		 	subsets := <subsets> filtered-paths;
		 	//log(|Error(), "Aliasing Subst - subset",subsets);
		 	constraint := <conjoin-constraints><currymap(generate-aliasing-constraint)> ((classname, methodname, BinRel(expression1, binrel, expression2), path, expression, env, filtered-paths), subsets) // ; 
			//log(|Error(), "Aliasing Subst - constraint", <constraint> constraint)
	
/*	aliasing-substitute:
		something -> True()
			where log(|Error(), "aliasing substitute fail", something)
*/	
	generate-aliasing-constraint:
		((classname, methodname, BinRel(expression1, binrel, expression2), path, expression, env,all-paths), paths)
			-> Implies(And(ant1,ant2), con2)
		where
			pathstart {type}:= <(\Path(ps, pc) -> ps\) <+ (\ PathStart(ps, maybeprimed) {type} -> PathStart(ps, maybeprimed) {type} \)> path;
			//log(|Error(), "generate-aliasing-constraint 1", pathstart {type});
			ant1 := <conjoin-constraints><currymap(\ (p1, p2) -> BinRel(p1, Equal(), p2)\)>(pathstart {type}, paths);
			//log(|Error(), "generate-aliasing-constraint 2", ant1);
			paths2 := <diff>(all-paths, paths); 
			//log(|Error(), "generate-aliasing-constraint 3", paths2);
			ant2 := <conjoin-constraints><currymap(\ (p1, p2) -> BinRel(p1, NotEqual(), p2)\)>(pathstart {type}, paths2);
			//log(|Error(), "generate-aliasing-constraint 4", ant2);
			
			//log(|Error(), "Something", (paths, ps));
			substs := <map(\p -> (p, pathstart {type})\)> paths;
			//log(|Error(), "generate-aliasing-constraint 5", substs);
			
			con := <literal-substitute> (BinRel(expression1, binrel, expression2), substs);
			//log(|Error(), "generate-aliasing-constraint 6", con);
			
			/* log(|Error(), "con", <constraint> con); */
			con2 := <literal-substitute> (con, [(path, expression)]) 
			/* log(|Error(), "generate-aliasing-constraint 7", con2) ;
			
			log(|Error(), "con2", con2)  */


	is-correct-type:
		(type, PathStart(pstart, maybeprimed){type})
			-> PathStart(pstart, maybeprimed)

	is-correct-type:
		(type, Path(pstart {type}, pc))
			-> pstart

	is-correct-type:
		(type, Path(pstart {Optional(type)}, pc))
			-> pstart

	is-correct-type:
		(Optional(type), Path(pstart {type}, pc))
			-> pstart 

	