module wp

imports
  include/Booster2
  
  library/lookupTable
  
  library/constraint
  // Get rid of these if we can...

  library/abstractBoosterModel
  library/environment
  library/expression
  library/valueExpression

rules

/* get-modified-paths:
	Takes a program and returns all the paths that may be modified by it
*/
	get-modified-paths = collect(\ Assign(path, expression) -> path \)
	
/* get-modified-attributes:
	Takes a program and returns all the attributes that may be modified by it
*/
	get-modified-attributes = collect(\ Assign(path, expression) -> <get-path-attribute> path \)

/* conjoin-constraints:
	Takes a list of constraints and returns their conjunction.
	foldr1 isn't documented - it's like a foldr1 from Haskell
	First argument is a function to deal with the singleton list
	Second argument joins two elements
	foldr1 fails on the empty list - provide an exception case.
*/
	conjoin-constraints = foldr1((\ [x] -> x\),(\ (x,y) -> And(x,y) \)) <+ !True()	 	


	get-mentioned-paths = collect( 	?Path(p, pc) <+ 
									?This() <+ 
									?ThisPrimed() <+
									?Input(i) <+
									?Output(o))


wp:
	system -> system
where
	<map(\ ((cname, mname), (constraint, gc, exts, done, inputs, outputs)) -> <wp-each> (cname, mname, gc) \) >(<LookupTable> "Method")
						
		

/* 	compile-each:
		Generates a program for each constraint, calculates the invariants and performs the WP. 
*/
			
	wp-each:
			(classname, methname, program)
				-> (classname, methname, program) 
				
			with
				paths := <get-modified-paths> program;
				/*log(|Error(), "modified paths", <foldout(expression)> (paths, ","));*/
				constraint2a :=  <conjoin-constraints><map(get-type-constraint)> paths;
				/*log(|Error(), "constraint 2a", <constraint> constraint2a);*/
				constraint2b :=  <conjoin-constraints><filter(get-multiplicity-constraint)> paths;
				/* log(|Error(), "constraint 2b", <constraint> constraint2b); */
				constraint3 := <make-post-state> And(constraint2a, constraint2b) ;
				/* log(|Error(), "constraint 3", <constraint> constraint3); */
				
				mod-atts := <get-modified-attributes> program;
				invs := <conjoin-constraints><map(lookup-invariant)> mod-atts;
				/* log(|Error(), "invs", <constraint> invs); */
				constraint4 := <make-post-state> invs ;
				/* log(|Error(), "constraint 4", <constraint> constraint4); */
				
				constraint5 := And(constraint4, constraint3);
				/* log(|Error(), "constraint 5", <constraint> constraint5); */
				
				(constraint6, program2) := <calculate-wp>(program, constraint5, classname, methname);
				/* log(|Error(), "constraint 6", <constraint> constraint6); */
				/* log(|Error(), "program 2", <guardedCommand> program2); */
				
				constraint7 := <make-pre-state> constraint6; 
				<updateMethodProgram> (classname, methname, Guard(constraint7, program2))
			
/*
*/
	calculate-wp:
		(Skip(), constraint, classname, methodname)
			-> (constraint, Skip())

	calculate-wp:
		(Assign(path, expression), constraint1, classname, methname)
			-> (And( constraint2, And(constraint3, constraint4)), Assign(path, expression))
		where 
			path1 := <make-post-state> path;
			constraint2 := <aliasing-substitute> (classname, methname, constraint1, path1, expression, <new-environment>[]);
			constraint3 := <is-defined> (classname, methname, expression, <new-environment>[]);
			constraint4 := <is-defined> (classname, methname, path, <new-environment>[])
			

	calculate-wp:
		(New(o, cl), constraint1, classname, methname)
			-> (And(constraint4, And(constraint3, constraint2)), New(o, cl))
		where 
			
			constraint2 := <aliasing-substitute> (classname, methname, constraint1, PathStart(cl, None()), BinOp(PathStart(cl, None()),Union(), Output(o)), <new-environment>[]);
			constraint3 := <is-defined> (classname, methname, BinOp(PathStart(cl, None()),Union(),Output(o)), <new-environment>[]);
			constraint4 := <is-defined> (classname, methname, PathStart(cl, None()), <new-environment>[])


	// Thomas: Why is the guard "constraint1" never used subsequently?
	// James: Good question!
		
	calculate-wp:
		(Guard(constraint1, program1), constraint2, classname, methname)
			-> (And(constraint4, constraint3), Guard(constraint1, program2))
		where
			log(|Error(),"wp prog w.r.t. prost condition:",(program1,"!!!",constraint2));
			(constraint3, program2) := <calculate-wp> (program1, constraint2, classname, methname);
			log(|Error(),"c3,p2",(constraint3,"!!!",program2));
			constraint4 := <is-defined>(classname, methname, constraint3, <new-environment>[]);
			log(|Error(),"c4",constraint4)
			
			
			
	calculate-wp:
		(Sequence(program1, program2), constraint1, classname, methname)
			-> (constraint3, Sequence(program4, program3))
		where
			(constraint2, program3) := <calculate-wp> (program2, constraint1, classname, methname);
			(constraint3, program4) := <calculate-wp> (program1, constraint2, classname, methname)

	calculate-wp:
		(Choice(program1, program2), constraint1, classname, methname)
			-> (Or(constraint2, constraint3), 
				Choice(Guard(constraint2, program3), 
					   Guard(constraint3, program4)))
				where
			(constraint2, program3) := <calculate-wp> (program1, constraint1, classname, methname);
			(constraint3, program4) := <calculate-wp> (program2, constraint1, classname, methname)

	calculate-wp:
		(Parallel(program1, program2), constraint1, classname, methname)
			-> (constraint3, Parallel(program3, program4))
		where
			(constraint2, program3) := <calculate-wp> (program2, constraint1, classname, methname);
			//<debug> ("constraint2", constraint2);
			(constraint3, program4) := <calculate-wp> (program1, constraint2, classname, methname)
			//<debug> ("constraint3", constraint3)
			

			
			


/* 	make-pre-state:
		takes a constraint, and returns its representation in the 
		pre-state of a method 			
*/

	make-pre-state:
		constraint ->
			<bottomup(try( (\ PathComponent(name, Some(Primed())) -> PathComponent(name, None()) \) <+
						   (\ PathStart(name, Some(Primed())) -> PathStart(name, None()) \) <+
						   (\ ThisPrimed() -> This() \)  
						   		))> constraint 	

/* 	make-post-state:
		takes a constraint, and returns its representation in the 
		post-state of a method 			
*/

	make-post-state:
		constraint ->
			<bottomup(try( (\ PathComponent(name, None()) {type} -> PathComponent(name, Some(Primed())) {type}  \) <+
						   (\ PathStart(name, None()) {type}  -> PathStart(name, Some(Primed())) {type}  \) <+
						   (\ This() {type}  -> ThisPrimed() {type}  \)  
						   		))> constraint 	

/*	is-pre-state
		takes a constraint, and returns if can be entirely evaluated in the pre-state.  Ie. there are no primes 
*/
	is-pre-state:
		constraint ->
			<equal>([], <collect(?PathComponent(name, Some(Primed())) <+ 
								?PathStart(name, Some(Primed())) <+
								?ThisPrimed() <+
								?Output(s))> constraint)
			 



/* 	get-mentioned-attributes:
		takes an expression, in the context of a class, maybe a method name,
		and a model, and returns the list of attributes that it
		constrains.			
*/		

	get-mentioned-attributes:
		(cname, mname,expr, env)
			-> <collect((\ term -> (cname, mname, term, env)\) ; _get-mentioned-attributes)>

	
	_get-mentioned-attributes:
		(cname, mname, PathStart(attname, maybeprimed), env)
			-> (cname, attname)
		where
			type := <lookup-attribute-type> ((cname, attname))
		// i.e. the attribute does exist
		

	_get-mentioned-attributes:
		(cname, mname, Path(path{ Reference(otherclassname)}, PathComponent(attname, maybeprimed)), env)
			-> (otherclassname, attname)
		where
			type := <lookup-attribute-type> ((otherclassname, attname))

	_get-mentioned-attributes:
		(cname, mname, Path(path { Optional(Reference(otherclassname)) }, PathComponent(attname, maybeprimed)), env)
			-> (otherclassname, attname)
		where
			type := <lookup-attribute-type> ((otherclassname, attname))
			

	get-multiplicity-constraint:
		path 
			-> constraint
		where
			att := <get-path-attribute> path;
			Set(s) := <lookup-attribute-type> att;
			constraint := <get-mult-constraint>(path, att)


	get-mult-constraint:
		(path, att)
			-> BinRel(UnOp(Cardinality(),path), GreaterThanEquals(), BasicValue(Integer(min)))
		where
			"*" := <lookup-max-mult> att ;
			min := <lookup-min-mult> att

	get-mult-constraint:
		(path, att)
			-> And(BinRel(UnOp(Cardinality(),path), LessThanEquals(), BasicValue(Integer(max))), BinRel(UnOp(Cardinality(),path), GreaterThanEquals(), BasicValue(Integer(min))))
		where
			max := <lookup-max-mult> att;
			min := <lookup-min-mult> att


	