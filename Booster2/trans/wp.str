module wp

imports
  include/Booster2
  
  elaborate
  library/strategy
  
  library/lookupTable
  
  library/constraint
  // Get rid of these if we can...

  library/basicTypes
  library/environment
  library/expression
  library/valueExpression
  
  // these are here for pretty-printing debug output.
  // remove for production version!
  translate/booster/booster
  translate/helpers
  simplify
 

rules

/* get-modified-paths:
	Takes a program and returns all the paths that may be modified by it
*/
	get-modified-paths = collect(\ Assign(path, expression) -> path \)
	
/* get-modified-attributes:
	Takes a program and returns all the attributes that may be modified by it
*/
	get-modified-attributes = collect(\ Assign(path, expression) -> <get-path-attribute> path \)

/* conjoin-constraints:
	Takes a list of constraints and returns their conjunction.
	foldr1 isn't documented - it's like a foldr1 from Haskell
	First argument is a function to deal with the singleton list
	Second argument joins two elements
	foldr1 fails on the empty list - provide an exception case.
*/
	conjoin-constraints = (\ [] -> True() \) <+ (\ [x] -> x \) <+ (\ [xs*] -> Conjuncts([xs*]) \) 
	
	get-mentioned-paths = collect( 	?Path(_,_) <+ 
									?This() <+ 
									?ThisPrimed() <+
									?Input(_) <+
									?Output(_) <+
									?PathStart(_, _) {Set(Reference(_))})


wp:
	system -> system
where
	<map(\ ((cname, mname), (constraint, gc, exts, done, inputs, outputs)) -> <wp-each> (cname, mname, constraint, gc) \) >(<LookupTable> "Method")
						
		

/* 	compile-each:
		Generates a program for each constraint, calculates the invariants and performs the WP. 
*/
			
	wp-each:
			(classname, methname, constraint, prog)
				-> (classname, methname, constraint, Guard(constraint7, program2)) 
				
			with
				program' := <normalise-choice>  prog;
				//log(|Error(), "wp constraint", constraint);
				//log(|Error(), "program", program);
				paths := <get-modified-paths> program';
				//log(|Error(), "modified paths", <foldout(expression)> (paths, ","));
				typeConstraint :=  <make-post-state><conjoin-constraints><map(get-type-constraint)> paths;
				//log(|Error(), "type constraint", <constraint> typeConstraint);
				multiplicityConstraint :=  <make-post-state><conjoin-constraints><filter(get-multiplicity-constraint)> paths;
				//log(|Error(), "multiplicity constraint", <constraint> multiplicityConstraint);
				// For each path modified by the program:
				//   For each invariant which mentions it 
				//   	take the object of the path, and replace it for 'this'
				//attpaths := <zip>(paths, <get-modified-attributes> program);
				attpaths := <zip>(paths, <map(get-path-attribute)> paths);
				//log(|Error(), "attpaths", attpaths);
				classInvariants := <get-class-invariants> classname;
/*				newClassInvariant := <make-post-state><conjoin-constraints><concat><filter(\(Path(p, pc), a) -> 
															<nub><filter(\i -> <literal-substitute> (i, [(<lookup>(a, <get-mentioned-attributes> (classname, i, [])), Path(p, pc))]) 
																	 \)> classInvariants \)>
																			attpaths;
*/
				newClassInvariant := <make-post-state><conjoin-constraints><concat><filter(\(Path(p, pc){t},(c', a)) -> 
															<nub><filter(\i -> <literal-substitute> (i, [(<lookup>((c',a), <get-mentioned-attributes> (classname, i, [])), Path(p, pc){t})]) 
																	 \)> <get-class-invariants> c' \)>
																			attpaths;														
				//log(|Error(), "new invariant", /* <constraint> <innermost(simplify)> */ newClassInvariant);
				//classInvariant := <make-post-state><conjoin-constraints> <nub><filter(\i -> i where <not(equal)>([], <isect>((<get-modified-attributes> program), (<get-mentioned-attributes> (classname, i, []))))\)> <get-class-invariants> classname;
				//log(|Error(), "classInvariant", classInvariant);
				invariant := <conjoin-constraints>[ newClassInvariant, typeConstraint, multiplicityConstraint];
				//log(|Error(), "wp constraint", Conjuncts([invariant, constraint]));
				(constraint6, program2) := <calculate-wp>(program', <innermost(simplify)> Conjuncts([invariant, constraint]), classname, methname);
				//log(|Error(), "weakest precondition", <constraint> constraint6);
				//log(|Error(), "program 2", <guardedCommand> program2);
				
				constraint7 := <make-pre-state> constraint6; 
				//log(|Error(), "weakest precondition", <constraint> constraint6);
				<updateMethodProgram> (classname, methname, Guard(<innermost(simplify)> constraint7, <innermost(simplify)> program2))
		
		
	normalise-choice = innermost(swap-choice)
	
	swap-choice:
		Parallels(ps)
			-> Choice(<normalise-choice>Parallels(qs1), <normalise-choice>Parallels(qs2))	
		where
			[Choice(q,r) | choices] := <filter(?Choice(_,_))> ps;
			ps' := <diff>(ps,[Choice(q,r)]);
			qs1 := <union>(ps', [q]);
			qs2 := <union>(ps', [r])
		
/*		Parallel(p, Choice(q,r))
			-> Choice(Parallel(p,q), Parallel(p,r))
*/
/*	swap-choice:
		Parallel(Choice(q,r), p)
			-> Choice(Parallel(q, p), Parallel(r, p))
*/			

	/* 	get-mentioned-attributes:
		takes an expression, in the context of a class, maybe a method name,
		and a model, and returns the list of attributes that it
		constrains.			
*/		

	get-mentioned-attributes:
		(cname, expr, env)
			-> <collect((\ term -> (cname, term, env)\) ; _get-mentioned-attributes)>

	
	_get-mentioned-attributes:
		(cname, PathStart(attname, maybeprimed), env)
			-> ((cname, attname), PathStart(attname, maybeprimed))
		where
			type := <lookup-attribute-type> ((cname, attname))
		// i.e. the attribute does exist
		

	_get-mentioned-attributes:
		(cname, Path(path{ Reference(otherclassname)}, PathComponent(attname, maybeprimed)), env)
			-> ((otherclassname, attname), Path(path{ Reference(otherclassname)}, PathComponent(attname, maybeprimed)))
		where
			type := <lookup-attribute-type> ((otherclassname, attname))

	_get-mentioned-attributes:
		(cname, Path(path { Optional(Reference(otherclassname)) }, PathComponent(attname, maybeprimed)), env)
			-> ((otherclassname, attname), Path(path { Optional(Reference(otherclassname)) }, PathComponent(attname, maybeprimed)))
		where
			type := <lookup-attribute-type> ((otherclassname, attname))

  

	calculate-wp:
		(Skip(), constraint, classname, methodname)
			-> ( constraint, Skip())

/*	calculate-wp:
		(Assign(path, expression), constraint1, classname, methname)
			-> (constraint2, Assign(path, expression))
		where 
			//log(|Error(), "wp constraint", <constraint> constraint1);
			path1 := <make-post-state> path;
			constraint2 := <literal-substitute> (constraint1, [(path1, expression)]);
			//log(|Error(), "wp aliasing substitute result", <constraint> constraint2);
			constraint3 := <is-defined> (classname, methname, expression, <new-environment>[]);
			constraint4 := <is-defined> (classname, methname, path, <new-environment>[])
*/		

	calculate-wp:
		(Assign(path, expression), constraint1, classname, methname)
			-> (Conjuncts([constraint2 /*,constraint3, constraint4 */ ]), Assign(path, expression))
		where 
			//log(|Error(), "wp assign", <guardedCommand> Assign(path, expression));
			//log(|Error(), "wp assign", <guardedCommand> Assign(path, expression));
			path1 := <make-post-state> path;
			constraint2 := <aliasing-substitute> (constraint1, path1, expression);
			//log(|Error(), "wp aliasing substitute result", <constraint> constraint2);
			constraint3 := <is-defined> (classname, methname, expression, <new-environment>[]);
			constraint4 := <is-defined> (classname, methname, path, <new-environment>[])
			

	calculate-wp:
		(New(Output(o){ Reference(c)}, PathStart(c, None()) { Set(Reference(c))}), constraint1, classname, methname)
			-> (Conjuncts([constraint4, constraint2]), New(Output(o){ Reference(c)}, PathStart(c, None()){ Set(Reference(c))}))
		where 
			//log(|Error(), "calculate-wp, New");
			constraint2 := <literal-substitute>(constraint1, [(PathStart(c, Some(Primed())) { Set(Reference(c))}, BinOp(PathStart(c, None()){ Set(Reference(c))},Union(), SetExtent([Output(o){ Reference(c)}]){ Set(Reference(c))}))]); 
			//constraint2 := <aliasing-substitute> (constraint1, PathStart(c, Some(Primed())) { Set(Reference(c))}, BinOp(PathStart(c, None()){ Set(Reference(c))},Union(), SetExtent([Output(o){ Reference(c)}]){ Set(Reference(c))}));
			constraint4 := <is-defined> (classname, methname, PathStart(c, None()){ Set(Reference(c))}, <new-environment>[])
			//log(|Error(), "constraint2", <constraint> constraint2);
			//log(|Error(), "constraint4", <constraint> constraint4)



	// Thomas: Why is the guard "constraint1" never used subsequently?
	// James: Good question!
		
	calculate-wp:
		(Guard(constraint1, program1), constraint2, classname, methname)
			-> (Conjuncts([constraint1, constraint4, constraint3]), Guard(<make-pre-state> constraint1, program2))
		where
			//log(|Error(), "wp guard", <guardedCommand> Guard(constraint1, program1));
			(constraint3, program2) := <calculate-wp> (program1, constraint2, classname, methname);
			//log(|Error(), "wp guard", <constraint> <innermost(simplify)>constraint3);
			//log(|Error(),"c3,p2",(constraint3,"!!!",program2));
			constraint4 := <is-defined>(classname, methname, constraint3, <new-environment>[]) 
			/*;
			log(|Error(),"c4",constraint4) */
			
			
			
	calculate-wp:
		(Sequence(program1, program2), constraint1, classname, methname)
			-> (constraint3, Sequence(program4, program3))
		where
			(constraint2, program3) := <calculate-wp> (program2, constraint1, classname, methname);
			//log(|Error(), "wp-sequence first part", (<constraint> constraint2, <guardedCommand> program3));
			(constraint3, program4) := <calculate-wp> (program1, <make-post-state> constraint2, classname, methname)
			//log(|Error(), "wp-sequence second part", (<constraint> constraint3, <guardedCommand> program4))

	calculate-wp:
		(Choice(program1, program2), constraint1, classname, methname)
			-> (Or(constraint2, constraint3), 
				Choice(Guard(<make-pre-state> constraint2, program3), 
					   Guard(<make-pre-state> constraint3, program4)))
				where
			(constraint2, program3) := <calculate-wp> (program1, constraint1, classname, methname);
			(constraint3, program4) := <calculate-wp> (program2, constraint1, classname, methname)

	calculate-wp:
		(Parallels([program1]), constraint1, classname, methname)
			-> <calculate-wp> (program1, constraint1, classname, methname)

			
	calculate-wp:
		(Parallels([program1, programs*]), constraint1, classname, methname)
			-> (constraint3, Parallels([program3, program4]))
		where
			//<debug> ("parallel wp", <constraint> <innermost(simplify)>constraint1);
			(constraint2, program3) := <calculate-wp> (Parallels([programs*]), constraint1, classname, methname);
			//<debug> ("constraint2", <constraint> <innermost(simplify)>constraint2);
			(constraint3, program4) := <calculate-wp> (program1, constraint2, classname, methname)
			//<debug> ("constraint3", <constraint> <innermost(simplify)>constraint3)
			

			
			


/* 	make-pre-state:
		takes a constraint, and returns its representation in the 
		pre-state of a method 			
*/

	make-pre-state:
		constraint ->
			 
			<bottomup(try( (\ PathComponent(name, Some(Primed())) -> PathComponent(name, None()) \) <+
						   (\ PathStart(name, Some(Primed())) {t} -> PathStart(name, None()) {t} \) <+
						   (\ ThisPrimed() {t} -> This() {t} \)  
						   		))> <remove-outputs>  constraint
						   		
	remove-outputs:
		constraint ->
			<topdown(try(\ BinRel(exp1, relop, exp2) -> True() where 
				<not(equal)>(<collect-all(?Path(Output(_), _))>, []);
				log(|Error(), "making false", <constraint> BinRel(exp1, relop, exp2)) \))> constraint
				
 	

/* 	make-post-state:
		takes a constraint, and returns its representation in the 
		post-state of a method 			
*/

	make-post-state:
		constraint ->
			<try(sometd( (\ Path(ps, PathComponent(name, maybeprimed)) {type} -> Path(ps, PathComponent(name, Some(Primed()))) {type}  \) <+
						   (\ Path(ps, PathComponent(name, maybeprimed)) -> Path(ps, PathComponent(name, Some(Primed()))) \) <+
						   (\ PathStart(name, maybeprimed) {type}  -> PathStart(name, Some(Primed())) {type}  \) <+
						   (\ This() {type}  -> ThisPrimed() {type}  \)  
						   		))> constraint 	

/*	is-pre-state
		takes a constraint, and returns if can be entirely evaluated in the pre-state.  Ie. there are no primes 
*/
	is-pre-state:
		constraint ->
			<equal>([], <collect(?PathComponent(name, Some(Primed())) <+ 
								?PathStart(name, Some(Primed())) <+
								?ThisPrimed() <+
								?Output(s))> constraint)
			 

			

	get-multiplicity-constraint:
		path 
			-> constraint
		where
			att := <get-path-attribute> path;
			Set(s) := <lookup-attribute-type> att;
			constraint := <get-mult-constraint>(path, att)


	get-mult-constraint:
		(path, att)
			-> True()
		where
			"*" := <lookup-max-mult> att ;
			0 := <lookup-min-mult> att

	get-mult-constraint:
		(path, att)
			-> BinRel(UnOp(Cardinality(),path), GreaterThanEquals(), BasicValue(Integer(min)))
		where
			"*" := <lookup-max-mult> att ;
			min := <lookup-min-mult> att

	get-mult-constraint:
		(path, att)
			-> Conjuncts([BinRel(UnOp(Cardinality(),path), LessThanEquals(), BasicValue(Integer(max))), 
						  BinRel(UnOp(Cardinality(),path), GreaterThanEquals(), BasicValue(Integer(min)))])
		where
			max := <lookup-max-mult> att;
			min := <lookup-min-mult> att



	aliasing-substitute:
		 (constraint, Path(ps{t}, PathComponent(attname, mp)){t'}, expression)
		 	-> constraint'
		 where
		 	mentionedPaths := <get-mentioned-paths> constraint;
		 	//log(|Error(), "Mentioned Paths", mentionedPaths);
		 	mentionedPaths' := <nub><filter(\ Path(ps'{t1}, PathComponent(attname, mp')){t2} -> ps'{t1} where <compatible>(t1,t)\)> mentionedPaths;
		 	//log(|Error(), "Filtered mentioned paths", mentionedPaths');
		 	mentionedPaths'' := <filter( not(?ps{t}))> mentionedPaths';
		 	< ?[] > mentionedPaths'';
		 	//log(|Error(), "Aliasing subst 1");
		 	constraint' := <innermost(simplify)><literal-substitute>(constraint, [(Path(ps{t}, PathComponent(attname, mp)){t'}, expression)])
		 	//log(|Error(), "1 Constraint in:", <constraint> constraint);
		 	//log(|Error(), "1 Path", <expression> Path(ps{t}, PathComponent(attname, mp)){t'});
		 	//log(|Error(), "1 Expression", <expression> expression);
		 	//log(|Error(), "1 Constraint out:", <constraint> constraint')
		 	//log(|Error(), "Aliasing subst 2")


	aliasing-substitute:
		(Conjuncts(ps), path, expression)
			-> Conjuncts(<innermost(simplify)>qs)
		where
			qs := <map(\ p -> <aliasing-substitute>(p, path, expression) \)> ps

	aliasing-substitute:
		(Then(p,q), path, expression)
			-> <innermost(simplify)>Then(p',q')
		where
			p' := <aliasing-substitute> (p, path, expression);
			q' := <aliasing-substitute> (q, path, expression)

	aliasing-substitute:
		(Or(p,q), path, expression)
			-> <innermost(simplify)>Or(p',q')
		where
			p' := <aliasing-substitute> (p, path, expression);
			q' := <aliasing-substitute> (q, path, expression)

	aliasing-substitute:
		 (constraint, Path(ps{t}, PathComponent(attname, mp)){t'}, expression)
		 	-> constraint'
		 where
		 	mentionedPaths := <get-mentioned-paths> constraint;
		 	mentionedPaths' := <nub><filter(\ Path(ps'{t1}, PathComponent(attname, mp')){t2} -> ps'{t1} where <compatible>(t1,t)\)> mentionedPaths;
		 	//log(|Error(), "Filtered mentioned paths", mentionedPaths');
			mentionedPaths'' := <filter( not(?ps{t}))> mentionedPaths';
		 	<not( ?[] )> mentionedPaths'';
			subsets := <filter(\ s -> (s, <diff>(mentionedPaths'', s))\)><subsets> mentionedPaths'';
			/*constraint' := <conjoin-constraints>
								<map(\ (pos,neg) -> Implies(And(<positive-match-constraint>(pos,ps{t}),
														<negative-match-constraint>(neg,ps{t})),
														<literal-substitute>(constraint, <union>(<map(\p -> (Path(p{t}, PathComponent(attname, mp)){t'}, expression)\)> pos, [(Path(ps{t}, PathComponent(attname, mp)){t'}, expression)])))\)> subsets;
		 	*/
		 	constraint' := <innermost(simplify)><conjoin-constraints>
								<map(\ (pos,neg) -> Implies(<positive-match-constraint>(pos,ps{t}),
														<literal-substitute>(constraint, <union>(<map(\p -> (Path(p{t}, PathComponent(attname, mp)){t'}, expression)\)> pos, [(Path(ps{t}, PathComponent(attname, mp)){t'}, expression)])))\)> subsets
		 	//log(|Error(), "2 Constraint in:", <constraint> constraint);
		 	//log(|Error(), "2 Path", <expression> Path(ps{t}, PathComponent(attname, mp)){t'});
		 	//log(|Error(), "2 Expression", <expression> expression);
		 	//log(|Error(), "2 Constraint out:", <constraint> constraint')
 
			

	positive-match-constraint:
		(paths, path) -> <conjoin-constraints><map(\ p -> BinRel(p, Equal(), path )\)> paths

	negative-match-constraint:
		(paths, path) -> <conjoin-constraints><map(\ p -> BinRel(p, NotEqual(), path )\)> paths


	compatible:		 	
		(Reference(t), Reference(t)) -> (Reference(t), Reference(t))

	compatible:		 	
		(Reference(t), Optional(Reference(t))) -> (Reference(t), Optional(Reference(t)))

	compatible:		 	
		(Optional(Reference(t)), Reference(t)) -> (Optional(Reference(t)), Reference(t))

	compatible:		 	
		(Optional(Reference(t)), Optional(Reference(t))) -> (Optional(Reference(t)), Optional(Reference(t)))



	is-correct-type:
		(type, PathStart(pstart, maybeprimed){type})
			-> PathStart(pstart, maybeprimed)

	is-correct-type:
		(type, Path(pstart {type}, pc))
			-> pstart

	is-correct-type:
		(type, Path(pstart {Optional(type)}, pc))
			-> pstart

	is-correct-type:
		(Optional(type), Path(pstart {type}, pc))
			-> pstart 
		