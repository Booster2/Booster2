module workflow

imports
  include/Booster2
  
rules
	// check whether a guard is a normal one and equal false
	guard_false: Normal (False()) -> Normal (False())
	
	// get the constraint from a normal guard
	get: Normal (constr) -> constr
	
	// check whether a sequential workflow is skip, i.e., has terminated	
	skip_d: Skip() -> Skip()
	
	// check whether a sequential workflow is a simple prefix
	prefix_d: Prefix(ga,p) -> Prefix(ga,p) 
	
	// check whether a sequential workflow is a wait node
	wait_d: Wait(i,j,w) -> Wait(i,j,w)
	
	// check whether a sequential workflow is a choice node
	choice_d: Choice(ga1,wf1,ga2,wf2) -> Choice(ga1,wf1,ga2,wf2)
	
	
	// selectors for prefix node
	sel_ga1: Prefix( GA(wg1,wa1) , wf1) -> GA(wg1,wa1)
	sel_g1:  Prefix( GA(wg1,wa1) , wf1) -> wg1
	sel_a1:  Prefix( GA(wg1,wa1) , wf1) -> wa1
	sel_w1:  Prefix( GA(wg1,wa1) , wf1) -> wf1
	
	// selectors for a wait node
	sel_from: Wait(i,j,w) -> i
	sel_to: Wait(i,j,w) -> j
	sel_w1: Wait(i,j,w) -> w
	
	// selectors for choice node
	sel_ga1: Choice( GA(wg1,wa1) , wf1 , 
	                  GA(wg2,wa2) , wf2) -> GA(wg1,wa1)
	sel_g1: Choice( GA(wg1,wa1) , wf1 , 
	                 GA(wg2,wa2) , wf2) -> wg1
	sel_a1: Choice( GA(wg1,wa1) , wf1 , 
	                 GA(wg2,wa2) , wf2) -> wa1
	sel_w1: Choice( GA(wg1,wa1) , wf1 , 
	                 GA(wg2,wa2) , wf2) -> wf1
    sel_ga2: Choice( GA(wg1,wa1) , wf1 , 
	                  GA(wg2,wa2) , wf2) -> GA(wg2,wa2)
	sel_g2: Choice( GA(wg1,wa1) , wf1 , 
	                 GA(wg2,wa2) , wf2) -> wg2
	sel_a2: Choice( GA(wg1,wa1) , wf1 , 
	                 GA(wg2,wa2) , wf2) -> wa2
	sel_w2: Choice( GA(wg1,wa1) , wf1 , 
	                 GA(wg2,wa2) , wf2) -> wf2