module precond

imports
  include/Booster2
  trans/calculateWFPrecond/misc
  trans/calculateWFPrecond/workflow
  simplify
  
  // TODO: Currently, we don't support prioritisation of guarded actions
  
rules
	
	// The following three methods are used to work with the Map of calculated preconditions
	resetMap : () -> ()
	where
		rules(
			wf_lut :+ "map" -> []
		)
		
	updateMap: nv -> nv
	where
		oldMap := <wf_lut> "map";
		rules(wf_lut :+ "map" -> <conc> ([nv] , oldMap))
		
	lookupMap: par -> form
	where
		form := <lookup> (par, <wf_lut> "map")
	// They should be generalised at some point!
		
	
	
	// calculate the precondition of the concurrent workflow pdef
	// with name pname being defined in class cname
	precond: (cname,(pname,pdef)) -> form
	where
		<resetMap> ();
		if not(<equal>(<wf_lut> "map",[])) then log(|Error(),"wf_lut is not empty") end;
		pdef' := <reduceWaits> pdef;
		<pre> (cname,pname,pdef');
		form := <innermost(simplify)> (<lookupMap> pdef')
		
	
	/* **************************************
	   main precondition function
	   ************************************** */
	
	// it is assumed that calls of <pre> only occur
	// with "waitReduced" workflows 
	
	// if the concurrent workflow "[wfs*]" is already defined in 
	// the lookup-table we finish
	pre: (cname,pname,[wfs*]) -> (cname,[wfs*])
	where <lookupMap> [wfs*] //; log(|Error(),"case1" ,[wfs*])
	
	// if all sequential workflows in the list have terminated, i.e., are
	// equal to SKIP each, we finished
    pre: (cname,pname,[wfs*]) -> (cname,[wfs*])
    where <list_all(skip_d)> [wfs*];//; log(|Error(),"case2" ,[wfs*])
          <updateMap> ([wfs*],True())
	
	// the normal case
	pre: (cname,pname,[wfs*]) -> (cname,[wfs*])
	where formset := <preIter> ((cname,pname,[wfs*],False()),0, <subti>(<length> wfs* , 1));
		   form1 := <AndFold> formset;
		   form := form1;
		   <updateMap> ([wfs*],form)
	
	
	/* **************************************
	   the iteration function -- actual program 
	   logic implemented here
	   ************************************** */
	   	
	// if i is greater then the list length, we are done
	preIter: ((cname,pname,[wfs*],False()),i,t) -> [False()]
	where <gt> (i,t);
	       log(|Error(), (cname,pname) ,"Concurrent workflow deadlocks!")
	
	preIter: ((cname,pname,[wfs*],True()),i,t) -> []
	where <gt> (i,t)
	
	// Skip at position i
	preIter: ((cname,pname,[wfs*],changed),i,t) -> formset
	where wi := <getPos> ([wfs*],i) ;
	       <skip_d> wi;
	       formset := <preIter>((cname,pname,[wfs*],changed),<addi>(i,1),t)
	       
	// wait at position i can be ignored, because it cannot be further reduced
	// as ensured by the previous calls to "reduceWaits"
	preIter: ((cname,pname,[wfs*],changed),i,t) -> formset
	where wi := <getPos> ([wfs*],i);
		  <wait_d> wi;
		  formset := <preIter>((cname,pname,[wfs*],changed),<addi>(i,1),t)
	       
	// prefix at position i
	preIter: ((cname,pname,[wfs*],changed),i,t) -> formset
	where wi := <getPos> ([wfs*],i);
	       <prefix_d> wi;
	       gi1 := <sel_g1>(wi);
		   ai1 := <sel_a1>(wi);
		   wi1 := <sel_w1>(wi);
		   
		   par1 := <reduceWaits> (<listUpdate> ([wfs*], i, wi1));
		   <pre> (cname,pname,par1);
		   
		   loc_cond := And(<get> gi1,<wp> ((cname,ai1) , <lookupMap> par1));
		   formset_rest := <preIter> ((cname,pname,[wfs*],True()),<addi>(i,1),t);
		   formset := <conc> ([loc_cond], formset_rest)
		   
	// Choice case
	preIter: ((cname,pname,[wfs*]),i,t) -> formset
	where  wi := <getPos>([wfs*],i);
			<choice_d> wi;
	       gi1 := <sel_g1>(wi);
		   ai1 := <sel_a1>(wi);
		   wi1 := <sel_w1>(wi);
		   gi2 := <sel_g2>(wi);
		   ai2 := <sel_a2>(wi);
		   wi2 := <sel_w2>(wi);
		
		   par1 := <reduceWaits> (<listUpdate> ([wfs*], i, wi1)); 
		   par2 := <reduceWaits> (<listUpdate> ([wfs*], i, wi2)); 

           if not(<guard_false> gi1) then <pre> (cname,pname,par1) end;
           if not(<guard_false> gi2) then <pre> (cname,pname,par2) end;
           
           if <guard_false> gi1 ; <guard_false> gi2 then loc_cond := False() else 
           if <guard_false> gi1 then loc_cond := And ((<get> gi2) ,(<wp> ((cname,ai2) , <lookupMap> par2))) else 
           if <guard_false> gi2 then loc_cond := And ((<get> gi1) ,(<wp> ((cname,ai1) , <lookupMap> par1))) else
           	    loc_cond :=
           	    And (And(
           	      Implies(<get> gi1 , <wp> ((cname,ai1), <lookupMap> par1))
           	      ,	
           	      Implies(<get> gi2 , <wp> ((cname,ai2), <lookupMap> par2))
           	    )
           	    , Or( <get> gi1, <get> gi2)	 	
           	    )   
           end end end;
          
           formset_rest := <preIter> ((cname,pname,[wfs*],True()),<addi>(i,1),t);
           formset := <conc> ([loc_cond], formset_rest)
           
        
    // currently it's only fake   
	wp: ((cname,MethodReference(path,[substs*])),post) -> constraint
	where
		m := <getMethodName> path;
		constraint := ("wp(", m , post ,")")
     
	// get the method name from a path
	getMethodName: Path(path,PathComponent(name,[decorators*])) -> name
	getMethodName: PathStart(name,[decorators*]) -> name
     
           /*
           getGuard: Guard(expr,prog) -> expr
		   getGuard: t -> True()
           
		   wp : (m,post) -> cond
		   where
		   	    programs := <LookupTable> "Programs";
		   		classname := "C1"; // for testing
		   		methname := "add1"; // for testing
		   		program := <lookup> ((classname,methname),programs);
		   		log(|Error(),"program from lut" ,program);
		   		log(|Error(),"given postcondition", <innermost(simplify)> post);
		    	(cond1,program') := <calculate-wp> (program,post,classname,methname);
		    	log(|Error(),"precondition1", <innermost(simplify)> cond1);
		   		cond2 := <getGuard> program';
		   		cond := (And(cond1,cond2));
		   		log(|Error(),"calculated condition",cond) 
				//cond := ("wp(", m , post ,")")
			*/
			
			/*
			
			// do the wp-calculation
			wp : ((cname,MethodReference(path,[substs*])),post) -> constraint7
		   	where
		   	    constraints := <LookupTable> "Constraints";
		   		classname := cname;
		   		log(|Error(),"check",path);
		   		//log(|Error(),"mname",<getMethodName> path);
		   		methname := <getMethodName> path;
		   		
		   		constraint := <lookup> ((classname,methname),constraints); 
		   		program := <program> (classname, methname, constraint);
		   		[paths*] := <get-modified-paths>(program);
		   		constraint2a :=  <get-type-constraint> ([paths*], classname, methname, <new-environment>[]);
				constraint2b :=  <get-multiplicity-constraint> ([paths*], classname, methname, <new-environment>[]);
				constraint3 := <make-post-state> And(constraint2a, constraint2b) ;
				
				[atts*] := <get-modified-attributes>(program, classname, methname, <new-environment>[]);
				invs := <lookup-invariants>([atts*]);
				constraint4 := <make-post-state><conjoin-constraints>(invs);
				
				constraint5 := And(constraint4, constraint3);
				
				post-new := <make-post-state> post;
				post-constraint := And(constraint5,post-new);
				
				(constraint6, program2) := <calculate-wp>(program, post-constraint, classname, methname);
				constraint7 := <make-old> constraint6
		
		// never used!! Just declared to prevent undefinedness error
		cheat : t -> t
		with rules (LookupTable :+ "" -> ""
		             calculate-wp :+ "" -> ""
		             run-program :+ "" -> ""
		             program :+ "" -> ""
		             get-modified-paths :+ "" -> ""
		             get-type-constraint :+ "" -> ""
		             new-environment :+ "" -> ""
		             get-multiplicity-constraint :+ "" -> ""
		             make-post-state :+ "" -> ""
		             get-modified-attributes :+ "" -> ""
		             lookup-invariants :+ "" -> ""
		             conjoin-constraints :+ "" -> ""
		             make-old :+ "" -> "")
		 */
	