module main

imports
  include/Booster2  
  
  library/strategy
  trans/calculateWFPrecond/precond
  
/* 
   Calculate the preconditions of all workflows after method specification have successfully been
   translated to commands with <program>. 
   TODO: The main task is to produce the lookup table as given by the Haskell algorithm. 
*/ 

//log(|Error(), "expandwf first", wfr) 
  
rules
	// the main strategy from the precondition calculation
	precond-main: system -> system
	where
		ParWfs := <LookupTable> "ExpandedParWorkflows";
		<map(\(cname,classParWfs) ->  <precond-class> (cname,classParWfs) \)> ParWfs
		
	precond-class: (cname,namedef_list) -> (cname,namedef_list)
	where
		namedPreconds := <currymap(precond)> (cname,namedef_list);
		oldPreconds := <LookupTable> "ParWorkflows_Precond";
		newPreconds := <union>(oldPreconds,[(cname,namedPreconds)]);
		rules( LookupTable :+ "ParWorkflows_Precond" -> newPreconds)

	