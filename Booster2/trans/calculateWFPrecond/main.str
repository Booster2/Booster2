module main

imports
  include/Booster2  
  
  library/strategy
  trans/calculateWFPrecond/precond
  
/* 
   Calculate the preconditions of all workflows after method specification have successfully been
   translated to commands with <program>. 
   TODO: The main task is to produce the lookup table as given by the Haskell algorithm. 
*/ 

//log(|Error(), "expandwf first", wfr) 
  
rules
	// the main strategy from the precondition calculation
	precond-main: system -> system
	where
		ParWfs := <LookupTable> "ParWorkflows";
		<map(\((cname,pname),expr) ->  <precondClass> ((cname,pname),expr) \)> ParWfs
		
	precondClass: ((cname,pname),name_list) -> ((cname,pname),name_list)
	where
		expandedParWf := <map(\ wfn -> <lookup>((cname,wfn),<LookupTable> "SeqWorkflows") \)> name_list;
		form := <precond> (cname,(pname,expandedParWf));
		oldPreconds := <LookupTable> "PrecondParWorkflows";
		newPreconds := <union>(oldPreconds,[((cname,pname),form)]);
		rules( LookupTable :+ "PrecondParWorkflows" -> newPreconds)

	
	
	