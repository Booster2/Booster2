module translate/sql/sql

imports
  include/Booster2
  
  translate/helpers

rules 

// Main editor interface (defined by editor/Booster-Builders and -References.esv)
  
      

	pp-install:
	 	Schema(name, tables, procedures, StatementList(statements))
	 		-> $[drop database if exists [name];
				 create database [name];
	 		     use [[name]];
	 		     SET autocommit=0;
	 		[<map(pp-install-table)> tables]
	 		[<map(pp-install-procedure)> procedures]
			[<map(proc-stmt)> statements]
			[<standard-stuff> name]]
	 		
	 pp-install-table:
	 	Table(name, [column, columns*])
	 	
	 		-> $[drop table if exists [name];
	 			 create table [name] ([<pp-install-column> column]);
	 			[<map((\ c -> (name, c) \) ; pp-install-columns)> [columns*]]]
	 			


	 pp-install-columns:
	 	(name, coldef)
	 		-> $[ alter table [name]
	 				add column [<pp-install-column> coldef];
	 			]
	 
	pp-install-column:
		Column(columnName, default, nullable, type, extra, key, reference)
			->  $[[columnName] [<column-type> type] [<column-null> nullable] [<column-default> default] [<column-extra> extra] [<column-key> key] [<reference> (columnName, reference)]]
			
	reference:
		(columnname, None()) -> []

	reference:
		(columnname, Some(Reference(name, names)))
			-> $[, add foreign key ([columnname]) references [name] ( [<foldout(column-name)> (names, ", ")])] 
	 		
	 pp-install-procedure:
	 	Procedure(name, inputs, DeclareList(declares), StatementList(statements))
	 		-> $[ drop procedure if exists [name];
	 			  delimiter //
	 			  create procedure [name] ( [<foldout(proc-param)> (inputs, ",")])
	 				begin
	 				declare exit handler for sqlwarning, sqlexception, not found 
	 				begin
					rollback;
					end; 
					start transaction;
	 			    [<foldout(declare-statement)> (declares, "; ")]
	 			    [<map(proc-stmt)> statements]
	 			    commit;
	 			  	end //
	 			  delimiter ;]
	 			
	 column-type:
	 	Varchar(n)
	 		-> $[varchar([n])]

	 column-type:
	 	Bit()
	 		-> $[bit]

	 column-type:
	 	Int()
	 		-> $[int]
	 				
	 column-type:
	 	Datetime()
	 		-> $[datetime]


	 column-type:
	 	other
	 		-> $[something]
	 			
	 column-null:
	 	False() -> ""
	 	
	 column-null:
	 	True() -> "null"
	 	
	 column-default:
	 	"" -> ""
	 
	 column-default:
	 	"null" -> $[default null]

	 column-default:
	 	str -> $[default "[str]"]
	 	
	 column-extra:
	 	AutoIncrement() -> $[auto_increment]

	 column-extra:
	 	NoExtra() -> ""
	 	

	column-key:
			Primary() -> $[primary key]
			
	column-key:		
			Unique() -> $[unique]

	column-key:
		Multiple() -> $[multiple]
	
	column-key:
		NoKey() -> $[]	
		

	proc-param:
		Input("this", type)
			-> $[in this [<column-type> type]]

	proc-param:
		Input(name, type)
			-> $[in [name]_in [<column-type> type]]
		
	proc-params:
		Output(name, type)
			-> $[out [name]_out [<column-type> type]]
		
	proc-params:
		InOut(name, type)
			-> $[inout [name]_inout [<column-type> type]]
		

	proc-stmt:
		BeginEnd(DeclareList(declares), StatementList(stmts)) 
			-> $[begin
				 [<foldout(declare-statement)> (declares, "; ")]
				 [<map(proc-stmt)> stmts]
				 end;["\r\r"]]
	proc-stmt:
		IfThen(expr, StatementList(stmts), elseifs, None()) 
			-> $[if [<expression> expr]
				 then [<map(proc-stmt)> stmts]
				 [<foldout(elseif)> (elseifs, "\n")]
				 end if;["\r\r"]]

	proc-stmt:
		IfThen(expr, StatementList(stmts), elseifs, StatementList(stmts')) 
			-> $[if [<expression> expr]
				 then [<map(proc-stmt)> stmts]
				 [<foldout(elseif)> (elseifs, "\n")]
				 else [<map(proc-stmt)> stmts']
				 end if;["\r\r"]]

	proc-stmt:
		Update(uo,tr,us,wp,obp,lp) 
			-> $[update [<foldout(update-option)> (uo, " ")] [<table-reference> tr]
				set [<foldout(update)> (us, ",")]
				[<maybe-output(where-part)> wp]
				[<maybe-output(order-by-part)> obp]
				[<limit-part> lp];["\r\r"]]

	proc-stmt:
		Insert( ip , ig, into ,tn,cns, es, od) 
			-> $[insert [<maybe-output(insert-priority)> ip] [<maybe-output(ignore)> ig]
				[<maybe-output(into)> into]
				[tn]
				([<foldout(column-name)> (cns, ", ")])
				values
				([<foldout(expression)> (es, ", ")])
				[<maybe-output(on-duplicate)> od];["\r\r"]]

	proc-stmt:
		Select(sts,ses,fp, wp, gbp,hp,obp,lp,pp,ip,mp)
			-> $[[<expression> Select(sts,ses,fp, wp, gbp,hp,obp,lp,pp,ip,mp)];["\r\r"]]


	insert-priority:
		Some(LowPriority()) -> $[low_priority]
		
	insert-priority:
		Some(DelayedPriority()) -> $[delayed]
		
	insert-priority:
		Some(HighPriority()) -> $[high_priority]
				
	ignore:
		Some(Ignore()) -> $[ignore]
				
	into:
		Into() -> $[into]
		

	column-name:
		Output(o) -> $[[o]_out]
		
	column-name:
		cn -> $[[cn]]
		
			
	on-duplicate:
		OnDuplicate(ups)
			-> $[on duplicate key update [<foldout(update-part)> (ups, ", ")]]
			
	update-part:
		UpdatePart(cn, expr)
			-> $[[cn] = [<expression> expr]]


			
			
	elseif:
		ElseIf(expr, StatementList(stmts))	
			-> $[else if [<expression> expr]
				 then [<map(proc-stmt)> stmts]
				 ]
				 
	update-option:
		LowPriority()
			-> $[LOW_PRIORITY]
			
	update-option:
		Ignore()
			-> $[IGNORE]
			
	table-reference:
		 TableName(name)
		 	-> $[[name]]	
		 	
	update:
		(name, expr)
			-> $[[name] = [<expression> expr]]

			
	where-part:
		Where(exp)
			-> $[where [<expression> exp]]

			

	limit-part:
		None()
			-> $[]
			
			
	expression:
		Or(exp1, exp2)
			-> $[ [<expression> exp1] or [<expression> exp2]]

	expression:
		Xor(exp1, exp2)
			-> $[ [<expression> exp1] xor [<expression> exp2]]

	expression:
		And(exp1, exp2)
			-> $[ [<expression> exp1] and [<expression> exp2]]

	expression:
		Not(exp)
			-> $[ not [<expression> exp]]
			
	expression:
		Is(bp,Not(),tfu)
			-> $[[<expression> bp] is not [<expression> tfu]]

	expression:
		Is(bp,None(),tfu)
			-> $[[<expression> bp] is [<expression> tfu]]
			
	expression:
		IsNull(bp,Not())
			-> $[[<expression> bp] is not null]

	expression:
		IsNull(bp,None())
			-> $[[<expression> bp] is null]
		
	expression:
		Iff(exp1,exp2)
			-> $[[<expression> exp1] <=> [<expression> exp2]]		
	
	expression:
		Equal(exp1,exp2)
			-> $[[<expression> exp1] = [<expression> exp2]]		

	expression:
		GreaterThanEqual(exp1,exp2)
			-> $[[<expression> exp1] >= [<expression> exp2]]		

	expression:
		GreaterThan(exp1,exp2)
			-> $[[<expression> exp1] > [<expression> exp2]]		

	expression:
		LessThanEqual(exp1,exp2)
			-> $[[<expression> exp1] <= [<expression> exp2]]		

	expression:
		LessThan(exp1,exp2)
			-> $[[<expression> exp1] < [<expression> exp2]]		

	expression:
		NotEqual(exp1,exp2)
			-> $[[<expression> exp1] != [<expression> exp2]]		

	expression:
		Equal(exp1, allany, query)
			-> $[[<expression> exp1] = [<all-any> allany] [<query> query]]		

	expression:
		GreaterThanEqual(exp1,allany, query)
			-> $[[<expression> exp1] >= [<all-any> allany] [<query> query]]		

	expression:
		GreaterThan(exp1,allany, query)
			-> $[[<expression> exp1] > [<all-any> allany] [<query> query]]		

	expression:
		LessThanEqual(exp1,allany, query)
			-> $[[<expression> exp1] <= [<all-any> allany] [<query> query]]		

	expression:
		LessThan(exp1,allany, query)
			-> $[[<expression> exp1] < [<all-any> allany] [<query> query]]		

	expression:
		NotEqual(exp1,allany, query)
			-> $[[<expression> exp1] != [<all-any> allany] [<query> query]]		


	expression:
		InQuery(expr, maybenot, query)
			-> $[[<expression> expr] [<maybe-output(maybenot)> maybenot] in [<query> query]]

	expression:
		InSet(expr, maybenot, exprs)
			-> $[[<expression> expr] [<maybe-output(maybenot)> maybenot] in [<foldout(expression)> (exprs, ",")]]
	
	expression:
		Between(expr1, maybenot, expr2, expr3)
			-> $[[<expression> expr1] [<maybe-output(maybenot)> maybenot] between [<expression> expr2] and [<expression> expr3]]

	expression:
		SoundsLike(expr1, expr2)
			-> $[[<expression> expr1] sounds like [<expression> expr2]]

	expression:
		Like(expr1, maybenot, expr2, escape)
			-> $[[<expression> expr1] [<maybe-output(maybenot)> maybenot] like [<expression> expr2] [<maybe-output(maybeescape)> escape]]

	expression:
		Regexp(expr1, maybenot, expr2)
			-> $[[<expression> expr1] [<maybe-output(maybenot)> maybenot] regexp [<expression> expr2]]

	expression:
		BitOr(expr1, expr2)
			-> $[[<expression> expr1] | [<expression> expr2]]
	
	expression:
		BitAnd(expr1, expr2)
			-> $[[<expression> expr1] & [<expression> expr2]]

	expression:
		BitShiftLeft(expr1, expr2)
			-> $[[<expression> expr1] << [<expression> expr2]]

	expression:
		BitShiftRight(expr1, expr2)
			-> $[[<expression> expr1] >> [<expression> expr2]]

	expression:
		Plus(expr1, expr2)
			-> $[[<expression> expr1] + [<expression> expr2]]

	expression:
		Minus(expr1, expr2)
			-> $[[<expression> expr1] - [<expression> expr2]]

	expression:
		Multiply(expr1, expr2)
			-> $[[<expression> expr1] * [<expression> expr2]]

	expression:
		Divide(expr1, expr2)
			-> $[[<expression> expr1] / [<expression> expr2]]

	expression:
		Div(expr1, expr2)
			-> $[[<expression> expr1] div [<expression> expr2]]

	expression:
		Mod(expr1, expr2)
			-> $[[<expression> expr1] mod [<expression> expr2]]

	expression:
		Percent(expr1, expr2)
			-> $[[<expression> expr1] % [<expression> expr2]]

	expression:
		Power(expr1, expr2)
			-> $[[<expression> expr1] ^ [<expression> expr2]]

	expression:
		PlusInt(expr1, interval)
			-> $[[<expression> expr1] + [<interval> interval]]

	expression:
		MinusInt(expr1, interval)
			-> $[[<expression> expr1] - [<interval> interval]]

	expression:
		Collate(expr, collname)
			-> $[[<expression> expr] collate [collname]]
			
	expression:
		Or(expr1, expr2)
			-> $[[<expression> expr1] || [<expression> expr2]]

	expression:
		UnaryPlus(expr)
			-> $[+[<expression> expr]]

	expression:
		UnaryMinus(expr)
			-> $[-[<expression> expr]]

	expression:
		Reverse(expr)
			-> $[~[<expression> expr]]

	expression:
		Not(expr)
			-> $[![<expression> expr]]

	expression:
		Binary(expr)
			-> $[binary [<expression> expr]]

	expression:
		SetExpression(exprs)
			-> $[([<foldout(expression)> (exprs, ", ")])]

	expression:
		Row(expr, exprs)
			-> $[row [<expression> expr], [<foldout(expression)> (exprs, ", ")]]
			
	expression:
		Exists(query)
			-> $[exists [<query> query]]
			
	expression:
		EscapeSyntax(name, expr)
			-> $[{ [name] [<expression> expr]}]
	
	expression:
		String(str)
			-> $['[str]']
	
	expression:
		Int(i)
			-> $[[i]]

	expression:
		True() 
			-> $[true]

	expression:
		False() 
			-> $[false]

	expression:
		Unknown() 
			-> $[unknown]

	expression:
		Null()
			-> $[null]
			
	expression:
		ColumnName(name)
			-> $[[name]]

	expression:
		TableColumnName(tname, cname)
			-> $[[tname].[cname]]

	expression:
		ExpressionAs(expr, i)
			-> $[([<expression> expr] as [i])]

	expression:
		ColumnNameAs(name, i)
			-> $[([name] as [i])]


	expression:
		TableColumnNameAs(tname, cname, i)
			-> $[([tname].[cname] as i)]

	expression:
		Star()
			-> "*"

	expression:
		DBTableColumnName(dname,tname,cname)
			-> $[[dname].[tname].[cname]]

	expression:
		LocalVariable(name)
			-> $[@[name]]

	expression:
		SystemVariable(name)
			-> $[[name]]
	
	expression:
		Marker()
			-> $[?]
			
	expression:
		MatchExpression(ids, expr, modifier)
			->$[match ([<foldout(output-id)> (ids, ", ")]) against ([<expression>expr] [<maybe-output(search-modifier)> modifier])]

	expression:
		CaseExpression(expr, cws, ce)
			->
				$[case [<expression> expr]
				    [<foldout(case-when)> (cws, "\n")]
				    [<maybe-output(case-else)> ce]
				  end]
			
	expression:
		FunctionCall(name, params)
			-> $[[name]([<foldout(expression)> (params, ", ")])]
				
	expression:
		Select(sts,ses,fp, wp, gbp,hp,obp,lp,pp,ip,mp)
			-> $[(select [<select-type> sts] [<foldout(expression)> (ses, " ")] [<maybe-output(from-part)> fp]
			   [<maybe-output(where-part)> wp]
			   [<maybe-output(group-by-part)> gbp]
			   [<maybe-output(having-part)> hp]
			   [<maybe-output(order-by-part)> obp]
			   [<limit-part> lp]
			   [<maybe-output(procedure-part)> pp]
			   [<maybe-output(into-part)> ip]
			   [<maybe-output(mode-part)> mp])]
	

/*				
	expression:
		expr -> 
			$[expr]
		where
			log(|Error(), "cannot pretty-print expression:", expr)
*/		  
	case-when:
		[CaseWhen(expr1, expr2)]
			-> $[when [<expression> expr1] then [<expression> expr2]]
			
	case-else:
		CaseElse(expr) 
			-> $[else [<expression> expr]]
			
		 
	

	output-id:
		[i]
			-> $[[i]]
	
		
	search-modifier:
		InBooleanMode() 
			-> $[in boolean mode]
	
	search-modifier:
		WithQueryExpansion()
			-> $[with query expansion]
			


	maybenot:
		Not() -> $[not]
			
	maybeescape:
		Escape(expr)
			-> $[escape [<expression> expr]]

	interval:
		IntervalExpression(expr, unit)
			-> $[interval [<expression> expr] [<unit> unit]]
			
	unit:
		MicroSecondUnit()
			-> $[microsecond]		

	unit:
		SecondUnit()
			-> $[second]		

	unit:
		MinuteUnit()
			-> $[minute]		

	unit:
		HourUnit()
			-> $[hour]		

	unit:
		DayUnit()
			-> $[day]		

	unit:
		WeekUnit()
			-> $[week]		

	unit:
		MonthUnit()
			-> $[month]		

	unit:
		QuarterUnit()
			-> $[quarter]		

	unit:
		YearUnit()
			-> $[year]		

	unit:
		SecondMicroSecondUnit()
			-> $[second_microsecond]		

	unit:
		MinuteMicroSecondUnit()
			-> $[minute_microsecond]		

	unit:
		MinuteSecondUnit()
			-> $[minute_second]		

	unit:
		HourMicroSecondUnit()
			-> $[hour_microsecond]		

	unit:
		HourSecondUnit()
			-> $[hour_second]		

	unit:
		HourMinuteUnit()
			-> $[hour_minute]		

	unit:
		DayMicroSecondUnit()
			-> $[day_microsecond]		

	unit:
		DaySecondUnit()
			-> $[day_second]		

	unit:
		DayMinuteUnit()
			-> $[day_minute]		

	unit:
		DayHourUnit()
			-> $[day_hour]		

	unit:
		YearMonthUnit()
			-> $[year_month]		


	query:
		_ -> []


	all-any:
		All()
			-> "all"

	all-any:
		All()
			-> "any"

	select-type:
		[] -> ""
		
	select-type:
		[t, ts*] -> $[ [<select-type> t] [<select-type> [ts*]]]

	select-type:
		All() -> "all"

	select-type:
		Distinct() -> "distinct"

	select-type:
		DistinctRow() -> "distinctrow"

	select-type:
		HighPriority() -> "high_priority"

	select-type:
		StraightJoin() -> "straight_join"

	select-type:
		SmallResult() -> "sql_small_result"

	select-type:
		BigResult() -> "sql_big_result"

	select-type:
		BufferResult() -> "sql_buffer_result"

	select-type:
		Cache() -> "sql_cache"

	select-type:
		NoCache() -> "sql_no_cache"

	select-type:
		CalcFoundRows() -> "sql_calc_found_rows"

		
	from-part:
		Some(FromPart(trs))
		->
		$[from [<table-references> trs]]

	table-references:
		[] -> ""

	table-references:
		[tr]
			-> $[[<table-reference> tr]]

	table-references:
		[tr, trs*]
			-> $[[<table-reference> tr], [<table-references> [trs*]]]
			
	table-reference:
		TableName(tn) -> $[[tn]]

	table-reference:
		Aliased(tn, a, ih) 
			-> $[[tn] as [<alias> a] [<index-hint> ih]]
			
	table-reference:
		Query(q,a)
			-> $[<query> q [<alias> a]]

	table-reference:
		Bracket(trs) -> $[([<table-references> trs])]		

	table-reference:
		OJ(tr, tr', expr)
			-> $[oj [<table-reference> tr] left outer join [<table-reference> tr'] on [<expression> expr]]

	table-reference:
		InnerJoin(tr, tr', jc)
			-> $[[<table-reference> tr] inner join [<table-reference> tr'] [<join-condition> jc]]

	table-reference:
		CrossJoin(tr, tr', jc)
			-> $[[<table-reference> tr] cross join [<table-reference> tr'] [<join-condition> jc]]

	table-reference:
		StraightJoin(tr, tr', jc)
			-> $[[<table-reference> tr] straight join [<table-reference> tr'] [<join-condition> jc]]

	table-reference:
		LeftJoin(tr, tr', jc)
			-> $[[<table-reference> tr] left join [<table-reference> tr'] [<join-condition> jc]]

	table-reference:
		LeftOuterJoin(tr, tr', jc)
			-> $[[<table-reference> tr] left outer join [<table-reference> tr'] [<join-condition> jc]]

	table-reference:
		RightJoin(tr, tr', jc)
			-> $[[<table-reference> tr] right join [<table-reference> tr'] [<join-condition> jc]]

	table-reference:
		RightOuterJoin(tr, tr', jc)
			-> $[[<table-reference> tr] right outer join [<table-reference> tr'] [<join-condition> jc]]

	table-reference:
		NaturalLeftJoin(tr, tr', jc)
			-> $[[<table-reference> tr] natural left join [<table-reference> tr'] [<join-condition> jc]]

	table-reference:
		NaturalLeftOuterJoin(tr, tr', jc)
			-> $[[<table-reference> tr] natural left outer join [<table-reference> tr'] [<join-condition> jc]]

	table-reference:
		NaturalRightJoin(tr, tr', jc)
			-> $[[<table-reference> tr] natural right join [<table-reference> tr'] [<join-condition> jc]]

	table-reference:
		NaturalRightOuterJoin(tr, tr', jc)
			-> $[[<table-reference> tr] natural right outer join [<table-reference> tr'] [<join-condition> jc]]



	alias:
		Alias(n)
			-> $[as [n]]	

	index-hint:
		Use(ik, fc)
			-> $[use [<index-key> ik] [<maybe-output(for-clause)> fc]]

	index-hint:
		Ignore(ik, fc)
			-> $[ignore [<index-key> ik] [<maybe-output(for-clause)> fc]]

	index-hint:
		Force(ik, fc)
			-> $[force [<index-key> ik] [<maybe-output(for-clause)> fc]]


	index-key:
		Index() -> "Index"

	index-key:
		Key() -> "Key"
		
	for-clause:
		Some(ForClause(jog, ns))
			-> $[for [<jog> jog] [<foldout(column-name)> (ns, ", ")]]

	jog:
		Join() -> "join"
		
	jog:
		OrderBy() -> "order by"

	jog:
		GroupBy() -> "group by"
			
	join-condition:
		On(expr)
			-> $[on [<expression> expr]]
			
	join-condition:
		Using(ns)
			-> $[using [<foldout(column-name)> (ns, ", ")]]
		
	group-by-part:
		Some(GroupByPart(expr, o, r))
			-> $[group by [<expression> expr] [<maybe-output(order)> o] [<maybe-output(rollup)> r]]
 
 	order:
 		Some(Ascending()) -> "asc"

 	order:
 		Some(Descending()) -> "desc"
 		 		
 	rollup:
 		Some(Rollup())
 			-> "with rollup"

	having-part:
		Some(HavingPart(expr))
			-> $[having [<expression> expr]]
	
	order-by-part:
		Some(OrderByPart(expr, o))
			-> $[order by [<expression> expr] [<maybe-output(order)> o]]
	
			
	procedure-part:
		Some(ProcedurePart(n, ps))
			-> $[procedure [n] ([<foldout(expression)> (ps, ", ")])]
     
    into-part:
    	Some(IntoOutFile(s,cs,eo))
    		-> $[into outfile [s] [<charset> cs] [<maybe-output(export-options)> eo]] 

    into-part:
    	Some(Into(vars))
    		-> $[into [<foldout(column-name)> (vars, ", ")]] 


	charset:
		CharSet(name)
			-> $[character set [name]]      
			

	export-options:
		Some(ExportOptions())
			-> "export options unknown"
			
		
	mode-part:
		Some(ForUpdate()) -> "for update"

	mode-part:
		Some(LockShareMode()) -> "lock in share mode"
		
	declare-statement:
		Declare(names, type, default) 
			-> $[declare [<foldout(column-name)> (names, ", ")] [<column-type> type] [<maybe-output(declare-default)> default]]

		
		
	declare-default:
		DefaultDeclare(expr)
			-> $[default [<expression> expr]]	
	


	standard-stuff:
		name ->
			$[]

