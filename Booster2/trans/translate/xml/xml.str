module translate/xml/xml

imports
  include/Booster2

  library/strategy
  library/abstractBoosterModel
  library/file

  library/typeDecl

  booster

rules   

		
	build-xml-file:
		x -> None()
	where
		systemname := <LookupTable> "Name";
		filename := <concat-strings>[ "output/xml/",systemname,"-ObjectModel.xml"];
		classes := <LookupTable> "Classes";
		classDefs := <map(class-xml)> classes;
		contents := <concat-strings>["<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
									"<objectModel xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
			 						" xmlns=\"http://www.example.org/objectModel\"", 
			 						" xsi:noNamespaceSchemaLocation=\"objectModel.xsd\" name=\"",
			 						systemname, 
			 						"\">",
									<concat-strings> classDefs, 
									"\n</objectModel>"];
		<write-file>( filename, contents) 
		

	class-xml:
		classname
			-> <concat-strings> ["\n    <class name=\"", 
								classname, 
								"\">\n        <countObjectMethod class=\"ox.softeng.booster.",
								systemname,
								"\" method=\"count",
								classname,
								"\"/>",
								<concat-strings> attDefs,
						  		"\n    </class>"]
		where 
			classAtts := <lookup-class-attributes> classname; 
			attDefs := <currymap(attribute-xml)> (classname, classAtts);
			systemname := <LookupTable> "Name"

	attribute-xml:
		(classname, attname)
			-> <concat-strings> ["\n        <attribute name=\"",
									attname,
								  "\" primType=\"",
									primType,
								  "\" typeMultiplicity=\"",
								    typeMultiplicity,
								  "\" className=\"",
									className,
								  "\" setName=\"",
									setName,
								  "\">",
								  "\n            <getObjectAttributeValueMethod class=\"ox.softeng.booster.",
								  systemname,
								  "\" method=\"retrieve",
								  classname,
								  attname,
								  "\"/>",
								  "\n        </attribute>"
								  ]
		where 
			attType := <lookup-attribute-type> (classname, attname);
			(primType, typeMultiplicity,className,setName) := <type-xml> attType;
			systemname := <LookupTable> "Name"
			
	type-xml:
		Int() -> ("Integer","Mandatory","","")
	type-xml:
		String() -> ("String","Mandatory","","")
	type-xml:
		Class(name) -> ("ClassRef","Mandatory",name,"")
		where 
			<equal>(name, <lookup-class-name> name)
	type-xml:
		Class(name) -> ("SetValue","Mandatory","",name)
		where 
			<equal>(name, <lookup-set-name> name)

	type-xml:
		Optional(Int()) -> ("Integer","Optional","","")
	type-xml:
		Optional(String()) -> ("String","Optional","","")
	type-xml:
		Optional(Class(name)) -> ("ClassRef","Optional",name,"")
		where 
			<equal>(name, <lookup-class-name> name)
	type-xml:
		Optional(Class(name)) -> ("SetValue","Optional","",name)
		where 
			<equal>(name, <lookup-set-name> name)
	
	type-xml:
		Set(Int()) -> ("Integer","Set","","")
	type-xml:
		Set(String()) -> ("String","Set","","")
	type-xml:
		Set(Class(name)) -> ("ClassRef","Set",name,"")
		where 
			<equal>(name, <lookup-class-name> name )
	type-xml:
		Set(Class(name)) -> ("SetValue","Set","",name)
		where 
			<equal>(name, <lookup-set-name> name)
	
	
