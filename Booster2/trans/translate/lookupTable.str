module translate/booster/lookupTable

imports
  include/Booster2

  library/abstractBoosterModel
  library/basicTypes
 

 rules
 	
 	output-lookup-table:
 		system -> 
	 		("Name:", <LookupTable> "Name",
	 		"SetDef:", <LookupTable> "SetDef",
	 		"Class:", <LookupTable> "Class",
	 		"Attribute:", <LookupTable> "Attribute",
	 		"Method:", <LookupTable> "Method")
 	
/* 	
output-list(s) : ([], sep) -> $[]
output-list(s) : ([x], sep) -> $[[<s> x]]
output-list(s): ([x | xs], sep) -> 
$[[<s> x][sep][<output-list(s)> (xs, sep)]]

output-list = output-list(id)

output-lookup-table:
	system ->
$[
System

	[systemName]
	
SetDefs	

	[<output-list(output-setdef)> (setdefs, "\r\t")]

Classes	

	[<output-list(output-class)> (classes, "\r\t")]

Attributes	

	[<output-list(output-attribute)> (attributes, "\r\t")]

Methods	

	methods
	
]
	where
		systemName := <LookupTable> "Name";
		setdefs := <LookupTable> "SetDef";
		classes := <LookupTable> "Class";
		attributes := <LookupTable> "Attribute";
		methods := <LookupTable> "Method"
		

output-setdef:
	(name, elements)
		-> 
$[[name]: [<output-list> (elements, ",")]]		
	
output-class:
	(name, (extends, attributes, methods, constraints, workflows))-> 
$[name:       [name]
extends:    [<output-list>(extends, ",")]
attributes: [<output-list>(attributes, ",")]
methods:    [<output-list>(methods, ",")]]
  
output-attribute:
	((cname, aname), (decorations, type, opposite, minmult, maxmult))
		->
$[name: [cname] . [aname]]

*/