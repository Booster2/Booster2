module translate/java/controllers

imports
  include/Booster2
  
  library/strategy
  library/abstractBoosterModel
  library/file


rules   


/*
		
	build-java-controller:
		x -> None()
	where
		filename := <concat-strings>[ "output/java/",<LookupTable> "Name",".java"];
		classDefs := <map(class-java)> <LookupTable> "Classes";
		contents := <concat-strings>["package ox.softeng.booster",
			 ";\n\n",
			"import java.sql.Connection;\n",
			"import java.sql.ResultSet;\n",
			"import java.sql.SQLException;\n",
			"import java.sql.PreparedStatement;\n  ",
			"import java.util.Vector;\n  ",
			 "public class ",
			 <LookupTable> "Name",
			 "{\n",
			<concat-strings> classDefs, 
			"\n}"];
		<write-file>( filename, contents) 


	class-java:
		classname
			-> <concat-strings> [
				"   public static Integer count",
				classname,
				"(Connection c) throws SQLException{\n      ",
				"PreparedStatement ps = c.prepareStatement(\"select count(*) from ",
				classname,
				"\");\n      ",
				"ResultSet rs = ps.executeQuery();\n      ",
				"rs.beforeFirst();\n      ",
				"rs.next();\n      ",
				"Integer i = rs.getInt(1);\n      ",
				"return i;\n   ",
				"}\n\n",
				<concat-strings> attDefs
				]
		where 
			classAtts := <lookup-class-attributes> classname; 
			attDefs := <currymap(attribute-java)> (classname, classAtts)
		
	attribute-java:
		(classname, attname)
		 	-> <concat-strings> [
				"   public static Integer retrieve",
				classname,
				attname,
				"(Connection c, Integer id) throws SQLException{\n      ",
				"PreparedStatement ps = c.prepareStatement(\"select ",
				attname, 
				" from ",
				classname,
				" where ",
				classname,
				"Id = ?\");\n      ",
				"ps.setInt(1,id);\n      ",
				"ResultSet rs = ps.executeQuery();\n      ",
				"rs.beforeFirst();\n      ",
				"rs.next();\n      ",
				"Integer ret = rs.getInt(1);\n      ",
				"return ret;\n   ",
				"}\n\n"
				]
		where 
			Int() := <lookup-attribute-type> (classname, attname)

	attribute-java:
		(classname, attname)
		 	-> <concat-strings> [
				"   public static Integer retrieve",
				classname,
				attname,
				"(Connection c, Integer id) throws SQLException{\n      ",
				"PreparedStatement ps = c.prepareStatement(\"select ",
				attname, 
				" from ",
				classname,
				" where ",
				classname,
				"Id = ?\");\n      ",
				"ps.setInt(1,id);\n      ",
				"ResultSet rs = ps.executeQuery();\n      ",
				"rs.beforeFirst();\n      ",
				"rs.next();\n      ",
				"Integer ret = rs.getInt(1);\n      ",
				"return ret;\n   ",
				"}\n\n"
				]
		where 
			Optional(Int()) := <lookup-attribute-type> (classname, attname)

	attribute-java:
		(classname, attname)
		 	-> <concat-strings> [
				"   public static Vector<Integer> retrieve",
				classname,
				attname,
				"(Connection c, Integer id) throws SQLException{\n      ",
				"PreparedStatement ps = c.prepareStatement(\"select ",
				attname, 
				" from ",
				classname,
				"_",
				attname,
				" where ",
				classname,
				"Id = ?\");\n      ",
				"ps.setInt(1,id);\n      ",
				"ResultSet rs = ps.executeQuery();\n      ",
				"Vector<Integer> ret = new Vector<Integer>();\n      ",
				"rs.beforeFirst();\n      ",
				"while(rs.next())\n        ",
				"ret.add(rs.getInt(1));\n      ",
				"return ret;\n   ",
				"}\n\n"
				]
		where 
			Set(Int()) := <lookup-attribute-type> (classname, attname)
			
	attribute-java:
		(classname, attname)
		 	-> <concat-strings> [
				"   public static String retrieve",
				classname,
				attname,
				"(Connection c, Integer id) throws SQLException{\n      ",
				"PreparedStatement ps = c.prepareStatement(\"select ",
				attname, 
				" from ",
				classname,
				" where ",
				classname,
				"Id = ?\");\n      ",
				"ps.setInt(1,id);\n      ",
				"ResultSet rs = ps.executeQuery();\n      ",
				"rs.beforeFirst();\n      ",
				"rs.next();\n      ",
				"String ret = rs.getString(1);\n      ",
				"return ret;\n   ",
				"}\n\n"
				]
		where 
			String() := <lookup-attribute-type> (classname, attname)

	attribute-java:
		(classname, attname)
		 	-> <concat-strings> [
				"   public static String retrieve",
				classname,
				attname,
				"(Connection c, Integer id) throws SQLException{\n      ",
				"PreparedStatement ps = c.prepareStatement(\"select ",
				attname, 
				" from ",
				classname,
				" where ",
				classname,
				"Id = ?\");\n      ",
				"ps.setInt(1,id);\n      ",
				"ResultSet rs = ps.executeQuery();\n      ",
				"rs.beforeFirst();\n      ",
				"rs.next();\n      ",
				"String ret = rs.getString(1);\n      ",
				"return ret;\n   ",
				"}\n\n"
				]
		where 
			Optional(String()) := <lookup-attribute-type> (classname, attname)
			
	attribute-java:
		(classname, attname)
		 	-> <concat-strings> [
				"   public static Vector<String> retrieve",
				classname,
				attname,
				"(Connection c, Integer id) throws SQLException{\n      ",
				"PreparedStatement ps = c.prepareStatement(\"select ",
				attname, 
				" from ",
				classname,
				"_",
				attname,
				" where ",
				classname,
				"Id = ?\");\n      ",
				"ps.setInt(1,id);\n      ",
				"ResultSet rs = ps.executeQuery();\n      ",
				"Vector<String> ret = new Vector<String>();\n      ",
				"rs.beforeFirst();\n      ",
				"while(rs.next())\n        ",
				"ret.add(rs.getString(1));\n      ",
				"return ret;\n   ",
				"}\n\n"
				]
		where 
			Set(String()) := <lookup-attribute-type> (classname, attname)

	attribute-java:
		(classname, attname)
		 	-> <concat-strings> [
				"   public static Integer retrieve",
				classname,
				attname,
				"(Connection c, Integer id) throws SQLException{\n      ",
				"PreparedStatement ps = c.prepareStatement(\"select ",
				attname, 
				" from ",
				classname,
				" where ",
				classname,
				"Id = ?\");\n      ",
				"ps.setInt(1,id);\n      ",
				"ResultSet rs = ps.executeQuery();\n      ",
				"rs.beforeFirst();\n      ",
				"rs.next();\n      ",
				"Integer ret = rs.getInt(1);\n      ",
				"return ret;\n   ",
				"}\n\n"
				]
		where 
			Class(name) := <lookup-attribute-type> (classname, attname);
			<equal>(name, <lookup-class-name> name);
			not(<lookup-opposite>(classname, attname))

	attribute-java:
		(classname, attname)
		 	-> <concat-strings> [
				"   public static Integer retrieve",
				classname,
				attname,
				"(Connection c, Integer id) throws SQLException{\n      ",
				"return 0;\n   ",
				"}\n\n"
				]
		where 
			Class(name) := <lookup-attribute-type> (classname, attname);
			<equal>(name, <lookup-class-name> name)
						

	attribute-java:
		(classname, attname)
		 	-> <concat-strings> [
				"   public static Integer retrieve",
				classname,
				attname,
				"(Connection c, Integer id) throws SQLException{\n      ",
				"PreparedStatement ps = c.prepareStatement(\"select ",
				attname, 
				" from ",
				classname,
				" where ",
				classname,
				"Id = ?\");\n      ",
				"ps.setInt(1,id);\n      ",
				"ResultSet rs = ps.executeQuery();\n      ",
				"rs.beforeFirst();\n      ",
				"rs.next();\n      ",
				"Integer ret = rs.getInt(1);\n      ",
				"return ret;\n   ",
				"}\n\n"
				]
		where 
			Optional(Class(name)) := <lookup-attribute-type> (classname, attname);
			<equal>(name, <lookup-class-name> name);
			not(<lookup-opposite>(classname, attname))

	attribute-java:
		(classname, attname)
		 	-> <concat-strings> [
				"   public static Integer retrieve",
				classname,
				attname,
				"(Connection c, Integer id) throws SQLException{\n      ",
				"return 0;\n   ",
				"}\n\n"
				]
		where 
			Optional(Class(name)) := <lookup-attribute-type> (classname, attname);
			<equal>(name, <lookup-class-name> name)


	attribute-java:
		(classname, attname)
		 	-> <concat-strings> [
				"   public static Vector<Integer> retrieve",
				classname,
				attname,
				"(Connection c, Integer id) throws SQLException{\n      ",
				"PreparedStatement ps = c.prepareStatement(\"select ",
				attname, 
				" from ",
				classname,
				" where ",
				classname,
				"Id = ?\");\n      ",
				"ps.setInt(1,id);\n      ",
				"ResultSet rs = ps.executeQuery();\n      ",
				"Vector<Integer> ret = new Vector<Integer>();\n      ",
				"rs.beforeFirst();\n      ",
				"while(rs.next())\n        ",
				"ret.add(rs.getInt(1));\n      ",
				"return ret;\n   ",
				"}\n\n"
				]
		where 
			Set(Class(name)) := <lookup-attribute-type> (classname, attname);
			<equal>(name, <lookup-class-name> name)
		
	attribute-java:
		(classname, attname)
		 	-> <concat-strings> [
				"   public static String retrieve",
				classname,
				attname,
				"(Connection c, Integer id) throws SQLException{\n      ",
				"PreparedStatement ps = c.prepareStatement(\"select ",
				attname, 
				" from ",
				classname,
				" where ",
				classname,
				"Id = ?\");\n      ",
				"ps.setInt(1,id);\n      ",
				"ResultSet rs = ps.executeQuery();\n      ",
				"rs.beforeFirst();\n      ",
				"rs.next();\n      ",
				"String ret = rs.getString(1);\n      ",
				"return ret;\n   ",
				"}\n\n"
				]
		where 
			Class(name) := <lookup-attribute-type> (classname, attname);
			<equal>(name, <lookup-set-name> name)

	attribute-java:
		(classname, attname)
		 	-> <concat-strings> [
				"   public static String retrieve",
				classname,
				attname,
				"(Connection c, Integer id) throws SQLException{\n      ",
				"PreparedStatement ps = c.prepareStatement(\"select ",
				attname, 
				" from ",
				classname,
				" where ",
				classname,
				"Id = ?\");\n      ",
				"ps.setInt(1,id);\n      ",
				"ResultSet rs = ps.executeQuery();\n      ",
				"rs.beforeFirst();\n      ",
				"rs.next();\n      ",
				"String ret = rs.getString(1);\n      ",
				"return ret;\n   ",
				"}\n\n"
				]
		where 
			Optional(Class(name)) := <lookup-attribute-type> (classname, attname);
			<equal>(name, <lookup-set-name> name)

	attribute-java:
		(classname, attname)
		 	-> <concat-strings> [
				"   public static Vector<String> retrieve",
				classname,
				attname,
				"(Connection c, Integer id) throws SQLException{\n      ",
				"PreparedStatement ps = c.prepareStatement(\"select ",
				attname, 
				" from ",
				classname,
				" where ",
				classname,
				"Id = ?\");\n      ",
				"ps.setInt(1,id);\n      ",
				"ResultSet rs = ps.executeQuery();\n      ",
				"Vector<String> ret = new Vector<String>();\n      ",
				"rs.beforeFirst();\n      ",
				"while(rs.next())\n        ",
				"ret.add(rs.getString(1));\n      ",
				"return ret;\n   ",
				"}\n\n"
				]
		where 
			Set(Class(name)) := <lookup-attribute-type> (classname, attname);
			<equal>(name, <lookup-set-name> name)
*/