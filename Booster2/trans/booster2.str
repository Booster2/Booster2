module booster2

imports

  libstratego-xtc
  lib/editor-common.generated
  check
  
  parse/main
  elaborate/main
  compile/main
 
  translate/booster/abstractBoosterModel
  translate/sql/abstractBoosterModel
  translate/sql/sql
  translate/lookupTable
  
  simplify/main
  
  library/strategy
  
rules // Main editor interface (defined by editor/Booster-Builders and -References.esv)
  
  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
  // each a list of (term, message) tuples or simply (message) terms.
  editor-analyze: 
    (ast, path, project-path) -> (errors, warnings, notes)
    with
      editor-init;
      analyze;
      errors   := <collect-all(constraint-error, conc)> ast;
      warnings := <collect-all(constraint-warning, conc)> ast;
      notes    := <collect-all(constraint-note, conc)> ast
  
  // Prints the abstract syntax ATerm of a selection.
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected // we just return the input term


  
  // Resolves a reference when the user control-clicks or presses F3 in the editor.
  // Only succeeds for nodes of the form Type(_) for which GetEntity is defined.
  
  editor-resolve:
    (node, position, ast, path, project-path) -> target
    where
      /*<debug(!"Resolve: ")> node; */ 
      Type(type) := node; 
      target     :=  type 

  // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  editor-hover:
    (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> target]]

  // Completes an identifier when the user presses control-space
  // (the completion identifier in the AST provides additional context information)
   editor-complete:
    (node, position, ast, path, project-path) ->
    ["String", "Int" | []]
    /*where
      <debug(!"Complete: ")> node;
      if !node => Type(COMPLETION(prefix)) then
        proposals := []
      end */
      
   
   
   /*** These are the actual transformations that are available from the editor ***/
   
   builder-parse: 
   		(selected, position, ast, path, project-path) -> (filename, result)
   	 where
   		filename := <guarantee-extension(|"1")> path;
   		result :=   <output-lookup-table>
   				          <parse> 
   				            selected   

   builder-elaborate: 
   		(selected, position, ast, path, project-path) -> (filename, result)
   	 where
   		filename := <guarantee-extension(|"2")> path;
   		result :=   <output-lookup-table>
   						<elaborate>
   				          <parse> 
   				            selected   
   
   builder-compile: 
   		(selected, position, ast, path, project-path) -> (filename, result)
   	 where
   		filename := <guarantee-extension(|"3")> path;
   		result :=   <output-lookup-table>
   						<compile>
	   						<elaborate>
	   				          <parse> 
	   				            selected   

   builder-simplify: 
   		(selected, position, ast, path, project-path) -> (filename, result)
   	 where
   		filename := <guarantee-extension(|"4")> path;
   		result :=   <output-lookup-table>
   						<simplify-main>
	   						<compile>
		   						<elaborate>
		   				          <parse> 
		   				            selected   
   

   builder-translate-sql:
   	(selected, position, ast, path, project-path) -> (filename, result')
   	 with
   		filename := <guarantee-extension(|"sql")> path;
		result := <pp-install>
   				  	<booster-to-relational>
   				  		<simplify-main>
	  						<compile> 
	  						  <elaborate>
	          					<parse> 
	            					selected;
   		stdtxtfile := <concat-strings>[project-path, "/sql-build/standardStuff.sql"];		            
   		standard-text := <read-text-file> stdtxtfile;
   		result' := <concat-strings>[result, standard-text]   
   		
   		
   builder-translate-booster:
   	(selected, position, ast, path, project-path) -> (filename, result)
   	 with
   		filename := <guarantee-extension(|"expanded.boo2")> path;
   		result :=  <output-to-booster>  
   				  <simplify-main>
   				  	<compile>
		 				<elaborate>
   				          <parse> 
   				            selected


   builder-test: 
   		(selected, position, ast, path, project-path) -> (filename, result)
   		with
	   		filename := <guarantee-extension(|"test")> path;
	   		result :=  (<subsets> [1,2,3],<subsets> [3,2,1])   
   		
   		

main-booster =
  xtc-input-wrap(
    // Read input
    ?FILE(input);
    prim("SSL_EXT_enable_origins");
    ast                             := <parse-booster2-file> input;

    // Analyze
    (ast', errors, warnings, notes) := <editor-analyze> (ast, input, ".");
    // ...
    
    // Compile
    (output, contents)              := <builder-translate-sql> (ast', [], ast, input, ".");
    
    // Write to disk
    handle := <fopen> (output, "w");
    <fputs> (contents, handle);
    fclose
  <+
    // Report any errors
    prim("SSL_stacktrace_get_all_frame_names"); report-failure
  )

