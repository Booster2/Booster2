module booster2

imports

  include/Booster2

  libstratego-xtc
  lib/editor-common.generated
  check
  
  parse
  
  elaborate
 
  heuristics
  wp
  
  
  // Workflow Stuff Begin
  calculateWFPrecond/main
  // Workflow Stuff End
 
  simplify

  translate/booster/booster
  translate/sql/abstractBoosterModel
  translate/sql/sql
  translate/lookupTable
  
  
  library/environment
  library/valueExpression
  library/lookupTable
  
rules  
  
  conjoin-constraints = foldr1((\ [x] -> x\),(\ (x,y) -> And(x,y) \)) <+ !True()	
  
  parseToBooster = (\ x -> <builder-parse(output-to-booster)> ("parsed.boo2", x) \)
  parseToLookupTable = (\ x -> <builder-parse(output-lookup-table)> ("parsed.table", x) \)

  elaborateToBooster = (\ x -> <builder-elaborate(output-to-booster)> ("elaborated.boo2", x) \)
  elaborateToLookupTable = (\ x -> <builder-elaborate(output-lookup-table)> ("elaborated.table", x) \)

  heuristicsToBooster = (\ x -> <builder-heuristics(output-to-booster)> ("heuristics.boo2", x) \)
  heuristicsToLookupTable = (\ x -> <builder-heuristics(output-lookup-table)> ("heuristics.table", x) \)

  WPToBooster = (\ x -> <builder-wp(output-to-booster)> ("wp.boo2", x) \)
  WPToLookupTable = (\ x -> <builder-wp(output-lookup-table)> ("wp.table", x) \)


  simplifyToBooster = (\ x -> <builder-simplify(output-to-booster)> ("simplified.boo2", x) \)
  simplifyToLookupTable = (\ x -> <builder-simplify(output-lookup-table)> ("simplified.table", x) \)

  translateToSQL = (\ x -> <builder-translate-sql> ("sql", x) \)
  
  java-parse-booster = main(parseToBooster)
  java-parse-lut = main(parseToLookupTable)

  java-elaborate-booster = main(elaborateToBooster)
  java-elaborate-lut = main(elaborateToLookupTable)

  java-heuristics-booster = main(heuristicsToBooster)
  java-heuristics-lut = main(heuristicsToLookupTable)

  java-wp-booster = main(WPToBooster)
  java-wp-lut = main(WPToLookupTable)

  java-simplify-booster = main(simplifyToBooster)
  java-simplify-lut = main(simplifyToLookupTable)
  
  // workflow begin
  precondToBooster = (\ x -> <builder-precond(output-to-booster)> ("precond.boo2", x) \)
  precondToLookupTable = (\ x -> <builder-precond(output-lookup-table)> ("precond.table", x) \)
  // workflow end

  
  main(s) =
  xtc-input-wrap(
    // Read input
    ?FILE(input);
    prim("SSL_EXT_enable_origins");
    ast                             := <parse-booster2-file> input;
    // Analyze
    (errors, warnings, notes) := <editor-analyze> (ast, input, ".");
    // ...
    
	//log(|Error(), errors);
	//log(|Warning(), warnings);
	//log(|Info(), notes);
    // Compile
    (output, contents)              := <s> (ast, [], ast, input, ".");
    
    // Write to disk
    handle := <fopen> (output, "w");
    <fputs> (contents, handle);
    fclose
  <+
    // Report any errors
    prim("SSL_stacktrace_get_all_frame_names"); report-failure
  )
  
rules // Main editor interface (defined by editor/Booster-Builders and -References.esv)
  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
  // each a list of (term, message) tuples or simply (message) terms.
  editor-analyze: 
    (ast, path, project-path) -> (errors, warnings, notes)
    where
      editor-init;
      <elaborate> <parse> ast;
      errors   := <collect-all(constraint-error, conc)> ast;
      warnings := <collect-all(constraint-warning, conc)> ast;
      notes    := <collect-all(constraint-note, conc)> ast
      

  
  // Prints the abstract syntax ATerm of a selection.
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected // we just return the input term


  
  // Resolves a reference when the user control-clicks or presses F3 in the editor.
  // Only succeeds for nodes of the form Type(_) for which GetEntity is defined.
  
  editor-resolve:
    (node, position, ast, path, project-path) -> target
    where
      /*<debug(!"Resolve: ")> node; */ 
      Type(type) := node; 
      target     :=  type 

  // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  editor-hover:
    (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> target]]


  // Completes an identifier when the user presses control-space
  // (the completion identifier in the AST provides additional context information)
   editor-complete:
    (node, position, ast, path, project-path) ->
    	proposals
    where

		model := <elaborate> <parse> ast;
		//log(|Error(), "model", model);
		//log(|Error(), "ast", ast);
		if !node => UniDirectional(COMPLETION(prefix)) then
        	proposals := <union>(<union>(["String","Int","DateTime", "Boolean"],<map(\(cname, cdef) -> cname\)> <LookupTable> "Class"), <map(\(sname, sdef) -> sname\)> <LookupTable> "SetDef")
      	end;
    	if !node => Extension(COMPLETION(prefix)) then
    		//classname := <collect-one(get-completion-class)> ast;
        	//proposals := <filter(\(cname, cdef) -> cname where <not(equal)>(cname, classname)\)><LookupTable> "Class"
        	proposals := <map(\(cname, cdef) -> cname\)><LookupTable> "Class"
      	end;
    	if !node => BiDirectional(classname,COMPLETION("")) then
        	proposals := <\ (ds, as, atts, ms, cs, wfs) -> atts\> <lookup>(classname, <LookupTable> "Class")
      	end;
      	if !node => PathComponent(COMPLETION(""), None()) then
        	classname := <collect-one(get-completion-class)> ast;
        	methodname := <collect-one(get-completion-method)> ast;
        	proposals :=  <get-potential-attributes> (classname, methodname, <parent-at-position(|position)> ast)
      	end;
      	if !node => PathStart(COMPLETION(""),None()) then
        	classname := <collect-one(get-completion-class)> ast;
        	proposals := <union>(["this"], <\ (ds, as, atts, ms, cs, wfs) -> atts\> <lookup>(classname, <LookupTable> "Class"))
      	end
      	
    get-completion-method:
    	Method (name, something) -> 
    		name
    		where
    		<collect-one(?COMPLETION(x))> something 

    get-completion-class:
    	Class (name, extends, something) -> 
    		name
    		where
    		<collect-one(?COMPLETION(x))> (name, extends, something) 

		 
    get-potential-attributes:
    	(cname, mname, Path (pathStart {Reference(c)}, something)) -> 
			attnames
			where
				attnames := <\(ds, as, atts, ms, cs, wfs) -> atts\> <lookup>(cname, <LookupTable> "Class")

    get-potential-attributes:
    	(cname, mname, Path (pathStart {Optional(Reference(c))}, something)) -> 
			attnames
			where
				attnames := <\(ds, as, atts, ms, cs, wfs) -> atts\> <lookup>(cname, <LookupTable> "Class")

    get-potential-attributes:
		somethingelse -> []
		      	
      /* <debug(!"Complete: ")> (<get-classes-from-system> ast) */
      /*;
      if !node => Type(COMPLETION(prefix)) then
        proposals := []
      end */
      
   
   
   /*** These are the actual transformations that are available from the editor ***/
   
   builder-parse(output): 
   		(extension, (selected, position, ast, path, project-path)) -> (filename, result)
   	 where
   		filename := <guarantee-extension(|extension)> path;
   		result :=   <output>
   				          <parse> 
   				            selected   

   builder-elaborate(output): 
   		(extension, (selected, position, ast, path, project-path)) -> (filename, result)
   	 where
   		filename := <guarantee-extension(|extension)> path;
   		result :=   <output>
   						<elaborate>
   				          <parse> 
   				            selected   
   
   builder-heuristics(output): 
   		(extension, (selected, position, ast, path, project-path)) -> (filename, result)
   	 where
   		filename := <guarantee-extension(|extension)> path;
   		result :=   <output>
   						<heuristics>
	   						<elaborate>
	   				          <parse> 
	   				            selected   

   builder-wp(output): 
   		(extension, (selected, position, ast, path, project-path)) -> (filename, result)
   	 where
   		filename := <guarantee-extension(|extension)> path;
   		result :=   <output>
   						<wp>
   							<heuristics>
	   							<elaborate>
	   				          		<parse> 
	   				            		selected   

   builder-simplify(output): 
   		(extension, (selected, position, ast, path, project-path)) -> (filename, result)
   	 where
   		filename := <guarantee-extension(|extension)> path;
   		result :=   <output>
   						<simplify-main>
	   						<wp>
	   							<heuristics>
			   						<elaborate>
			   				          <parse> 
			   				            selected   
   

   builder-translate-sql:
   	(extension, (selected, position, ast, path, project-path)) -> (filename, result')
   	 with
   		filename := <guarantee-extension(|extension)> path;
		result := <pp-install>
   				  	<booster-to-relational>
   				  		<simplify-main>
	   						<wp>
	   							<heuristics>
		  						  <elaborate>
		          					<parse> 
		            					selected;
   		stdtxtfile := <concat-strings>[project-path, "/sql-build/standardStuff.sql"];		            
   		standard-text := <read-text-file> stdtxtfile;
   		result' := <concat-strings>[result, standard-text]   
   		
   		
/*   builder-translate-booster:
   	(extension, (selected, position, ast, path, project-path)) -> (filename, result)
   	 with
   		filename := <guarantee-extension(|extension)> path;
   		result :=  <output-to-booster>  
   				  <simplify-main>
   				  	<compile>
		 				<elaborate>
   				          <parse> 
   				            selected
*/
/*	new-builder:
	(selected, position, ast, path, project-path) -> (filename, result)
   	 with
   		filename := <guarantee-extension(|"expanded.test")> path;
   		result := 
	   			<new-elaborate>
					<new-parse> 
						selected 
*/

/*   builder-test: 
   		(selected, position, ast, path, project-path) -> (filename, result)
   		with
	   		filename := <guarantee-extension(|"test")> path;
	   		// test some pattern matching on some annotations
	   		result := ( <try(\ String() 			-> Int() \)> 				String(),
	   					<try(\ String() {something}	-> Int() \)> 				String(), 
	   					<try(\ String() {}			-> Int() \)> 				String(), 
	   					<try(\ String() 			-> Int() \)> 				String() { True() },
	   					<try(\ String() {something}	-> Int() \)> 				String() { True() },
	   					<try(\ String() 			-> String() \)> 			String() { True() }, 
	   					<try(\ something		    -> something\)> 			String() { True() }, 
	   					<try(\ something		    -> something {False()}\)> 	String() { True() })   
*/
   builder-test: 
   		(selected, position, ast, path, project-path) -> (filename, result)
   		with
	   		filename := <guarantee-extension(|"test")> path;
	   		// test some pattern matching on some annotations
	   		result := ( <conjoin-constraints>[],
	   		<conjoin-constraints>[BinRel(Input("a"),In(),Input("b"))],
	   		<conjoin-constraints>[BinRel(Input("a"),In(),Input("b")),BinRel(Input("a"),In(),Input("b"))],
	   		<conjoin-constraints>[BinRel(Input("a"),In(),Input("b")),BinRel(Input("a"),In(),Input("b")),BinRel(Input("a"),In(),Input("b"))])   

   		
 /* *************************
 *** Workflow Stuff Begin ***
 ************************* */
	 builder-precond(output):
	 	(extension, (selected, position, ast, path, project-path)) -> (filename, result)
	 where
	 	filename := <guarantee-extension(|extension)> path;
	 	result :=
	 		<output>
	  			<precond-main>
					<wp>
						<heuristics>
		 	    			<elaborate> 
		 	      				<parse> 
		 	        				selected
/* *************************
*** Workflow Stuff End *****
************************* */				   



