module booster2

imports
	
	libstratego-lib
	libstratego-gpp
	libstratego-aterm
	signatures/-
	stratego/metaborg

	runtime/index/-
	runtime/nabl/-
	runtime/properties/-
	runtime/types/-
	runtime/task/-
	runtime/analysis/-
	runtime/editor/-
	names/names
	check
	pp
	desugar
	api/_runtime
	types-manual
	names-manual
	lib/nabl-ext
	outline
	
	generation/elaborate
	generation/heuristics
	generation/simplify
	generation/sql
	generation/wp
	generation/triple
	generation/de-annotate
	
	types/trans/types

rules // Analysis

 	editor-analyze = analyze-all(desugar-before-analysis, desugar-after-analysis, pp-message-top|<language>)

	editor-analyze = analyze-all(parse-file <+ !(), desugar-before-analysis, desugar-after-analysis, pp-message-top|<language>)
	
rules // Editor services
	
	// Resolves a reference when the user control-clicks or presses F3 in the editor.
	editor-resolve:
		(node, position, ast, path, project-path) -> definition
		where
			node' := <try(resolve-child)>node;
			definition := <_analysis-resolve(|<language>, project-path)> node'
	
	resolve-child: Input(a) -> a
	resolve-child: Output(a) -> a

	// Returns "hover help" information for a particular node in the editor.
	// For references, this rule is invoked using the resolved term.
	editor-hover:
		(target, position, ast, path, project-path) ->
			<get-editor-properties(pp-partial-Booster2-string |<language>, project-path);properties-to-html>target

	// Gathers the outline nodes for the outline view.
	editor-outline:
		(node, position, ast, path, project-path) -> outline
		where
			outline := <simple-label-outline(to-outline-label)> ast

	// Gathers the properties for the properties view.
	editor-properties:
		(target, position, ast, path, project-path) ->
			<get-all-editor-properties(pp-partial-Booster2-string |<language>, project-path)>target

	// Completes an identifier when the user presses control-space
	// (the completion identifier in the AST provides additional context information)
	editor-complete:
		(node, position, ast, path, project-path) -> proposals
		where
			proposals := <analysis-propose-completions(|<language>, project-path)> ast
	
	// Formats the program using a pretty printer.	
  editor-format:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
    	ext      := <get-extension> path;
      filename := <guarantee-extension(|$[pp.[ext]])> path;
      selected':= <try(?System(s, classes);!System(<conc-strings>(s, "Formatted"), classes))>selected;
      result   := <pp-debug> selected'

rules // Debugging
	
	// Prints the abstract syntax ATerm of a selection.
	debug-show-aterm:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"aterm")> path;
			result	 := selected
			
	debug-show-desugared:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			ast' := <desugar-before-analysis> ast;
			filename := <guarantee-extension(|"desugared.before.aterm")> path;
			result   := ast'
			
	// Prints the analyzed annotated abstract syntax ATerm of a selection.
	debug-show-analyzed:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"analyzed.aterm")> path;
			result	 := ast
	
	debug-show-analyzed-resolved0:
		(selected, position, ast, path, project-path) -> (filename, result)
			where
	    	language := <language>
	    	//index-setup(|language, project-path);
	    	//task-setup(|project-path)
			with
				ast' := <desugar-before-analysis> ast;
				(analyzed-ast, error*, warning*, note*) := <analyze-all(desugar-before-analysis, id, id|<language>)>(ast', path, project-path)
			with
				filename := <guarantee-extension(|"analyzed.aterm")> path;
				ast''		 := <bottomup(try(id{bottomup(try(give-task-results))}))>analyzed-ast;
				ast'''	 := <bottomup(try(id{bottomup(try(rm-annotations);try(pp-uri;string-replace(|"\"","")))}))>ast'';
				result	 := ast'''
	
	debug-show-analyzed-resolved:
		(selected, position, ast, path, project-path) -> (filename, result)
			where
	    	language := <language>
//	    	index-setup(|language, project-path);
//	    	task-setup(|project-path)
			with
				filename := <guarantee-extension(|"desugared.after.aterm")> path;
				ast'		 := <bottomup(try(id{bottomup(try(give-task-results))}))>ast;
				ast''		 := <bottomup(try(id{bottomup(try(rm-annotations);try(pp-uri;string-replace(|"\"","")))}))>ast';
				result	 := ast''
				
	debug-show-analyzed-resolved2 = debug-show-analyzed-resolved;bottomup(try(no-use-def))
				
	no-use-def: a{Use(_)} -> a{}
	no-use-def: a{Def(_)} -> a{}


	debug-show-desugared2:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"desugared.after.aterm")> path;
			ast'     := <bottomup(try(\a{_}->a{}\))>ast;
			result	 := ast'
	
	debug-show-origin2:
		(selected, position, ast, path, project-path) -> None()
		with
			ast' := <desugar-before-analysis> ast;
			<_origin-debug-all>ast'
				
	debug-show-origin:
		(target, position, ast, path, project-path) -> None()
			with
				<_origin-debug-all>target
			
	debug-index-project =
		analysis-debug-index-project(|<language>)
	debug-index-project-resolve = 
		analysis-debug-index-project-resolve(|<language>)
	debug-index-partition =
		analysis-debug-index-partition(|<language>)

	debug-task-project =
		analysis-debug-task-project(|<language>)
	debug-task-partition =
		analysis-debug-task-partition(|<language>)
	debug-task-selection =
		analysis-debug-task-selection(|<language>)
	debug-index-partition-resolve =
		analysis-debug-index-partition-resolve(|<language>)
		
	debug-project =
		analysis-debug-project(|<language>)
	debug-partition =
		analysis-debug-partition(|<language>)
		
	debug-reanalyze = 
		analysis-debug-reanalyze(|<language>)




	builder-ast(s |ext): (selected, position, ast, path, project-path) -> (filename, result)
		with // make sure the task engine is set up
    	language := <language>
//    	index-setup(|language, project-path);
 //   	task-setup(|project-path)
    with // make sure the ast is analyzed
    			if System(name{Def(_)},_) := ast then
				analyzed-ast := ast
			//else
				//(analyzed-ast, error*, warning*, note*) := analyze-all(ast, path, project-path)
			end
		with // do the actual transformations
			filename := <guarantee-extension(|ext)> path;
		 	transformed-ast   := <s> analyzed-ast;
			result := <final-desugar> transformed-ast
			
	builder(s |ext): input@(selected, position, ast, path, project-path) -> (filename, result)
		where
		 (filename, ast') := <builder-ast(s |ext)> input; 
     //ast'' := <try(?System(s, classes);!System(<conc-strings>(s, ext), classes))>  ast';
		 result := <pp-debug> ast' 


	de-annotate-builder-ast = builder-ast(de-annotate|"deannotate.boo2")
	de-annotate-builder = builder(de-annotate |"deannotate.boo2")
	
	elaborate-builder-ast = builder-ast(de-annotate;elaborate|"elaborated.boo2")
	elaborate-builder = builder(de-annotate;elaborate |"elaborated.boo2")

	heuristics-builder-ast = builder-ast(de-annotate;elaborate ; heuristics | "heuristics.boo2")
	heuristics-builder = builder(de-annotate;elaborate ; heuristics | "heuristics.boo2")
		
	wp-builder-ast = builder-ast(de-annotate;elaborate ; heuristics ; wp | "wp.boo2")
	wp-builder = builder(de-annotate;elaborate ; heuristics ; wp | "wp.boo2")
	
	simplify-builder-ast = builder-ast(de-annotate;elaborate ; heuristics ; wp ; simplify | "simplify.boo2")
	simplify-builder = builder(de-annotate;elaborate ; heuristics ; wp ; simplify | "simplify.boo2")
	
	generate-sql-builder-ast = builder-ast(de-annotate; elaborate ; heuristics ; wp ; simplify ; generate-sql | "generated.sql")
	generate-sql-builder = builder(de-annotate ; elaborate; heuristics ; wp ; simplify ; generate-sql | "generated.sql")

	generate-sql-methods-ast = builder-ast(de-annotate;elaborate ; heuristics ; wp ; simplify ; generate-sql-methods-only | "methods.generated.sql")
	generate-sql-methods = builder(de-annotate;elaborate ; heuristics ; wp ; simplify ; generate-sql-methods-only | "methods.generated.sql")

	generate-mapping-builder-ast = builder-ast(elaborate ; generate-mapping | "mapping.ttl")
	generate-mapping-builder = builder(elaborate ; generate-mapping | "mapping.ttl")


  generate-sql-builder-complete: input@(selected, position, ast, path, project-path) -> (filename, result')
  	where
  		(filename, result) := <generate-sql-builder> input;
   		stdtxtfile := <concat-strings>[project-path, "/../Booster2/sql-gen/standardStuff.sql"];	            
   		standard-text := <read-text-file> stdtxtfile;
   		result' := <concat-strings>[result, standard-text] 
   		
  generate-sql-builder-methods: input@(selected, position, ast, path, project-path) -> (filename, result')
  	where
  		(filename, result) := <generate-sql-methods> input;
   		stdtxtfile := <concat-strings>[project-path, "/../Booster2/sql-gen/standardStuff.sql"];	            
   		standard-text := <read-text-file> stdtxtfile;
   		result' := <concat-strings>[result, standard-text]  
   		 

			