module compile/relation

imports
  include/Booster2
  
  compile/expression
  compile/valueExpression

  elaborate/valueExpression

  library/abstractBoosterModel
  library/expression
  library/valueExpression
 
 rules
 	
 	

/* 	program:
		takes a relation, in the context of a class, and a method name,
		and a model, and returns a candidate program to achieve 
		the constraint as a goal			
*/


	program:
		(classname, methodname, BinRel(Path(a,b), Equal(), expression))
			-> Assign(path1, expression)
		where
			path1 := <make-old> Path(a,b);
			False() := <is-old> Path(a,b) ;
			BasicType(t) := <resolve-path-type> (classname, Path(a,b), (classname, methodname)) 

	program:
		(classname, methodname, BinRel(Path(a,b), Equal(), expression))
			-> Assign(path1, expression)
		where
			path1 := <make-old> Path(a,b);
			False() := <is-old> Path(a,b) ;
			Optional(BasicType(t)) := <resolve-path-type> (classname, Path(a,b), (classname, methodname)) 

	program:
		(classname, methodname, BinRel(Path(a,b), Equal(), expression))
			-> Assign(path1, expression)
		where
			path1 := <make-old> Path(a,b);
			False() := <is-old> Path(a,b) ;
			Set(BasicType(t)) := <resolve-path-type> (classname, Path(a,b), (classname, methodname)) 


	program:
		(classname, methodname, BinRel(Path(a,b), Equal(), expression))
			-> Assign(path1, expression)
		where
			path1 := <make-old> Path(a,b);
			False() := <is-old> Path(a,b) ;
			Class(name) := <resolve-path-type> (classname, Path(a,b), (classname, methodname));
			name2 := <lookup-set-name> name;
			<equal>(name, name2) 

	program:
		(classname, methodname, BinRel(Path(a,b), Equal(), expression))
			-> Assign(path1, expression)
		where
			path1 := <make-old> Path(a,b);
			False() := <is-old> Path(a,b) ;
			Optional(Class(name)) := <resolve-path-type> (classname, Path(a,b), (classname, methodname));
			name2 := <lookup-set-name> name;
			<equal>(name, name2) 
			
			
	program:
		(classname, methodname, BinRel(Output(o), In(), PathStart(cl,Some(Primed()))))
			-> New(Output(o), cl) 
		where
			/*log(|Warning(), "Matching new"); */
			path1 := <make-old> PathStart(cl,Some(Primed()));
			False() := <is-old> PathStart(cl,Some(Primed())) ;
			Set(Class(cl)) := <resolve-path-type> (classname, PathStart(cl,Some(Primed())), (classname, methodname))  


			

 
 /* Optional-to-Mandatory */
	program:			
		(classname, methodname, BinRel(Path(a,b), Equal(), Null()))
			-> Parallel(Assign(path3, Null()),
						Guard(BinRel(path3, NotEqual(), Null()),
							  Assign(name2,
							  		 BinOp(name2, Minus(),
							  		 	   SetExtent([path3])))))
		where
			Optional(Class(name2)) := <resolve-path-type>(classname, Path(a,b), (classname, methodname));
			name := <lookup-class-name> (name2);
			<equal>(name2, name);
			name3 := <get-path-attribute-name> (Path(a,b));
			path1 := <get-path-initial-path> (Path(a,b));
			Class(name4) := <resolve-path-type> (classname, path1, (classname, methodname));
			(name2, name6) := <lookup-opposite> ((name4, name3));
			Class(name5) := <lookup-attribute-type> ((name2, name6));
			<equal>(name4, name5);
			path3 := <make-old> (Path(a,b));
			False() := <is-old> (Path(a,b))

 /* Optional-to-Optional */
	program:			
		(classname, methodname, BinRel(Path(a,b), Equal(), Null()))
			-> Parallel(Assign(path3, Null()),
						Guard(BinRel(path3, NotEqual(), Null()),
							  Assign(Path(path3, PathComponent(name6, None())),
							  		 Null())))
		where
			Optional(Class(name2)) := <resolve-path-type>(classname, Path(a,b), (classname, methodname));
			name := <lookup-class-name> (name2);
			<equal>(name2, name);
			name3 := <get-path-attribute-name> (Path(a,b));
			path1 := <get-path-initial-path> (Path(a,b));
			Class(name4) := <resolve-path-type> (classname, path1, (classname, methodname));
			(name2, name6) := <lookup-opposite> ((name4, name3));
			Optional(Class(name5)) := <lookup-attribute-type> ((name2, name6));
			<equal> (name4, name5);
			path3 := <make-old> (Path(a,b));
			False() := <is-old> (Path(a,b))
	
 /* Optional-to-Set-valued */
	program:			
		(classname, methodname, BinRel(Path(a,b), Equal(), Null()))
			-> Parallel(Assign(path3, Null()),
						Guard(BinRel(path3, NotEqual(), Null()),
							  Assign(Path(Path(path3, 
							  		 			PathComponent(name6, None()))),
							  		 BinOp(Path(path3, 
							  		 			PathComponent(name6, None())), Minus(),  
							  		 	   SetExtent([path1])))))
		where
			Optional(Class(name2)) := <resolve-path-type>(classname, Path(a,b), (classname, methodname));
			name := <lookup-class-name> (name2);
			<equal>(name2, name);
			name3 := <get-path-attribute-name> (Path(a,b));
			path1 := <get-path-initial-path> (Path(a,b));
			Class(name4) := <resolve-path-type> (classname, path1, (classname, methodname));
			(name2, name6) := <lookup-opposite> ((name4, name3));
			Set(Class(name5)) := <lookup-attribute-type> ((name2, name6));
			<equal> (name4, name5);
			path3 := <make-old> (Path(a,b));
			False() := <is-old> (Path(a,b))		

 /* Set-valued-to-Mandatory */
	program:			
		(classname, methodname, BinRel(expression, NotIn(), Path(a,b)))
			-> Parallel(Assign(path3, BinOp(path3, Minus(), SetExtent([expression]))),
					    Assign(PathStart(name2, None()),
					    	   BinOp(PathStart(name2, None()), Minus(), 
					    	   		 SetExtent([path3]))))
		where
			Set(Class(name2)) := <resolve-path-type>(classname, Path(a,b), (classname, methodname));
			name := <lookup-class-name> (name2);
			<equal>(name2, name);
			name3 := <get-path-attribute-name> (Path(a,b));
			path1 := <get-path-initial-path> (Path(a,b));
			Class(name4) := <resolve-path-type> (classname, path1, (classname, methodname));
			(name2, name6) := <lookup-opposite> ((name4, name3));
			Class(name5) := <lookup-attribute-type> ((name2, name6));
			<equal> (name4, name5);
			path3 := <make-old> (Path(a,b));
			False() := <is-old> (Path(a,b))
			
 /* Set-valued-to-Optional */
	program:			
		(classname, methodname, BinRel(expression, NotIn(), Path(a,b)))
			-> Parallel(Assign(path3,
							   BinOp(path3, Minus(), SetExtent([expression]))),
						Assign(Path(expression, PathComponent(name6, None())),
							   Null()))
		where
			Set(Class(name2)) := <resolve-path-type>(classname, Path(a,b), (classname, methodname));
			name := <lookup-class-name> (name2);
			<equal> (name2, name);
			name3 := <get-path-attribute-name> (Path(a,b));
			path1 := <get-path-initial-path> (Path(a,b));
			Class(name4) := <resolve-path-type> (classname, path1, (classname, methodname));
			(name2, name6) := <lookup-opposite> ((name4, name3));
			Optional(Class(name5)) := <lookup-attribute-type> ((name2, name6));
			<equal> (name4, name5);
			path3 := <make-old> (Path(a,b));
			False() := <is-old> (Path(a,b))
			

 /* Set-valued-to-Set-valued */
	program:			
		(classname, methodname, BinRel(expression, NotIn(), Path(a,b)))
			-> Parallel(Assign(path3,
							   BinOp(path3, Minus(), SetExtent([expression]))),
						Assign(Path(expression, PathComponent(name6, None())),
							   BinOp(Path(expression, PathComponent(name6, None())), Minus(),  
							   		 SetExtent([path1]))))
		where
			Set(Class(name2)) := <resolve-path-type>(classname, Path(a,b), (classname, methodname));
			name := <lookup-class-name> (name2);
			<equal> (name2, name);
			name3 := <get-path-attribute-name> (Path(a,b));
			path1 := <get-path-initial-path> (Path(a,b));
			Class(name4) := <resolve-path-type> (classname, path1, (classname, methodname));
			(name2, name6) := <lookup-opposite> ((name4, name3));
			Set(Class(name5)) := <lookup-attribute-type> ((name2, name6));
			<equal> (name4, name5);
			path3 := <make-old> (Path(a,b));
			False() := <is-old> (Path(a,b))

/* Mandatory-to-Mandatory */
	program:
		(classname, methodname, BinRel(Path(a,b), Equal(), expression))
			-> Guard(BinRel(expression, NotIn(), name2), 
				Parallel(Assign(path3, expression), 
						 Assign(Path(expression,PathComponent(name6, None())),path1)))
		where
			Class(name2) := <resolve-path-type> (classname, Path(a,b), (classname, methodname));
			name := <lookup-class-name>(name2);
			<equal> (name, name2);
			name3 := <get-path-attribute-name> (Path(a,b));
			path1 := <get-path-initial-path> (Path(a,b));
			Class(name4) := <resolve-path-type>(classname, path1, (classname, methodname) );
			(name2, name6) := <lookup-opposite> ((name4, name3));
			Class(name5) := <lookup-attribute-type> ((name2, name6));
			<equal> (name4, name5);
			path3 := <make-old> (Path(a,b)) ;
			False() := <is-old> (Path(a,b))
			
/* Mandatory-to-Optional */
	program:
		(classname, methodname, BinRel(Path(a,b), Equal(), expression))
			-> Parallel(Parallel(Assign(path3, expression),
								 Assign(Path(expression, name6), path1)),
						Assign(Path(path3, PathComponent(name6, None())), Null()) )
		where
			Class(name2) := <resolve-path-type> (classname, Path(a,b), (classname, methodname));
			name := <lookup-class-name>(name2);
			<equal> (name, name2);
			name3 := <get-path-attribute-name> (Path(a,b));
			path1 := <get-path-initial-path> (Path(a,b));
			Class(name4) := <resolve-path-type>(classname, path1, (classname, methodname));
			(name2, name6) := <lookup-opposite> ((name4, name3));
			Optional(Class(name5)) := <lookup-attribute-type> ((name2, name6));
			<equal> (name4, name5);
			path3 := <make-old> (Path(a,b));
			False() := <is-old> (Path(a,b))
			
/* Mandatory-to-Set-valued */
	program:			
		(classname, methodname, BinRel(Path(a,b), Equal(), expression))
			-> Parallel(Parallel(Assign(path3, expression),
								 Assign(Path(Path(path1, PathComponent(name3, None())), 
								 			 PathComponent(name6, None())),
								 		BinOp(Path(Path(path1, PathComponent(name3, None())),  
								 	    	  	PathComponent(name6, None())), Minus(), 
								 	    	  SetExtent([path1])))),
						Assign(Path(expression, PathComponent(name6, None())), 
							   BinOp(Path(expression, PathComponent(name6, None())), Union(),
							   		 SetExtent([path1]))))
								 
		where
			Class(name2) := <resolve-path-type> (classname, Path(a,b), (classname, methodname));
			name := <lookup-class-name>(name2);
			<equal> (name, name2);
			name3 := <get-path-attribute-name>(Path(a,b));
			path1 := <get-path-initial-path> (Path(a,b));
			Class(name4) := <resolve-path-type> (classname, path1, (classname, methodname));
			(name2, name6) := <lookup-opposite> ((name4, name3));
			Set(Class(name5)) := <lookup-attribute-type> ((name2, name6));
			<equal>(name4, name5);
			path3 := <make-old> (Path(a,b));
			False() := <is-old> (Path(a,b))

/* Optional-to-mandatory */
	program:			
		(classname, methodname, BinRel(Path(a,b), Equal(), expression))
			-> Guard(BinRel(path3, NotEqual(), name2),
					 Parallel(Parallel(Assign(path3, expression),
					 		  		   Choice(Guard(And(BinRel(path3, NotEqual(), Null()),
					 		  			                BinRel(path3, NotEqual(), expression)),
					 		  				        Assign(name2, BinOp(name2, Minus(), 
					 		  							  		        SetExtent([Path(path1, 
					 		  											                PathComponent(name3, None()))])))),
					 		  			      Guard(Or(BinRel(path3, Equal(), Null()),
					 		  			      		   BinRel(path3, Equal(), expression)),
					 		  			      		Skip()))),
					 		  Assign(Path(expression, PathComponent(name6, None())),
					 		  	     path1)))
		where
			Optional(Class(name2)) := <resolve-path-type> (classname, Path(a,b), (classname, methodname));
			name := <lookup-class-name>(name2);
			<equal>(name, name2);
			name3 := <get-path-attribute-name> (Path(a,b));
			path1 := <get-path-initial-path>(Path(a,b));	
			Class(name4) := <resolve-path-type> (classname, path1, (classname, methodname));
			(name2, name6) := <lookup-opposite> ((name4, name3));
			Class(name5) := <lookup-attribute-type> ((name2, name6));
			<equal>(name4, name5);
			path3 := <make-old>(Path(a,b));
			False() := <is-old> (Path(a,b))
			
/* Optional-to-optional */
	program:			
		(classname, methodname, BinRel(Path(a,b), Equal(), expression))
			-> Parallel(Parallel(Assign(path3, expression),
								 Choice(Guard(And(BinRel(path3, NotEqual(), Null()),
								 				  BinRel(path3, NotEqual(), expression)),
								 			  Assign(Path(Path(path1, PathComponent(name3, None())),
								 			  			  PathComponent(name6, None())),
								 			  		 Null())),
								 		Guard(Or(BinRel(path3, Equal(), Null()),
								 				 BinRel(path3, Equal(), expression)),
								 			  Skip()))),
						Parallel(Choice(Guard(And(BinRel(Path(expression, PathComponent(name6, None())),
														   NotEqual(), Null()),
												  BinRel(Path(expression, PathComponent(name6, None())),
														   NotEqual(), path1)),
											  Assign(Path(Path(expression, PathComponent(name6, None())),
											  			  PathComponent(name3, None())),
											  		 Null())),
										Guard(Or(BinRel(Path(expression, PathComponent(name6, None())),
													   Equal(), Null()),
												 BinRel(Path(expression, PathComponent(name6, None())),
													   Equal(), path1)),
											  Skip())),
								 Assign(Path(expression, PathComponent(name6, None())),
								 		path1)))
		where
			Optional(Class(name2)) := <resolve-path-type> (classname, Path(a,b), (classname, methodname));
			name := <lookup-class-name>(name2);
			<equal>(name, name2);
			name3 := <get-path-attribute-name>(Path(a,b));
			path1 := <get-path-initial-path> (Path(a,b));
			Class(name4) := <resolve-path-type> (classname, path1, (classname, methodname));
			(name2, name6) := <lookup-opposite>((name4, name3));
			Optional(Class(name5)) := <lookup-attribute-type> ((name2, name6));
			<equal>(name4, name5);
			path3 := <make-old> (Path(a,b));
			False() := <is-old> (Path(a,b)) 	
	
/* Optional-to-Set-valued */
	program:			
		(classname, methodname, BinRel(Path(a,b), Equal(), expression))
			-> 	Parallel(
			  		Parallel(
			  			Assign(path3, expression),
						Choice(
							Guard(
								And(
									BinRel(path3, NotEqual(), Null()),
								 	BinRel(path3, NotEqual(), expression)),
								Assign(
									Path(
										Path(path1, PathComponent(name3,None())), 
								 		PathComponent(name6, None())),
								 	BinOp(
								 		Path(
								 			Path(path1, PathComponent(name3,None())), 
								 			PathComponent(name6, None())), Minus(), 
								 	SetExtent([path1])))),
							Guard(
								Or(
									BinRel(path3, Equal(), Null()),
								 	BinRel(path3, Equal(), expression)),
					  		    Skip()))),
					Assign(
						Path(expression, PathComponent(name6, None())),
						BinOp(
							Path(expression, PathComponent(name6, None())), Union(), 
							SetExtent([path1]))))
			
		where
			Optional(Class(name2)) := <resolve-path-type> (classname, Path(a,b), (classname, methodname));
			name := <lookup-class-name>(name2);
			<equal>(name, name2);
			name3 := <get-path-attribute-name>(Path(a,b));
			path1 := <get-path-initial-path> (Path(a,b));
			Class(name4) := <resolve-path-type> (classname, path1, (classname, methodname));
			(name2, name6) := <lookup-opposite> ((name4, name3));
			Set(Class(name5)) := <lookup-attribute-type> ((name2, name6));
			<equal>(name4, name5);
			path3 := <make-old> (Path(a,b));
			False() := <is-old> (Path(a,b))

		
/* Set-valued-to-Mandatory */
	program:			
		(classname, methodname, BinRel(expression, In(), Path(a,b)))
			-> (Guard(
					BinRel(expression, NotIn(), path3), 
					Parallel(
							Parallel(
									Assign(
										path3,
							  			BinOp(path3, Union(), SetExtent([expression]))), 
									Assign(
										Path(expression, PathComponent(name6, None())),
							   			path1)),
							Assign(Path(Path(expression, PathComponent(name6, None())),
								 	   			   PathComponent(name3, None())),
								 	   		  BinOp(Path(Path(expression, PathComponent(name6, None())),
								 	   			   	     PathComponent(name3, None())), Minus(), 
								 	   			   	SetExtent([expression]))))))
		where
			Set(Class(name2)) := <resolve-path-type> (classname, Path(a,b), (classname, methodname));
			name := <lookup-class-name>(name2);
			<equal>(name, name2);
			name3 := <get-path-attribute-name> (Path(a,b));
			path1 := <get-path-initial-path> (Path(a,b));
			Class(name4) := <resolve-path-type> (classname, path1, (classname, methodname));
			(name2, name6) := <lookup-opposite> ((name4, name3));
			Class(name5) := <lookup-attribute-type> ((name2, name6));
			<equal>(name4, name5);
			path3 := <make-old> (Path(a,b));
			False() := <is-old> (Path(a,b))

/* Set-valued-to-Optional */
	program:			
		(classname, methodname, BinRel(expression, In(), Path(a,b)))
			-> Parallel(Parallel(Assign(path3,
										BinOp(path3, Union(), SetExtent([expression]))),
								 Guard(BinRel(Path(expression, 
								 					 PathComponent(name6, None())),
								 				NotEqual(), Null()),
								 	   Assign(Path(Path(expression, PathComponent(name6, None())),
								 	   			   PathComponent(name3, None())),
								 	   		  BinOp(Path(Path(expression, PathComponent(name6, None())),
								 	   			   	     PathComponent(name3, None())),
								 	   			   	Minus(), 
								 	   			   	SetExtent([Path(expression, PathComponent(name6, None()))]))))),
						Assign(Path(expression, PathComponent(name6, None())),
							   path1))
		where
			Set(Class(name2)) := <resolve-path-type>(classname, Path(a,b), (classname, methodname));
			name := <lookup-class-name>(name2);
			<equal>(name, name2);
			name3 := <get-path-attribute-name> (Path(a,b));
			path1 := <get-path-initial-path> (Path(a,b));
			Class(name4) := <resolve-path-type> (classname, path1, (classname, methodname));
			(name2, name6) := <lookup-opposite> ((name4, name3));
			Optional(Class(name5)) := <lookup-attribute-type> ((name2, name6));
			<equal>(name4, name5);
			path3 := <make-old> (Path(a,b));
			False() := <is-old> (Path(a,b))
		
/* Set-valued-to-Set-valued */
	program:			
		(classname, methodname, BinRel(expression, In(), Path(a,b)))
			-> Parallel(Assign(path3,
							   BinOp(path3, Union(), 
							   		 SetExtent([expression]))),
						Assign(Path(expression, PathComponent(name6, None())),
							   BinOp(Path(expression, PathComponent(name6, None())), Union(), 
							   		 SetExtent([path1]))))
		where
			Set(Class(name2)) := <resolve-path-type>(classname, Path(a,b), (classname, methodname));
			name := <lookup-class-name>(name2);
			<equal>(name2, name);
			name3 := <get-path-attribute-name> (Path(a,b));
			path1 := <get-path-initial-path> (Path(a,b));
			Class(name4) := <resolve-path-type> (classname, path1, (classname, methodname));
			(name2, name6) := <lookup-opposite> ((name4, name3));
			Set(Class(name5)) := <lookup-attribute-type> ((name2, name6));
			<equal>(name4, name5);
			path3 := <make-old> (Path(a,b));
			False() := <is-old> (Path(a,b))

					
/* Default */

	program:
		(classname, methodname, relation1)
			-> Guard(relation2, Skip())
		where
			relation2 := <make-old> (relation1);
			log(|Warning(), "cannot determine program", relation1)

			
			

/* 	is-defined:
		takes an expression in the context of a model, a classname, 
		and a methodname, and returns a constraint
*/			
			
	is-defined:
		(classname, method, BinRel(expr1, binrel, expr2))
			-> And(And(constraint1, constraint2), BinRel(expr1, binrel, expr2))
		where
			constraint1 := <is-defined> (classname, method, expr1);
			constraint2 := <is-defined> (classname, method, expr2)
		


/* 	make-old:
		takes a relation, and returns its representation in the 
		pre-state of a method 			
*/

	make-old:
		BinRel(expr1, binrel, expr2)
			-> BinRel(expr3, binrel, expr4)
		where
			expr3 := <make-old> expr1;
			expr4 := <make-old> expr2

