module parse

imports
  include/Booster2
  
  
rules
	

/**
	Main Parse function:
		This is the main, top-level transformation.
		It matches a system, and returns it.
		
		It first initializes the lookup table.  This simplifies any function which uses
		the lookup table: any lookup that is performed is guaranteed to succeed, even 
		if no data has been stored.
		
		Next it traverses the model and pulls out the relevant structural information.  
		It uses the library functions defined below.
		
		Finally, the structural data is used populate the initial state of the lookup 
		table.  
		
**/

	parse: 
   		System(name, components) -> 
   				System(name, components)
	with
   		// retrieve the system information, component by component 
   		sets := <map(organise-set)> <getSets> components;
   		classes := <getClasses> components;
   		classes' := <map(organise-class)> classes;
		attributes := <map(organise-attribute)><concat><map(arrangeClassAttributes)> classes;
		methods := <map(organise-method)><concat><map(arrangeClassMethods)> classes;

		// workflow begin
		//wfs := <map(getClassWfs)> classes;
		seqWorkflows := <map(organise-seqWf)><concat><map(arrangeClassSeqWorkflows)> classes; 
		parWorkflows := <map(organise-parWf)><concat><map(arrangeClassParWorkflows)> classes; 
		// workflow end

		// insert all the retrieved values into the lookup table
		// IMPORTANT: Any table not initialised here might not be accessible 
		// when it is later read (for example, as part of a table output)
		
		rules(
			LookupTable :+ "Name" ->  name
			LookupTable :+ "SetDef" -> sets 
			LookupTable :+ "Class" ->  classes'
			LookupTable :+ "Attribute" ->  attributes
			LookupTable :+ "Method" ->  methods
			// workflow begin
			LookupTable :+ "SeqWorkflows" -> seqWorkflows
			LookupTable :+ "ParWorkflows" -> parWorkflows
			LookupTable :+ "PrecondParWorkflows" -> []
			// workflow end
		)




	// Methods for retrieving different types of system components
	getClasses = filter(?Class(_,_,_))
	getSets = filter(?SetDef(_,_))
	
	// Methods for retrieving different types of class components
	getAttributes = <concat> <filter(\ Attributes(attrs) -> attrs \)>
	getMethods = <concat> <filter(\ Methods(meths) -> meths \)>
	getInvariants = <concat> <filter(\ Invariant(invs) -> invs \)>

	getClassComponents = \ Class(_, _, c) -> c \
	getClassName = \ Class(n, _, _) -> n \
	arrangeClassAttributes = \ Class(n, e, c) -> <cart(id)>([n], <getClassComponents; getAttributes> Class(n, e, c)) \
	arrangeClassMethods = \ Class(n, e, c) -> <cart(id)>([n], <getClassComponents; getMethods> Class(n, e, c)) \
	
	// workflow begin
	arrangeClassSeqWorkflows = \ Class(n, e, c) -> <cart(id)>([n], <getClassComponents; getSeqWfs> Class(n, e, c)) \
    arrangeClassParWorkflows = \ Class(n, e, c) -> <cart(id)>([n], <getClassComponents; getParWfs> Class(n, e, c)) \
	// wokflow end
		
	organise-set:
		SetDef(name, elements) -> (name, elements)
	
	organise-class:
		Class(name, extends, classComponents)
			-> (name, (immsubclasses, allsubclasses, attributes, methods, constraints, workflows))
		where
			immsubclasses := <\ None() -> [] \ <+ \ Some(Extend(es)) -> <map(\Extension(c) -> c \)> es \> extends;
			allsubclasses := [];
			attributes := <map(\ Attribute(name, _,_) -> name \)><getAttributes> classComponents;			
			methods := <map(\ Method(name, _ ) -> name \)><getMethods> classComponents;	
			constraints := <getInvariants> classComponents;
			  seqWfNames := <map(\ SeqWf(name, _ ) -> name \)> <getSeqWfs> classComponents;
			  parWfNames := <map(\ ParWf(name, _ ) -> name \)> <getParWfs> classComponents;
			  workflows := (seqWfNames,parWfNames) // one list for sequential and one for concurrent workflows 
	
	
 	organise-attribute:
 		(cname, Attribute(attName, decorators, type))
 			-> ((cname, attName), (decorators, type', opposite, minmult, maxmult))
 		where
 			type' := <get-minimal-type> type;
 			opposite := <get-opposite> type;
 			minmult := <get-min-mult> type;
 			maxmult := <get-max-mult> type
 	organise-attribute:
 		something -> something
 		where
 			log(|Error(), something)
 			 

 	organise-method:
 		(className, Method(methName, constraint))
 			-> ((className, methName), (constraint, guardedCommand, exts, False(), [], []))
 		where
 			guardedCommand := ();
 			exts := []
			
			


// workflow begin
			
/* getSeq/ParWorfklows

*/
    // make a usual list from a concurrent workflow 
	makeParList: Single(name) -> [name]
	makeParList: Multiple(name,rest) -> <conc>([name],<makeParList> rest)

	organise-seqWf : (cname, SeqWf(n,expr)) -> ((cname,n),expr)
	organise-parWf : (cname, ParWf(n,expr)) -> ((cname,n),<makeParList> expr)
	
    getWfs = <concat> <filter(\ Workflows(wfs) -> wfs \)>

    getSeqWfs = <filter(\ SeqWf(n,expr) -> SeqWf(n,expr) \)> <getWfs>
    getParWfs = <filter(\ ParWf(n,expr) -> ParWf(n,expr) \)> <getWfs>
		 
// workflow end

		
 /* get-max-mult:
 		Takes a TypeDecl and returns its maximum multiplicity	
 
 */
 
	get-max-mult: 
		BasicType(t) -> 1
				
	get-max-mult:
		UniDirectional(name) -> 1
	
	get-max-mult:
		BiDirectional(name1,name2) -> 1
		
	get-max-mult:
		Optional(typedecl) -> 1
		
	get-max-mult:
		Set(typedecl, mult) -> x
	with x := <get-max> mult

 /* get-min-mult:
 		Takes a TypeDecl and returns its minimum multiplicity	
  */
 
	get-min-mult: 
		BasicType(t) -> 1
		
	get-min-mult:
		UniDirectional(name) -> 1
	
	get-min-mult:
		BiDirectional(name1,name2) -> 1
		
	get-min-mult:
		Optional(typedecl) -> 0
		
	get-min-mult:
		Set(typedecl, mult) -> x
	with x := <get-min> mult

 /* get-opposite:
 		Takes a TypeDecl and returns its opposite attribute	
  */
 
	get-opposite: 
		BasicType(t) -> ()
				
	get-opposite:
		UniDirectional(name) -> ()
	
	get-opposite:
		BiDirectional(name1,name2) -> (name1, name2)
		
	get-opposite:
		Optional(typedecl) -> x
	with x := <get-opposite> typedecl
		
	get-opposite:
		Set(typedecl, mult) -> x
	with x := <get-opposite> typedecl

/*	get-max:
		Gets the maximum of this multiplicity
	
*/ 

	get-max:
		MultMinAndMax(a,b) -> <string-to-int>b
		
		
	get-max:
		MultJustMax(a) -> <string-to-int>a
		
	get-max:
		MultJustMin(a) -> "*"
		
	get-max:
		MultSingle(a) -> <string-to-int>a
		
	get-max:
		MultAny() -> "*"
		
/*	get-min:
		Gets the minimum of this multiplicity
	
*/ 

	get-min:
		MultMinAndMax(a,b) -> <string-to-int>a
		
		
	get-min:
		MultJustMax(a) -> 0
		
	get-min:
		MultJustMin(a) -> <string-to-int>a
		
	get-min:
		MultSingle(a) -> <string-to-int>a
		
	get-min:
		MultAny() -> 0
		
		
		
/* get-minimal-type:
 		Takes a TypeDecl and returns its minimal type	
 
 */
 

	get-minimal-type:
		BasicType(t) -> BasicType(t)

		
	get-minimal-type:
		UniDirectional(name) -> Reference(name)
	
	get-minimal-type:
		BiDirectional(name1,name2) -> Reference(name1)
		
	get-minimal-type:
		Optional(typedecl) -> Optional(type)
	with
		type := <get-minimal-type> typedecl
		
	get-minimal-type:
		Set(typedecl, mult) -> Set(type)
	with
		type := <get-minimal-type> typedecl
