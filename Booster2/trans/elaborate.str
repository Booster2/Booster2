module elaborate

imports

include/Booster2  
  
library/lookupTable
library/binRel
library/binOp
library/unOp
library/basicTypes

rules
	
	
	elaborate:
		system -> system
		where
			<unrollSubclasses> system;
			<filter(mark-method-as-done)><LookupTable>"Method";
			<repeat( (inheritance-attributes <+ inheritance-methods <+ inheritance-invariants <+ insert-this <+ type-inference  <+  method-expansion ))> system;
			<expandSeqWfs> system;
			<type-inference-wf> system
			
			
	unrollSubclasses = <map((\ (c, cdef) -> c \) ; unrollSubclass)><LookupTable> "Class"		
	updateDone = replaceMethod(\ ((cn, mn), (c, gc', exts', done, ins, outs)) -> ((cn, mn), (c, gc', exts', True(), ins, outs)) \)
	
			
	unrollSubclass: 
	cname -> allSubClasses 
		where 
			allSubClasses := <nub><concat><\ set -> <union>([set], <map(unrollSubclass)> set) \><\ (is,as,a,m,c,w) -> is \><lookup>(cname, <LookupTable> "Class");
			<replaceClass(\ (cname, (is,as,a,m,c,w)) -> (cname, (is,allSubClasses,a,m,c,w)) \)> cname 		

	inheritance-attributes:
		system -> system
			where
		atts := <filter(attributes-can-be-percolated)> <LookupTable> "Attribute";
		<not(equal)>(atts, []);
		<map(percolate-attribute)> atts


	attributes-can-be-percolated:
		((cname, aname), adef) 
			-> ((cname, aname), (cnames, adef))
		where
			cnames := <concat><filter(\ (n, (is,as,a,m,c,w)) -> [n] where <elem>(cname, as); <not(elem)>(aname, a)\)> <LookupTable> "Class";
			<not(equal)> (cnames, [])

	
	percolate-attribute:
		((cname, aname), (cnames, adef))
			-> []
		where
			<map(\cname' -> <addClassAttribute> (cname', aname, adef) \)> cnames
		

	inheritance-methods:
		system -> system
			where
		newMethods := <map(try(\((cname, mname),(c,gc,e,False(), ins, outs)) -> ((cname, mname),(c,gc,e,True(), ins, outs)) 
							where [] := <filter(\ cname' -> <lookup>((cname', mname), <LookupTable>"Method") \)>
										<\(is,as,a,m,c,w) -> as\><lookup>(cname, <LookupTable>"Class") \))><LookupTable> "Method";
		rules(
			LookupTable :+ "Method" -> newMethods
		);
		
		meths := <filter(methods-can-be-percolated)> <LookupTable> "Method";
		<not(equal)>(meths, []);
		<map(percolate-method)> meths;
		<filter(mark-method-as-done)> <LookupTable> "Method"

		

	mark-method-as-done:
		((cname, mname),(constraint, gc, exts, False(), inputs, outputs))
			-> ((cname, mname), (constraint, gc, exts, False(), inputs, outputs))
		where
			[] := <filter(\ cname' -> cname' where <lookup>((cname', mname), <LookupTable> "Method")\)><\ (is, as, atts, meths, cons, wfs) -> as \><lookup> (cname, <LookupTable> "Class");
			<updateDone> (cname, mname)

	mark-method-as-done:
		((cname, mname), (constraint, gc, exts, False(), inputs, outputs))
			-> ((cname, mname), (constraint, gc, exts, False(), inputs, outputs))
		where
			submethod-classes := <filter(\ cname' -> cname' where <lookup>((cname', mname), <LookupTable> "Method")\)><\ (is, as, atts, meths, cons, wfs) -> as \><lookup> (cname, <LookupTable> "Class");
			<set-eq>(exts, submethod-classes);
			<updateDone> (cname, mname)


	methods-can-be-percolated:
		((cname, mname), (constraint, gc, exts, True(), inputs, outputs)) 
			-> ((cname, mname), (cnames, constraint, gc, exts, True(), inputs, outputs))
		where
			cnames := <concat>
				<filter(\ 
					(n, (is,as,a,m,c,w)) -> [n] 
						where <elem>(cname, is); 
							  (<not(elem)>(mname, m) <+ 
							   <not(elem)>(cname, <\ (constraint, gc, exts, False(), inputs, outputs) -> exts \><lookup>((n, mname), <LookupTable>"Method")))\)> 
							   	<LookupTable> "Class";
			<not(equal)> (cnames, [])

	
	percolate-method:
		((cname, mname), (cnames, c,gc,e, done, inputs, outputs))
			-> []
		where
			<map(\ cname' -> cname' where
				submethods := <filter(\ (cname'', mname'') -> (cname'', mname'') where (c',gc',exts',False(), inputs, outputs) := <lookup>((cname'', mname''),<LookupTable> "Method")  \)><\ (is,as,a,m,c,w) -> <cart(id)>(as,[mname])\> <lookup>(cname', <LookupTable> "Class"); 
				<equal>([],submethods);
					(<addClassMethod> (cname', mname, (c, gc, <union>(e, [cname]), done, inputs, outputs)) 
					<+ <updateClassMethod> (cname', mname, c, cname, e, inputs, outputs))
			 \)> cnames

		

	inheritance-invariants:
		system -> system
			where
		invs := <filter(invariants-can-be-percolated)><concat><map(\ (cname, (is,as,a,m,c,w)) -> <cart(id)>([cname], c)\)> <LookupTable> "Class";
		<not(equal)>(invs, []);
		<map(percolate-invariant)> invs 
			
			
	invariants-can-be-percolated:
		(cname, inv) 
			-> (cname, cnames, inv)
		where
			cnames := <concat><filter(\ (n, (is,as,a,m,c,w)) -> [n] where <elem>(cname, as); <not(elem)>(inv, c)\)> <LookupTable> "Class";
			<not(equal)> (cnames, [])
			
			
	percolate-invariant:
		(cname, cnames, inv)
			-> []
		where
			<map(\cname' -> <addClassInvariant> (cname', inv) \)> cnames		


	type-inference:
		system -> system
			where
		oldMethods := <LookupTable> "Method";
		methodConstraints := <map(\((cname, mname),(constraint,gc,e,True(), is,os)) -> (cname, mname, constraint) \)> oldMethods;
		<map(do-type-inference)> methodConstraints;
		newMethods := <LookupTable> "Method";
		<not(equal)> (oldMethods, newMethods)
			
			
	do-type-inference:
		(cname, mname,c) -> (cname, mname, c')
			where
				c' := <topdown(try(
								try(\ term -> ((cname, mname), term) \); 
										( infer-types 
										<+ induce-types
										<+ record-parameter) ))> c  ;
				(<equal>(c, c') <+ <updateMethodConstraint> (cname, mname, c'))
										
			
	infer-types:
		(context, BasicValue(Integer(i)) {} ) -> BasicValue(Integer(i)) { Optional(BasicType(Int())) }

	infer-types:
		(context, BasicValue(String(s)) {} ) -> BasicValue(String(s)) { Optional(BasicType(String())) }

	infer-types:
		(context, TypeExtent(Boolean()) {} ) -> TypeExtent(Boolean()) { Set(BasicType(Boolean())) }

	infer-types:
		(context, TypeExtent(String()) {} ) -> TypeExtent(String()) { Set(BasicType(String())) }

	infer-types:
		(context, TypeExtent(Int()) {} ) -> TypeExtent(Int()) { Set(BasicType(Int())) }

	infer-types:
		(context, TypeExtent(DateTime()) {} ) -> TypeExtent(DateTime()) { Set(BasicType(DateTime())) }

	infer-types:
		((cname, mname), Input(s) {})
			-> Input(s) {type}
		where
			type := <getInputType>(cname, mname, s)

	infer-types:
		((cname, mname), Output(s) {})
			-> Output(s) {type}
		where
		type := <getOutputType>(cname, mname, s)

	infer-types:
		((cname, mname), This() {} )
			-> This() {Reference(cname)}

	infer-types:
		((cname, mname), ThisPrimed() {})
			-> ThisPrimed() {Reference(cname)}

	infer-types:
		((cname, mname), PathStart(att, maybePrimed) )
			-> PathStart(att, maybePrimed) {type}
		where
			type := <\ (ds,t,o,min,max) -> t\><lookup>((cname, att), <LookupTable>"Attribute")

	infer-types:
		((cname, mname), PathStart(cname', maybePrimed) )
			-> PathStart(cname', maybePrimed) {Set(Reference(cname'))}
		where
			<lookup>(cname, <LookupTable>"Class")

	infer-types:
		((cname, mname), PathStart(sname, maybePrimed) )
			-> PathStart(sname, maybePrimed) {Set(Reference(sname))}
		where
			<lookup>(sname, <LookupTable>"Set")


	infer-types:
		(context, Path(ps {Reference(c)}, PathComponent(attname, maybeprimed) ))
			-> Path(ps {Reference(c)}, PathComponent(attname, maybeprimed)) { type}
		where
			type := <\ (ds,t,o,min,max) -> t\><lookup>((c, attname), <LookupTable>"Attribute")




	// Binary relations: pushing types left to right
	induce-types:
		(context, BinRel(lexpr {type}, op,  rexpr {}))
			-> BinRel(lexpr {type}, op,  rexpr {type'})
		where
			type' := <binrel-ltor-type> (op, type)
		
	// Binary relations: pushing types right to left
	induce-types:
		(context, BinRel(lexpr {}, op,  rexpr {type}))
			-> BinRel(lexpr {type'}, op,  rexpr {type})
		where
			type' := <binrel-rtol-type> (op, type)
		


	// Binary operations: pushing types left to right
	induce-types:
		(context, BinOp(lexpr {type}, op,  rexpr {}) {})
			-> BinOp(lexpr {type}, op,  rexpr {type'}) {type''}
		where
			type' := <binop-ltor-type> (op, type);
			type'' := <binop-btot-type> (op, type, type')
			
	// Binary operations: pushing types right to left
	induce-types:
		(context, BinOp(lexpr {}, op,  rexpr {type}) {})
			-> BinOp(lexpr {type'}, op,  rexpr {type}) {type''}
		where
			type' := <binop-rtol-type> (op, type);
			type'' := <binop-btot-type> (op, type, type')

	// Binary operations: pushing types top to bottom
	induce-types:
		(context, BinOp(lexpr {}, op,  rexpr {}) {type})
			-> BinOp(lexpr {type'}, op,  rexpr {type''}) {type}
		where
			(type', type'') := <binop-ttob-type> (op, type)

	// Unary operations: pushing types bottom to top
	induce-types:
		(context, UnOp(op, expr {type}) {})
			-> UnOp(op, expr {type}) {type}

	// Unary operations: pushing types top to bottom
	induce-types:
		(context, UnOp(op, expr {}) {type})
			-> UnOp(op, expr {type}) {type}
		
	


			
	record-parameter:
		((cname, mname), Input(s) {type})
			-> Input(s) {type}
		where
			<is-more-general-than> (type, <getInputType>(cname, mname, s));
			<addInput> (cname, mname, s, type)

	record-parameter:
		((cname, mname), This() {type})
			-> This() {type}
		where
			<addInput> (cname, mname, "this", type)

	record-parameter:
		((cname, mname), Input(s) {type})
			-> Input(s) {type}
		where
			<not(getInputType)>(cname, mname, s);
			<addInput> (cname, mname, s, type)

	record-parameter:
		((cname, mname), Output(s) {type})
			-> Output(s) {type}
		where
			<is-more-general-than> (type, <getOutputType>(cname, mname, s));
			<addOutput> (cname, mname, s, type)

	record-parameter:
		((cname, mname), Output(s) {type})
			-> Output(s) {type}
		where
			<not(getOutputType)>(cname, mname, s);
			<addOutput> (cname, mname, s, type)
			

	method-expansion:
		system -> system
			where
		oldMethods := <LookupTable> "Method";
		methodConstraints := <map(\((cname, mname),(constraint,gc,e,True(), is,os)) -> (cname, mname, constraint) \)> oldMethods;
		<map(do-method-expansion)> methodConstraints;
		newMethods := <LookupTable> "Method";
		<not(equal)> (oldMethods, newMethods)

	do-method-expansion:
		(cname, mname,c) -> (cname, mname, c')
			where
				c' := <topdown(try(\ trm -> <expand-method> (cname, trm) \) )> c  ;
				(<equal>(c, c') <+ <updateMethodConstraint> (cname, mname, c'))


	expand-method:
		(thisclassname, MethodReference(Path(path {Reference(cname)}, PathComponent(mname, None())) {}, substs))
			-> constraint'
		where
			(constraint,gc,e,f, is,os) := <lookup>((cname, mname), <LookupTable> "Method");
			substs' := <union>(substs, [(This(), path{Reference(cname)})]);
			constraint' := <literal-substitute> (constraint, substs')
		
	literal-substitute:
		(constraint, substs) 
			-> constraint'
		where 
			substs' := <map(\ (t, e) -> (t {} , e)\)> substs;
			constraint' := <bottomup(try(\ trm -> <lookup>(trm {} , substs')\))> constraint

	insert-this:
		system -> system
			where
		oldMethods := <LookupTable> "Method";
		methodConstraints := <map(\((cname, mname),(constraint,gc,e,True(), is,os)) -> (cname, mname, constraint) \)> oldMethods;
		newMethodConstraints := <map(do-insert-this)> methodConstraints;
		<not(equal)>(methodConstraints, newMethodConstraints)



	do-insert-this:
		(cname, mname,c) -> (cname, mname, c')
			where
				c' := <topdown(try(\ PathStart(aname, maybePrimed) -> Path(This(), PathComponent(aname, maybePrimed)) 
							where <lookup>((cname, aname), <LookupTable> "Attribute") <+ <lookup>((cname, aname), <LookupTable> "Method") \))> c ;
				<updateMethodConstraint> (cname, mname, c')
	
			
  
  // Workflow Begin
    // try to apply strategy s as many times as possible to subterms
    outermost-many(s) = repeat(sometd(s))	
    
    // calculates the types of terms in guards within sequential workflows
    type-inference-wf: system -> system
	where
		seqWfs := <LookupTable> "SeqWorkflows";
		seqWfs' := <map(\ ((cname,wfname),wfexpr) -> ((cname,wfname),<topdown(try(type_inference_guards(!cname,!wfname)))> wfexpr) \)> seqWfs;
		rules(
			LookupTable :+ "SeqWorkflows" -> seqWfs'
		)
		
	// include 'this' before attributes and perform the type calculation
	type_inference_guards(cname,wfname): Normal(constr) -> Normal(constr'')
	where
		constr'  := <topdown(try(\ PathStart(aname, maybePrimed) -> Path(This(), PathComponent(aname, maybePrimed)) 
							where <lookup>((<cname>, aname), <LookupTable> "Attribute") \))> constr;
		constr'' := <outermost-many( type_loop(infer-types <+ induce-types,cname,wfname) )> constr'
		                        
	type_loop(s,cname,wfname): term -> term'
	where
		// actually it is a bit dirty to provide "wfname" here;
		// this only works because we assume that in guards (within workflows), 
		// no inputs or outputs are used
		term' := <s> ((<cname>, <wfname>), term);
		not(<equal>(term,term'))
  
  
    expandSeqWfs : system -> system
    where
    	classes := <LookupTable> "Class";
		<map(expandClassSeqWfs)> classes;
		
		rules(
			ExpandedLookupTable :+ "tmp" -> []
		);
		
		expWf := <map(\(cname,prop) -> <cart(id)>([cname], <ExpandedLookupTable> cname) \)> classes;
		expWf':= <map(organise-seqWf_elab)><concat>expWf;
		rules(
			LookupTable :+ "SeqWorkflows" -> expWf'
		)
		
	organise-seqWf_elab : (cname,(n,expr)) -> ((cname,n),expr)
		
		
	expandClassSeqWfs: (cname,prop) -> (cname,prop)
	where
		classSeqWfs := <filter(\ ((name,wfname), expr) -> SeqWf(wfname,expr) where <eq>(name,cname) \)> (<LookupTable> "SeqWorkflows");
		<expandSeqWfList> (cname,classSeqWfs)
		
    expandSeqWfList: (cname, seqwfs) -> (cname, seqwfs)
    where
    	rules(
    		ExpandedLookupTable :+ "tmp" -> []
    	); 
    	<outermost-many(expandSeqWf)> seqwfs;
    	blub := <ExpandedLookupTable> "tmp";
    	rules(
    		ExpandedLookupTable :+ cname -> blub		// if blub was exchanged with <ExpandedLookupTable> "tmp" then
    												 	// ExpandedLookupTable "cname" holds a reference on <ExpandedLookupTable> "tmp",
    												 	// which causes really strange behaviour when tmp changes!!!
    	)
  
	expandSeqWf: WorkflowReference(wfr) -> wf
	where
		wf := <lookup> (wfr,(<ExpandedLookupTable> "tmp"))
				
	expandSeqWf: SeqWf(name,definition) -> (name,definition)
	where not(<lookup> (name,(<ExpandedLookupTable> "tmp")));
		<fullyExpanded> definition;
		wfs := <ExpandedLookupTable> "tmp";
		newwfs := <conc>(wfs,[(name, definition)]);
    	rules( 
	      	ExpandedLookupTable :+ "tmp" -> newwfs
		)
	      
	      
	      
	// checks whether a sequential workflow is fully expanded, i.e., it does not contain any workflow references
	fullyExpanded: Skip() -> Skip()
	fullyExpanded: Choice(ga1,wf1,ga2,wf2) -> Choice(ga1,wf1,ga2,wf2)
	where <fullyExpanded> wf1;
	      <fullyExpanded> wf2
	fullyExpanded: Wait(xs,wf) -> Wait(xs,wf)
	where <fullyExpanded> wf
	fullyExpanded: Prefix(ga,wf) -> Prefix(ga,wf)
	where <fullyExpanded> wf
		      
  // Workflow End
  
