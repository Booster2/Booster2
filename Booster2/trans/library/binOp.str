module library/binOp

imports
  include/Booster2
  library/basicTypes  
 
 rules


/**** 
The default is, of course, that for any binary expression operator, the types are the same
and that the relationship is symmetrical 
****/	

binop-rtol-type:
	(op, type) -> type	

binop-ltor-type:
	(op, type) -> type	

/****
If we have both types of the expressions in an operator, what is the type of the overall expression?
(bottom-to-top)
And if we have the type of the overall expression, what are the types of the component expressions?
(top-to-bottom)
****/

binop-btot-type:
	(op, type1, type2) -> 
		type1	
	where
		<is-eq-more-general-than>(type1, type2)

binop-btot-type:
	(op, type1, type2) -> 
		type2
	where
		<is-eq-more-general-than>(type2, type1)

binop-ttob-type:
	(op, type) -> (type, type)	

	
	
/****
Given a binary expression operator, how do we display it in the Booster notation.
This functionality has been separated to make some other transformations easier 
to define 
****/	

get-binop-booster-notation:
	Plus() -> "+"

get-binop-booster-notation:
	Minus() -> "-"

get-binop-booster-notation:
	Times() -> "*"

get-binop-booster-notation:
	Divide() -> "/"

get-binop-booster-notation:
	Maximum() -> "max"

get-binop-booster-notation:
	Minimum() -> "min"

get-binop-booster-notation:
	Union() -> "\\/"

get-binop-booster-notation:
	Intersection() -> "/\\"

get-binop-booster-notation:
	Concat() -> "++"
	