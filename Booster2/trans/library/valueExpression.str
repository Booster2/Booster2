module library/valueExpression

imports
  include/Booster2
  
  library/lookupTable
  library/basicTypes
  library/environment
  
 rules
 	
		

/* 	get-path-attribute-name:
		takes a path, and returns the name of the resulting attribute			
*/

	get-path-attribute-name:
		(This()) -> Null()
		
	get-path-attribute-name:
		(ThisPrimed()) -> Null()
		
	get-path-attribute-name:
		(PathStart(name, maybePrimed)) -> name		

	get-path-attribute-name:
		(Path(ps, PathComponent(name, maybePrimed))) -> name		

	get-path-attribute-name:
		(Input(name)) -> Null()
		
	get-path-attribute-name:
		(Output(name)) -> Null()
		

/* 	get-path-attribute:
		
*/

	get-path-attribute:
		Path(a {Reference(cname2)},PathComponent(aname, maybePrimed))
			-> (cname2, aname)

	get-path-attribute:
		Path(a {Optional(Reference(cname2))},PathComponent(aname, maybePrimed))
			-> (cname2, aname)

			

			
			
					

		

	is-defined:
		 (classname, method, BasicValue(t){type}, env)
		 	-> BinRel(BasicValue(t) {type}, In(), typeExtent)
		 where
		 	t' := <get-corresponding-booster-type> t;
		 	typeExtent := <get-type-extent> t'
		 		 	
	is-defined:
		 (classname, method, TypeExtent(t), env)
		 	-> True()
		 	
	is-defined:
		 (classname, method, Null(), env)
		 	-> True()
		 	
	is-defined:
		 (classname, method, Input(i), env)
		 	-> True()
		 	
	is-defined:
		 (classname, method, Output(i), env)
		 	-> True()
		 	
	is-defined:
		 (classname, method, This(), env)
		 	-> True()
		 	
	is-defined:
		 (classname, method, ThisPrimed(), env)
		 	-> True()

	is-defined:
		 (classname, method, Path(a {Optional(type)},b), env)
		 	-> And(constraint, BinRel(a, NotEqual(), Null()))
		 where
		 	constraint := <is-defined> (classname, method, a, env) 

	is-defined:
		 (classname, method, Path(a,b), env)
		 	-> <is-defined> (classname, method, a, env)

	is-defined:
		 (classname, method, PathStart(a,maybeprimed), env)
		 	-> True()

	is-defined:
		 (classname, method, PathComponent(a,maybeprimed), env)
		 	-> <is-defined> (classname, method, a, env) 
		 	
	is-defined:
		 (classname, method, SetExtent([]), env)
		 	-> True()
	
	is-defined:
		 (classname, method, SetExtent([elem, elems*]), env)
		 	-> And(constraint1, constraint2)
		 where
		 	constraint1 := <is-defined> (classname, method, elem, env);
		 	constraint2 := <is-defined> (classname, method, SetExtent([elems*]), env) 
	
	
	// I removed this catch-rule again.
	/*
	 is-defined:
		(classname, method, expr,env) -> 
			True()
		where
			log(|Error(), " Error!", classname);
			log(|Error(), method, expr) 
	*/	 	
		
 