 module library/expression

imports

  include/Booster2
    
  library/valueExpression
  library/binOp

rules
	
	

/* 	get-mentioned-attributes:
		takes an expression, in the context of a class, maybe a method name,
		and a model, and returns the list of attributes that it
		constrains.			
*/

 	get-mentioned-attributes:
		(name, maybename, Head(expr))
			-> atts
		with
			atts := <get-mentioned-attributes> (name, maybename, expr)
 
 	get-mentioned-attributes:
		(name, maybename, Tail(expr))
			-> atts
		with
			atts := <get-mentioned-attributes> (name, maybename, expr)
 
 	get-mentioned-attributes:
		(name, maybename, Negative(expr))
			-> atts
		with
			atts := <get-mentioned-attributes> (name, maybename, expr)
 
 	get-mentioned-attributes:
		(name, maybename, Cardinality(expr))
			-> atts
		with
			atts := <get-mentioned-attributes> (name, maybename, expr)
 
 	get-mentioned-attributes:
		(name, maybename, BinOp(expr1, op, expr2))
			-> <union> (atts1, atts2)
		with
			atts1 := <get-mentioned-attributes> (name, maybename, expr1);
			atts2 := <get-mentioned-attributes> (name, maybename, expr2)
	


/* 	is-old:
		takes an expression, and returns True() or False()
		depending on whether the expression can be evaluated in the pre-state
		or not. 			
*/

	is-old:
		Head(expr1)
			-> True()
		where
			True() := <is-old> (expr1)

	is-old:
		Tail(expr1)
			-> True()
		where
			True() := <is-old> (expr1)

	is-old:
		Cardinality(expr1)
			-> True()
		where
			True() := <is-old> (expr1)

	is-old:
		Negative(expr1)
			-> True()
		where
			True() := <is-old> (expr1)

	is-old:
		BinOp(expr1, op, expr2)
			-> True()
		where
			True() := <is-old> expr1;
			True() := <is-old> expr2
			
			
/* get-expression-type
*/

	get-expression-type:
		(Head(expr1), classname, methodname)
			-> String()
		where
			String() := <get-expression-type> (expr1, classname, methodname)
			
	get-expression-type:
		(Head(expr1), classname, methodname)
			-> type1
		where
			Set(type1) := <get-expression-type> (expr1, classname, methodname)
				
	get-expression-type:
		(Tail(expr1), classname, methodname)
			-> String()
		where
			String() := <get-expression-type> (expr1, classname, methodname)
			
	get-expression-type:
		(Tail(expr1), classname, methodname)
			-> type1
		where
			Set(type1) := <get-expression-type> (expr1, classname, methodname)

	get-expression-type:
		(Negative(expr1), classname, methodname)
			-> Int()
		where
			Int() := <get-expression-type> (expr1, classname, methodname)

	get-expression-type:
		(Cardinality(expr1), classname, methodname)
			-> Int()
		where
			String() := <get-expression-type> (expr1, classname, methodname)

	get-expression-type:
		(Cardinality(expr1), classname, methodname)
			-> Int()
		where
			Set(type1) := <get-expression-type> (expr1, classname, methodname)

	get-expression-type:
		(BinOp(expr1, op, expr2), classname, methodname)
			-> t3
		where
			t1 := <get-expression-type> (expr1, classname, methodname);
			t2 := <get-expression-type> (expr1, classname, methodname);
			t3 := <binop-type-matching> (t1, op, t2)

	substitute:
		 (Head(expression1), path, expression)
		 	-> Head(expression2)
		 where
		 	expression2 := <substitute>	(expression1, path, expression)

	substitute:
		 (Tail(expression1), path, expression)
		 	-> Tail(expression2)
		 where
		 	expression2 := <substitute>	(expression1, path, expression)

	substitute:
		 (Cardinality(expression1), path, expression)
		 	-> Cardinality(expression2)
		 where
		 	expression2 := <substitute>	(expression1, path, expression)

	substitute:
		 (Negative(expression1), path, expression)
		 	-> Negative(expression2)
		 where
		 	expression2 := <substitute>	(expression1, path, expression)

	substitute:
		 (BinOp(expression1, op, expression2), path, expression)
		 	-> BinOp(expression3, op, expression4)
		 where
		 	expression3 := <substitute>	(expression1, path, expression);
		 	expression4 := <substitute>	(expression2, path, expression)
			 	

/* 	make-old:
		takes an expression, and returns its representation in the 
		pre-state of a method 			
*/

	make-old:
		Head(expr1)
			-> Head(expr2)
		where
			expr2 := <make-old> (expr1)

	make-old:
		Tail(expr1)
			-> Tail(expr2)
		where
			expr2 := <make-old> (expr1)

	make-old:
		Negative(expr1)
			-> Negative(expr2)
		where
			expr2 := <make-old> (expr1)

	make-old:
		Cardinality(expr1)
			-> Cardinality(expr2)
		where
			expr2 := <make-old> (expr1)


	make-old:
		BinOp(expr1, op, expr2)
			-> BinOp(expr3, op, expr4)
		where
			expr3 := <make-old> (expr1);
			expr4 := <make-old> (expr2)

			
			
/* 	make-post-state:
		takes an expression, and returns its representation in the 
		pre-state of a method 			
*/

	make-post-state:
		Head(expr1)
			-> Head(expr2)
		where
			expr2 := <make-post-state> (expr1)

	make-post-state:
		Tail(expr1)
			-> Tail(expr2)
		where
			expr2 := <make-post-state> (expr1)

	make-post-state:
		Negative(expr1)
			-> Negative(expr2)
		where
			expr2 := <make-post-state> (expr1)

	make-post-state:
		Cardinality(expr1)
			-> Cardinality(expr2)
		where
			expr2 := <make-post-state> (expr1)


	make-post-state:
		BinOp(expr1, op, expr2)
			-> BinOp(expr3, op, expr4)
		where
			expr3 := <make-post-state> (expr1);
			expr4 := <make-post-state> (expr2)

