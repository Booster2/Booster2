 module library/expression

imports

  include/Booster2
    
  elaborate  
  
  library/valueExpression
  library/binOp

rules
	
	

			
/* get-expression-type
*/

	get-expression-type:
		(UnOp(Head(), expr1), classname, methodname, env)
			-> String()
		where
			String() := <get-expression-type> (expr1, classname, methodname, env)
			
	get-expression-type:
		(UnOp(Head(),expr1), classname, methodname, env)
			-> type1
		where
			Set(type1) := <get-expression-type> (expr1, classname, methodname, env)
				
	get-expression-type:
		(UnOp(Tail(),expr1), classname, methodname, env)
			-> String()
		where
			String() := <get-expression-type> (expr1, classname, methodname, env)
			
	get-expression-type:
		(UnOp(Tail(),expr1), classname, methodname, env)
			-> type1
		where
			Set(type1) := <get-expression-type> (expr1, classname, methodname, env)

	get-expression-type:
		(UnOp(Negative(),expr1), classname, methodname, env)
			-> Int()
		where
			Int() := <get-expression-type> (expr1, classname, methodname, env)

	get-expression-type:
		(UnOp(Cardinality(),expr1), classname, methodname, env)
			-> Int()
		where
			String() := <get-expression-type> (expr1, classname, methodname, env)

	get-expression-type:
		(UnOp(Cardinality(),expr1), classname, methodname, env)
			-> Int()
		where
			Set(type1) := <get-expression-type> (expr1, classname, methodname, env)

/*	get-expression-type:
		(BinOp(expr1, op, expr2), classname, methodname, env)
			-> t3
		where
			t1 := <get-expression-type> (expr1, classname, methodname, env);
			t2 := <get-expression-type> (expr1, classname, methodname, env);
			t3 := <binop-type-matching> (t1, op, t2) */


			
/* 	is-defined:
		takes an expression in the context of a model, a classname, 
		and a methodname, and returns a constraint
*/	

	
	is-defined:
		something -> True()	

/*		
	is-defined:
		 (classname, method, Head(expr1), env)
			-> And(constraint1, BinRel(expr1, NotEqual(), String("")))
		where
			constraint1 := <is-defined>(classname, method, expr1, env);
			(String(), vars) := <deduce-types>(classname, method, expr1, "?",[])
			
	is-defined:
		 (classname, method, Tail(expr1))
			-> And(constraint1, BinRel(expr1, NotEqual(), String("")))
		where
			constraint1 := <is-defined>(classname, method, expr1);
			(String(), vars) := <deduce-types>(classname, method, expr1, "?",[])		
			
	is-defined:
		 (classname, method, Negative(expr1))
			-> constraint1
		where
			constraint1 := <is-defined>(classname, method, expr1);
			(Int(), vars) := <deduce-types>(classname, method, expr1, "?",[])
			

	is-defined:
		 (classname, method, BinOp(expr1, Plus(), expr2))
			-> And(And(constraint1,constraint2), BinRel(BinOp(expr1, Plus(), expr2), In(), TypeExtent(Int())))
		where
			constraint1 := <is-defined>(classname, method, expr1);
			constraint2 := <is-defined>(classname, method, expr2);
			(Int(), vars) := <deduce-types>(classname, method, BinOp(expr1, Plus(), expr2), "?",[])


	is-defined:
		 (classname, method, BinOp(expr1, Minus(), expr2))
			-> And(And(constraint1,constraint2), BinRel(BinOp(expr1, Minus(), expr2), In(), TypeExtent(Int())))
		where
			constraint1 := <is-defined>(classname, method, expr1);
			constraint2 := <is-defined>(classname, method, expr2);
			(Int(), vars) := <deduce-types>(classname, method, BinOp(expr1, Minus(), expr2), "?",[])

	is-defined:
		 (classname, method, BinOp(expr1, Minus(), expr2))
			-> And(constraint1,constraint2)
		where
			constraint1 := <is-defined>(classname, method, expr1);
			constraint2 := <is-defined>(classname, method, expr2)


	is-defined:
		 (classname, method, BinOp(expr1, Times(), expr2))
			-> And(And(constraint1,constraint2), BinRel(BinOp(expr1, Times(), expr2), In(), TypeExtent(Int())))
		where
			constraint1 := <is-defined>(classname, method, expr1);
			constraint2 := <is-defined>(classname, method, expr2);
			(Int(), vars) := <deduce-types>(classname, method, BinOp(expr1, Times(), expr2), "?",[])

	is-defined:
		 (classname, method, BinOp(expr1, Divide(), expr2))
			-> And(And(constraint1,constraint2), BinRel(BinOp(expr1, Divide(), expr2), In(), TypeExtent(Int())))
		where
			constraint1 := <is-defined>(classname, method, expr1);
			constraint2 := <is-defined>(classname, method, expr2);
			(Int(), vars) := <deduce-types>(classname, method, BinOp(expr1, Divide(), expr2), "?",[])

	is-defined:
		 (classname, method, BinOp(expr1, Maximum(), expr2))
			-> And(And(constraint1,constraint2), BinRel(BinOp(expr1, Maximum(), expr2), In(), TypeExtent(Int())))
		where
			constraint1 := <is-defined>(classname, method, expr1);
			constraint2 := <is-defined>(classname, method, expr2);
			(Int(), vars) := <deduce-types>(classname, method, BinOp(expr1, Maximum(), expr2), "?",[])

	is-defined:
		 (classname, method, BinOp(expr1, Minimum(), expr2))
			-> And(And(constraint1,constraint2), BinRel(BinOp(expr1, Minimum(), expr2), In(), TypeExtent(Int())))
		where
			constraint1 := <is-defined>(classname, method, expr1);
			constraint2 := <is-defined>(classname, method, expr2);
			(Int(), vars) := <deduce-types>(classname, method, BinOp(expr1, Minimum(), expr2), "?",[])

	is-defined:
		 (classname, method, BinOp(expr1, Union(), expr2))
			-> And(constraint1,constraint2)
		where
			constraint1 := <is-defined>(classname, method, expr1);
			constraint2 := <is-defined>(classname, method, expr2);
			(Set(type), vars) := <deduce-types>(classname, method, BinOp(expr1, Union(), expr2), "?",[])

	is-defined:
		 (classname, method, BinOp(expr1, Intersection(), expr2))
			-> And(constraint1,constraint2)
		where
			constraint1 := <is-defined>(classname, method, expr1);
			constraint2 := <is-defined>(classname, method, expr2);
			(Set(type), vars) := <deduce-types>(classname, method, BinOp(expr1, Intersection(), expr2), "?",[]) 

	is-defined:
		 (classname, method, BinOp(expr1, Concat(), expr2))
			-> And(And(constraint1,constraint2), BinRel(BinOp(expr1, Concat(), expr2), In(), TypeExtent(String())))
		where
			constraint1 := <is-defined>(classname, method, expr1);
			constraint2 := <is-defined>(classname, method, expr2);
			(String(), vars) := <deduce-types>(classname, method, BinOp(expr1, Concat(), expr2), "?",[])
*/			

			