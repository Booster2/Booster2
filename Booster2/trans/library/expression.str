 module library/expression

imports

  include/Booster2
    
  elaborate  
  
  library/valueExpression
  library/binOp

rules
	
	

/* 	get-mentioned-attributes:
		takes an expression, in the context of a class, maybe a method name,
		and a model, and returns the list of attributes that it
		constrains.			
*/

 	get-mentioned-attributes:
		(name, maybename, UnOp(unop, expr), env)
			-> atts
		with
			atts := <get-mentioned-attributes> (name, maybename, expr, env)
 
 
 	get-mentioned-attributes:
		(name, maybename, BinOp(expr1, op, expr2), env)
			-> <union> (atts1, atts2)
		with
			atts1 := <get-mentioned-attributes> (name, maybename, expr1, env);
			atts2 := <get-mentioned-attributes> (name, maybename, expr2, env)


/* 	is-old:
		takes an expression, and returns True() or False()
		depending on whether the expression can be evaluated in the pre-state
		or not. 			
*/

	is-old:
		UnOp(unop, expr1)
			-> True()
		where
			True() := <is-old> (expr1)

	is-old:
		BinOp(expr1, op, expr2)
			-> True()
		where
			True() := <is-old> expr1;
			True() := <is-old> expr2
			
			
/* get-expression-type
*/

	get-expression-type:
		(UnOp(Head(), expr1), classname, methodname, env)
			-> String()
		where
			String() := <get-expression-type> (expr1, classname, methodname, env)
			
	get-expression-type:
		(UnOp(Head(),expr1), classname, methodname, env)
			-> type1
		where
			Set(type1) := <get-expression-type> (expr1, classname, methodname, env)
				
	get-expression-type:
		(UnOp(Tail(),expr1), classname, methodname, env)
			-> String()
		where
			String() := <get-expression-type> (expr1, classname, methodname, env)
			
	get-expression-type:
		(UnOp(Tail(),expr1), classname, methodname, env)
			-> type1
		where
			Set(type1) := <get-expression-type> (expr1, classname, methodname, env)

	get-expression-type:
		(UnOp(Negative(),expr1), classname, methodname, env)
			-> Int()
		where
			Int() := <get-expression-type> (expr1, classname, methodname, env)

	get-expression-type:
		(UnOp(Cardinality(),expr1), classname, methodname, env)
			-> Int()
		where
			String() := <get-expression-type> (expr1, classname, methodname, env)

	get-expression-type:
		(UnOp(Cardinality(),expr1), classname, methodname, env)
			-> Int()
		where
			Set(type1) := <get-expression-type> (expr1, classname, methodname, env)

/*	get-expression-type:
		(BinOp(expr1, op, expr2), classname, methodname, env)
			-> t3
		where
			t1 := <get-expression-type> (expr1, classname, methodname, env);
			t2 := <get-expression-type> (expr1, classname, methodname, env);
			t3 := <binop-type-matching> (t1, op, t2) */

	literal-substitute:
		 (classname, methodname, UnOp(unop, expression1), paths, expression, env)
		 	-> UnOp(unop,expression2)
		 where
		 	expression2 := <literal-substitute>	(classname, methodname, expression1, paths, expression, env)

	literal-substitute:
		 (classname, methodname, BinOp(expression1, op, expression2), paths, expression, env)
		 	-> BinOp(expression3, op, expression4)
		 where
		 	expression3 := <literal-substitute>	(classname, methodname, expression1, paths, expression, env);
		 	expression4 := <literal-substitute>	(classname, methodname, expression2, paths, expression, env)
			 	


			
			

/* 	get-mentioned-paths:
		takes an expression, in the context of a class, maybe a method name,
		and a model, and returns the list of attributes that it
		constrains.			
*/

 	get-mentioned-paths:
		(name, maybename, UnOp(unop, expr), env)
			-> atts
		with
			atts := <get-mentioned-paths> (name, maybename, expr, env)
 
 	get-mentioned-paths:
		(name, maybename, BinOp(expr1, op, expr2), env)
			-> <union> (atts1, atts2)
		with
			atts1 := <get-mentioned-paths> (name, maybename, expr1, env);
			atts2 := <get-mentioned-paths> (name, maybename, expr2, env)
/* 	is-defined:
		takes an expression in the context of a model, a classname, 
		and a methodname, and returns a constraint
*/	

	
	is-defined:
		something -> True()	

/*		
	is-defined:
		 (classname, method, Head(expr1), env)
			-> And(constraint1, BinRel(expr1, NotEqual(), String("")))
		where
			constraint1 := <is-defined>(classname, method, expr1, env);
			(String(), vars) := <deduce-types>(classname, method, expr1, "?",[])
			
	is-defined:
		 (classname, method, Tail(expr1))
			-> And(constraint1, BinRel(expr1, NotEqual(), String("")))
		where
			constraint1 := <is-defined>(classname, method, expr1);
			(String(), vars) := <deduce-types>(classname, method, expr1, "?",[])		
			
	is-defined:
		 (classname, method, Negative(expr1))
			-> constraint1
		where
			constraint1 := <is-defined>(classname, method, expr1);
			(Int(), vars) := <deduce-types>(classname, method, expr1, "?",[])
			

	is-defined:
		 (classname, method, BinOp(expr1, Plus(), expr2))
			-> And(And(constraint1,constraint2), BinRel(BinOp(expr1, Plus(), expr2), In(), TypeExtent(Int())))
		where
			constraint1 := <is-defined>(classname, method, expr1);
			constraint2 := <is-defined>(classname, method, expr2);
			(Int(), vars) := <deduce-types>(classname, method, BinOp(expr1, Plus(), expr2), "?",[])


	is-defined:
		 (classname, method, BinOp(expr1, Minus(), expr2))
			-> And(And(constraint1,constraint2), BinRel(BinOp(expr1, Minus(), expr2), In(), TypeExtent(Int())))
		where
			constraint1 := <is-defined>(classname, method, expr1);
			constraint2 := <is-defined>(classname, method, expr2);
			(Int(), vars) := <deduce-types>(classname, method, BinOp(expr1, Minus(), expr2), "?",[])

	is-defined:
		 (classname, method, BinOp(expr1, Minus(), expr2))
			-> And(constraint1,constraint2)
		where
			constraint1 := <is-defined>(classname, method, expr1);
			constraint2 := <is-defined>(classname, method, expr2)


	is-defined:
		 (classname, method, BinOp(expr1, Times(), expr2))
			-> And(And(constraint1,constraint2), BinRel(BinOp(expr1, Times(), expr2), In(), TypeExtent(Int())))
		where
			constraint1 := <is-defined>(classname, method, expr1);
			constraint2 := <is-defined>(classname, method, expr2);
			(Int(), vars) := <deduce-types>(classname, method, BinOp(expr1, Times(), expr2), "?",[])

	is-defined:
		 (classname, method, BinOp(expr1, Divide(), expr2))
			-> And(And(constraint1,constraint2), BinRel(BinOp(expr1, Divide(), expr2), In(), TypeExtent(Int())))
		where
			constraint1 := <is-defined>(classname, method, expr1);
			constraint2 := <is-defined>(classname, method, expr2);
			(Int(), vars) := <deduce-types>(classname, method, BinOp(expr1, Divide(), expr2), "?",[])

	is-defined:
		 (classname, method, BinOp(expr1, Maximum(), expr2))
			-> And(And(constraint1,constraint2), BinRel(BinOp(expr1, Maximum(), expr2), In(), TypeExtent(Int())))
		where
			constraint1 := <is-defined>(classname, method, expr1);
			constraint2 := <is-defined>(classname, method, expr2);
			(Int(), vars) := <deduce-types>(classname, method, BinOp(expr1, Maximum(), expr2), "?",[])

	is-defined:
		 (classname, method, BinOp(expr1, Minimum(), expr2))
			-> And(And(constraint1,constraint2), BinRel(BinOp(expr1, Minimum(), expr2), In(), TypeExtent(Int())))
		where
			constraint1 := <is-defined>(classname, method, expr1);
			constraint2 := <is-defined>(classname, method, expr2);
			(Int(), vars) := <deduce-types>(classname, method, BinOp(expr1, Minimum(), expr2), "?",[])

	is-defined:
		 (classname, method, BinOp(expr1, Union(), expr2))
			-> And(constraint1,constraint2)
		where
			constraint1 := <is-defined>(classname, method, expr1);
			constraint2 := <is-defined>(classname, method, expr2);
			(Set(type), vars) := <deduce-types>(classname, method, BinOp(expr1, Union(), expr2), "?",[])

	is-defined:
		 (classname, method, BinOp(expr1, Intersection(), expr2))
			-> And(constraint1,constraint2)
		where
			constraint1 := <is-defined>(classname, method, expr1);
			constraint2 := <is-defined>(classname, method, expr2);
			(Set(type), vars) := <deduce-types>(classname, method, BinOp(expr1, Intersection(), expr2), "?",[]) 

	is-defined:
		 (classname, method, BinOp(expr1, Concat(), expr2))
			-> And(And(constraint1,constraint2), BinRel(BinOp(expr1, Concat(), expr2), In(), TypeExtent(String())))
		where
			constraint1 := <is-defined>(classname, method, expr1);
			constraint2 := <is-defined>(classname, method, expr2);
			(String(), vars) := <deduce-types>(classname, method, BinOp(expr1, Concat(), expr2), "?",[])
*/			

			