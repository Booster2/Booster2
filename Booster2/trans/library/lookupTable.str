module lookupTable

imports
  include/Booster2  
  
rules
	// removes the first element of a list for which s applies 
	remove-first(s) = split-fetch(s) ; conc
	
	replaceInLookupTable(s): (lookuptable, key) -> newLookupTable
			where
				currentlyKnownValues := <LookupTable> lookuptable;
				oldValue := <lookup>(key, currentlyKnownValues);
				newEntry := <s>(key, oldValue);
				newLookupTable := <conc>(<remove-first(?(key, newValue))> currentlyKnownValues, [newEntry])
				
				
	

rules
			
	replaceClass(s): classname -> classname 
		where 
			newLookupTable := <replaceInLookupTable(s)>  ("Class", classname) ; 
			rules( LookupTable:+ "Class" -> newLookupTable)
			
	replaceMethod(s):
		(cname, mname) -> (cname, mname)
		where
			newLookupTable := <replaceInLookupTable(s)>  ("Method", (cname, mname)) ; 
			rules( LookupTable:+ "Method" -> newLookupTable)

	replaceAttribute(s):
		(cname, aname) -> (cname, aname)
		where
			newLookupTable := <replaceInLookupTable(s)>  ("Attribute", (cname, aname)) ; 
			rules( LookupTable:+ "Attribute" -> newLookupTable)
			
	addInput:
		(cname, mname, input, type)
			-> (cname, mname, input, type)
		where
			<replaceMethod(\ ((c,a),(co,gc,e,d,is,os)) -> ((c,a),(co,gc,e,d,<union>(is, [(input, type)]),os)) \)> (cname, mname)
			
	addOutput:
		(cname, mname, output, type)
			-> (cname, mname, output, type)
		where 
			<replaceMethod(\ ((c,a),(co,gc,e,d,is,os)) -> ((c,a),(co,gc,e,d,is, <union>(os, [(output, type)]))) \)> (cname, mname)
			
	addClassAttribute = (\ (cname, aname, adef) -> (cname, aname, adef) where
				<replaceClass(\ (cn, (is,as,a,m,c,w)) -> (cn, (is,as, <union>(a, [aname]),m,c,w))\)> cname ;
				prevTable := <LookupTable> "Attribute";
				newTable := <union>(prevTable, [((cname, aname), adef)]);
				rules(
					LookupTable :+ "Attribute" -> newTable
				) \)		
				
	addClassMethod = (\ (cname, mname, mdef) -> (cname, mname, mdef) where
				<replaceClass(\ (cn, (is,as,a,m,c,w)) -> (cn, (is, as, a, <union>(m, [mname]),c,w))\)> cname ;
				prevTable := <LookupTable> "Method";
				<not(lookup)>((cname, mname), prevTable);
				newTable := <union>(prevTable, [((cname, mname), mdef)]);
				rules(
					LookupTable :+ "Method" -> newTable
				) \)
				
	updateClassMethod = (\ (cname, mname, constraint, extcname, exts, inputs, outputs) -> (cname, mname, constraint, extcname, exts, inputs, outputs) where
				<replaceMethod(\ ((cn, mn), (c, gc, exts', done, is, os)) -> ((cn, mn), (And(c, constraint), gc, <union>([extcname], <union>(exts', exts)), done, is, os)) \)> (cname, mname) \)
				

	addClassInvariant = (\ (cname, inv) -> (cname, inv) where
				<replaceClass(\ (cn, (is,as,a,m,c,w)) -> (cn, (is,as, a ,m,<conc>(c, [inv]),w))\)> cname \) 

	updateClassInvariants = (\ (cname, invs) -> (cname, invs) where
				<replaceClass(\ (cn, (is,as,a,m,c,w)) -> (cn, (is,as, a ,m,invs,w))\)> cname \) 


	updateMethodConstraint = (\ (cname, mname, newConstraint) -> (cname, mname, newConstraint) where
				<replaceMethod(\ ((c,m),(co,gc,e,d,is,os)) -> ((c,m),(newConstraint,gc,e,d,is,os)) \)> (cname, mname) \)

	updateMethodProgram = (\ (cname, mname, newProgram) -> (cname, mname, newProgram) where
				<replaceMethod(\ ((c,m),(co,gc,e,d,is,os)) -> ((c,m),(co,newProgram,e,d,is,os)) \)> (cname, mname) \)

	updateAttributeTableName = (\ (cname, aname, newtname) -> (cname, aname, newtname) where
				<replaceAttribute(\ ((c,a),(ds, t, opp, min, max, tname)) -> ((c,a),(ds, t, opp, min, max, newtname)) \)> (cname, aname) \)
				

	getInputType:
		(cname, mname, iname)
			-> types
		where
			types := <lookup>(iname, (<\(c,gc,e,d, is,os) -> is \> <lookup> ((cname, mname), <LookupTable> "Method")))
	
	getOutputType:
		(cname, mname, oname)
			-> types
		where
			types := <lookup>(oname, (<\(c,gc,e,d, is,os) -> os \> <lookup> ((cname, mname), <LookupTable> "Method")))
			
			
/* 	is-set-name:
		Returns if the name provided is the name of a defined set in the model 	
*/
	is-set-name = (\ sname -> <lookup>(sname, <LookupTable>"SetDef") \)
	
/* 	lookup-set-value:
		Returns the name of a set which contains the given name as a value
*/
	lookup-set-value:
		svalue -> sname
			where
				[sname] := <filter(\ (n, vs) -> n where <elem>(svalue, vs)\)> <LookupTable> "SetDef"
				
/* 	is-class-name:
		Returns if the name provided is the name of a class in the model 	
*/
	is-class-name = (\ cname -> <lookup>(cname, <LookupTable>"Class") \)



/* 	lookup-class-attributes:
		Given a classname, returns a list of (classname, attributename) pairs 	
*/
	lookup-class-attributes:
		cname -> <filter(\ ((cname', aname), attdetails) -> ((cname', aname), attdetails) where <equal>(cname, cname')\)><LookupTable> "Attribute"

	lookup-class-methods:
		cname -> <filter(\ ((cname', mname), mdetails) -> ((cname', mname), mdetails) where <equal>(cname, cname')\)><LookupTable> "Method"


/* 	lookup-attribute-type:
		Takes a class name, and an attribute name and returns the type of that attribute 	
*/
	lookup-attribute-type:
		(cname, aname)
			-> <\ (ds, t, opp, min, max, tname) -> t \><lookup>((cname, aname), <LookupTable> "Attribute")



	lookup-max-mult:
		(classname, attname)
			-> <\ (ds, t, opp, min, max, tname) -> max \> <lookup>((classname, attname), <LookupTable> "Attribute")

	lookup-min-mult:
		(classname, attname)
			-> <\ (ds, t, opp, min, max, tname) -> min \> <lookup>((classname, attname), <LookupTable> "Attribute")

/* 	lookup-opposite:
		Takes a class name, and an attribute name
		and returns the class name, attribute name pair that is its opposite 	
*/
	lookup-opposite:
		(classname, attname)
			-> <\ (ds, t, opp, min, max, tname) -> opp \> <lookup>((classname, attname), <LookupTable> "Attribute")

	lookup-attribute-table-name:
		(classname, attname)
			-> <\ (ds, t, opp, min, max, tname) -> tname \> <lookup>((classname, attname), <LookupTable> "Attribute")


/*
	set-attribute-table-name:
		(classname, attname, tablename) ->
			[]
		where
			tableNames := (<LookupTable> "TableNames");
			tableNames' := <union>(tableNames, [((classname, attname), tablename)]);
			rules(
				LookupTable :+ "TableNames" -> tableNames'
			)

	set-attribute-table-name:
		(classname, attname, tablename) ->
			[]
		where
			rules(
				LookupTable :+ "TableNames" -> [((classname, attname), tablename)]
			)
*/


	lookup-invariant:
		(classname, attname)
			->  inv
		where
			inv := <get-attribute-constraint> (classname, attname)
			
	
	get-class-invariants:
		classname -> invs
			where (is,as,a,m,invs,w) := <lookup>(classname, <LookupTable> "Class")
		

/***** TODO *****/
/*
	get-attribute-constraint:
		(classname, attname) -> constraint
			where		
				constraint := <lookup>((classname, attname), <LookupTable> "ClassBasedInvariants")

	get-attribute-constraint:
		(classname, attname) -> True()
				
*/				
	get-attribute-constraint:
		(classname, attname) -> True()