module library/relation

imports
  include/Booster2
   
  library/expression
  library/valueExpression
  
  library/strategy
  library/constraint
  
  compile
  elaborate
  
 rules
 	 

/* get-modified-attributes:
	Takes a program and returns all the attributes that may be modified by it
*/


	
					

	is-correct-type:
		((type, classname, methodname, env), path)
			-> path
		where 
			type' := <resolve-path-type> (classname, path, (classname, methodname), env);
			<equal>(type', type)

	is-correct-type:
		((type, classname, methodname, env), path)
			-> path
		where 
			type' := <resolve-path-type> (classname, path, (classname, methodname), env);
			<equal>(type', Optional(type))

	is-correct-type:
		((type, classname, methodname, env), path)
			-> path
		where 
			type' := <resolve-path-type> (classname, path, (classname, methodname), env);
			<equal>(Optional(type'), type)
			
	is-correct-type:
		((type, classname, methodname, env), path)
			-> None()
		
		 	
			 



/* 	is-defined:
		takes an expression in the context of a model, a classname, 
		and a methodname, and returns a constraint
*/			
			
	is-defined:
		(classname, method, BinRel(expr1, binrel, expr2), env)
			-> And(And(constraint1, constraint2), BinRel(expr1, binrel, expr2))
		where
			constraint1 := <is-defined> (classname, method, expr1, env);
			constraint2 := <is-defined> (classname, method, expr2, env)
		