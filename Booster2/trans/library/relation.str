module library/relation

imports
  include/Booster2
   
  library/expression
  library/valueExpression
 
 rules
 	 

/* 	is-old:
		takes a relation, and returns True() or False() depending on whether
		the relation can be evaluated in the pre-state or not	
*/

	is-old:
		BinRel(expr1, binrel, expr2)
			-> True()
		where
			True() := <is-old> expr1;
			True() := <is-old> expr2



/* 	get-mentioned-attributes:
		takes a relation, in the context of a class, maybe a method name,
		and a model, and returns the list of attributes that it
		constrains.			
*/
	get-mentioned-attributes:
		(name, maybename, BinRel(expr1, binrel, expr2))
			-> <union> (atts1, atts2)
		with
			atts1 := <get-mentioned-attributes> (name, maybename, expr1);
			atts2 := <get-mentioned-attributes> (name, maybename, expr2)



	
	substitute:
		 (BinRel(expression1, binrel, expression2), path, expression)
		 	-> BinRel(expression3, binrel, expression4)
		 where
		 	expression3 := <substitute>	(expression1, path, expression);
		 	expression4 := <substitute>	(expression2, path, expression)
		 	
			 	
/* 	make-post-state:
		takes a relation, and returns its representation in the 
		pre-state of a method 			
*/

	make-post-state:
		BinRel(expr1, binrel, expr2)
			-> BinRel(expr3, binrel, expr4)
		where
			expr3 := <make-post-state> expr1;
			expr4 := <make-post-state> expr2



/* 	make-old:
		takes a relation, and returns its representation in the 
		pre-state of a method 			
*/

	make-old:
		BinRel(expr1, binrel, expr2)
			-> BinRel(expr3, binrel, expr4)
		where
			expr3 := <make-old> expr1;
			expr4 := <make-old> expr2

