module library/basicTypes

imports
  include/Booster2
 
  library/lookupTable   
 
 rules
 	
 	get-primitive-types: True() -> ["String","Int","Decimal","Date","Time","DateTime", "Boolean"]

/* Basic Values */

	get-corresponding-booster-type:
		Integer(i) -> Int()

	get-corresponding-booster-type:
		String(s) -> String()

	get-corresponding-booster-type:
		Decimal(d) -> Decimal()


/* Integer */

	get-type-extent:
		Int() -> TypeExtent(Int()){ Set(BasicType(Int())) }
		
	get-type-booster-notation:
		Int() -> $[INT]

	get-type-booster-notation:
		Integer(i) -> $[[i]]
		
	get-type-booster-to-sql:
		Int() -> Int()	
		
	get-type-name-for-metadata:
		Int() -> "Integer"	

/* Decimal */

	get-type-extent:
		Decimal() -> TypeExtent(Decimal()){ Set(BasicType(Decimal())) }
		
	get-type-booster-notation:
		Decimal() -> $[DECIMAL]
		
	get-type-booster-notation:
		Decimal(d) -> $[[d]]
		
	get-type-booster-to-sql:
		Decimal() -> Decimal()	
		
	get-type-name-for-metadata:
		Decimal() -> "Decimal"	


/* String */

	get-type-extent:
		String() -> TypeExtent(String()){ Set(BasicType(String())) }
		
	get-type-booster-notation:
		String() -> $[STRING]
		
	get-type-booster-notation:
		String(s) -> $[[s]]

	get-type-booster-to-sql:
		String() -> Varchar(1000)
		
	get-type-name-for-metadata:
		String() -> "String"

/* DateTime */

	get-type-extent:
		DateTime() -> TypeExtent(DateTime()){ Set(BasicType(DateTime())) }
		
	get-type-booster-notation:
		DateTime() -> $[DATETIME]

	get-type-booster-to-sql:
		DateTime() -> Datetime()
		
	get-type-name-for-metadata:
		DateTime() -> "DateTime"

/* Date */

	get-type-extent:
		Date() -> TypeExtent(Date()){ Set(BasicType(Date())) }
		
	get-type-booster-notation:
		Date() -> $[DATE]

	get-type-booster-to-sql:
		Date() -> Date()
		
	get-type-name-for-metadata:
		Date() -> "Date"

/* Time */

	get-type-extent:
		Time() -> TypeExtent(Time()){ Set(BasicType(Time())) }
		
	get-type-booster-notation:
		Time() -> $[TIME]

	get-type-booster-to-sql:
		Time() -> Time()
		
	get-type-name-for-metadata:
		Time() -> "Time"

/* Boolean */

	get-type-extent:
		Boolean() -> TypeExtent(Boolean()){ Set(BasicType(Boolean())) }
		
	get-type-booster-notation:
		Boolean() -> $[BOOLEAN]

	get-type-booster-to-sql:
		Boolean() -> Bit()
		
	get-type-name-for-metadata:
		Boolean() -> "Boolean"

/* Password */

	get-type-extent:
		Password() -> TypeExtent(Password()){ Set(BasicType(Password())) }
		
	get-type-booster-notation:
		Password() -> $[PASSWORD]

	get-type-booster-to-sql:
		Password() -> Varchar(1000)
		
	get-type-name-for-metadata:
		Password() -> "Password"
		
		
/****
At some point, we're going to need a type hierarchy.
The full lattice would be difficult to encode, so we'll use a simple 
function to calculate whether two types satisfy a hierarchical
relationship.
****/

is-more-general-than:
	(Optional(type), type)
		-> True()

is-more-general-than:
	(Optional(BasicType(String())), Optional(BasicType(Int())))
		-> True()


is-more-general-than:
	(BasicType(String()), BasicType(Int()))
		-> True()

is-more-general-than:
	(Optional(BasicType(String())), BasicType(Int()))
		-> True()

is-more-general-than:
	(Set(BasicType(String())), Set(BasicType(Int())))
		-> True()

is-more-general-than:
	(BasicType(Decimal()), BasicType(Int()))
		-> True()

is-more-general-than:
	(Optional(BasicType(Decimal())), BasicType(Int()))
		-> True()

is-more-general-than:
	(Set(BasicType(Decimal())), Set(BasicType(Int())))
		-> True()




is-more-general-than:
	(Reference(a), Reference(b))
		-> True()
	where
		<lookup> (b ,<\ (n, ds,as, a,m,c,w) -> as \> <lookup>(a, <LookupTable> "Class"))

is-more-general-than:
	(Optional(Reference(a)), Optional(Reference(b)))
		-> True()
	where
		<lookup> (b ,<\ (n, ds,as, a,m,c,w) -> as \> <lookup>(a, <LookupTable> "Class"))

is-more-general-than:
	(Optional(Reference(a)), Reference(b))
		-> True()
	where
		<lookup> (b ,<\ (n, ds,as, a,m,c,w) -> as \> <lookup>(a, <LookupTable> "Class"))

is-more-general-than:
	(Set(Reference(a)), Set(Reference(b)))
		-> True()
	where
		<lookup> (b ,<\ (n, ds,as, a,m,c,w) -> as \> <lookup>(a, <LookupTable> "Class"))

// Any other pairs of types are incomparable.

// then there's the less-than or equal function, which we might find useful.
is-eq-more-general-than = (\ (t1,t2) -> True() where <equal>(t1,t2) <+ <is-more-general-than>(t1,t2) \) 


get-type-constraint:
	path { BasicType(t) } 
		-> BinRel(path { BasicType(t) }, In(), <get-type-extent> t)

get-type-constraint:
	path { Optional(BasicType(t)) } 
		-> Or(BinRel(path { Optional(BasicType(t)) }, In(), <get-type-extent> t), BinRel(path { Optional(BasicType(t)) }, Equal(), Null()))
		

get-type-constraint:
	path { Set(BasicType(t)) }
		-> BinRel(path { Set(BasicType(t)) }, SubsetEquals(), <get-type-extent> t)


get-type-constraint:
	path { Reference(name1) }
		-> BinRel(path { Reference(name1) }, In(), PathStart(name1, None()){ Set(Reference(name1)) })


get-type-constraint:
	path { Optional(Reference(name1)) } 
		-> Or(BinRel(path, In(), PathStart(name1, None()){ Set(Reference(name1)) }), BinRel(path, Equal(), Null()))
		

get-type-constraint:
	path { Set(Reference(name1)) }
		-> BinRel(path, SubsetEquals(), PathStart(name1, None()){ Set(Reference(name1)) })
						
get-type-constraint:
	something -> True()
		where log(|Error(), "get-type-constraint problem", something)									
			
			
	