module library/basicTypes

imports
  include/Booster2
 
  library/lookupTable   
 
 rules

/* Basic Values */

	get-corresponding-booster-type:
		Integer(i) -> Int()

	get-corresponding-booster-type:
		String(s) -> String()


/* Integer */

	get-type-extent:
		Int() -> TypeExtent(Int())
		
	get-type-booster-notation:
		Int() -> $[INT]
		
	get-type-booster-to-sql:
		Int() -> Int()	
		
	get-type-name-for-metadata:
		Int() -> "Integer"	


/* String */

	get-type-extent:
		String() -> TypeExtent(String())
		
	get-type-booster-notation:
		String() -> $[STRING]

	get-type-booster-to-sql:
		String() -> Varchar(1000)
		
	get-type-name-for-metadata:
		String() -> "String"

/* DateTime */

	get-type-extent:
		DateTime() -> TypeExtent(DateTime())
		
	get-type-booster-notation:
		DateTime() -> $[DATETIME]

	get-type-booster-to-sql:
		DateTime() -> Datetime()
		
	get-type-name-for-metadata:
		DateTime() -> "DateTime"

/* Boolean */

	get-type-extent:
		Boolean() -> TypeExtent(Boolean())
		
	get-type-booster-notation:
		Boolean() -> $[BOOLEAN]

	get-type-booster-to-sql:
		Boolean() -> Bit()
		
	get-type-name-for-metadata:
		Boolean() -> "Boolean"
		
		
/****
At some point, we're going to need a type hierarchy.
The full lattice would be difficult to encode, so we'll use a simple 
function to calculate whether two types satisfy a hierarchical
relationship.
****/

is-more-general-than:
	(Optional(type), type)
		-> True()

is-more-general-than:
	(Optional(BasicType(String())), Optional(BasicType(Int())))
		-> True()

is-more-general-than:
	(BasicType(String()), BasicType(Int()))
		-> True()

is-more-general-than:
	(Optional(BasicType(String())), BasicType(Int()))
		-> True()

is-more-general-than:
	(Set(BasicType(String())), Set(BasicType(Int())))
		-> True()


is-more-general-than:
	(Reference(a), Reference(b))
		-> True()
	where
		<lookup> (b ,<\ (n, ds,as, a,m,c,w) -> as \> <lookup>(a, <LookupTable> "Class"))

is-more-general-than:
	(Optional(Reference(a)), Optional(Reference(b)))
		-> True()
	where
		<lookup> (b ,<\ (n, ds,as, a,m,c,w) -> as \> <lookup>(a, <LookupTable> "Class"))

is-more-general-than:
	(Optional(Reference(a)), Reference(b))
		-> True()
	where
		<lookup> (b ,<\ (n, ds,as, a,m,c,w) -> as \> <lookup>(a, <LookupTable> "Class"))

is-more-general-than:
	(Set(Reference(a)), Set(Reference(b)))
		-> True()
	where
		<lookup> (b ,<\ (n, ds,as, a,m,c,w) -> as \> <lookup>(a, <LookupTable> "Class"))

// Any other pairs of types are incomparable.

// then there's the less-than or equal function, which we might find useful.
is-eq-more-general-than = (\ (t1,t2) -> True() where <equal>(t1,t2) <+ <is-more-general-than>(t1,t2) \) 

