module library/abstractBoosterModel

imports
  include/Booster2
  library/setDef
  library/constraint
  library/valueExpression
  library/strategy
  library/basicTypes
 
  library/environment
  
 rules
 	
/* 	lookup-set-name:
		Takes an identifier, and a model, and returns it back again
		if the identifier is the name of a set in the model 	
*/

	lookup-set-name:
		setname -> setname
		where
			<elem>(setname, <map(get-setdef-name)> <LookupTable> "Sets")

/* 	lookup-set-value:
		Takes an identifier, and a model, and returns the 
		name of the set it appears in 	
*/

	lookup-set-value:
		setvalue -> setname
		where
			setname := <lookup-value-in-sets> (setvalue, <LookupTable> "Sets") 
			
/* 	lookup-class-name:
		Takes an identifier, and a model, and returns it back again
		if the identifier is the name of a class in the model 	
*/

	lookup-class-name:
		classname
			-> classname
		where
			<elem>(classname, <LookupTable> "Classes")


/* 	lookup-class-attributes:
		Takes an identifier, and a model, and returns it back again
		if the identifier is the name of a class in the model 	
*/

	lookup-class-attributes:
		classname
			-> <lookup>(classname, <LookupTable> "Attributes")

			
/* 	lookup-attribute-type:
		Takes a class name, and an attribute name, and a model, 
		and returns the type of that attribute in the model 	
*/

	lookup-attribute-type:
		(cname, aname)
			-> <\ (ds, t, opp, minmult, maxmult) -> t \><lookup>((cname, aname), <LookupTable> "Attribute")
			
/* 	lookup-input-type:
		Takes a class name, and a method name, and an input name,
		and a model, 
		and returns the type of that input in the model 	
*/

	lookup-input-type:
		((classname, methname), inputname)
			-> type
		where
			type := <lookup>(inputname,<lookup>((classname, methname), <LookupTable> "Inputs"))
			
	lookup-input-type:
			e -> String()
		where
			log(|Error(), "lookup-input-type fail", e)
			
			
/* 	lookup-input-type:
		Takes a class name, and a method name, and an input name,
		and a model, 
		and returns the type of that input in the model 	
*/

	lookup-output-type:
		(((classname, methname), outputname))
			-> type
		where
			type := <lookup>(outputname,<lookup>((classname, methname), <LookupTable> "Outputs"))
			
			
/* 	lookup-opposite:
		Takes a class name, and an attribute name, and a model, 
		and returns the class name, attribute name pair that is its opposite 	
*/

	lookup-opposite:
		((classname, attname))
			-> (classname1, attname1)
		where
			(classname1, attname1) := <lookup>((classname, attname), <LookupTable> "Opposites")
			
			
		
			
		
	get-type-constraint:
		path { BasicType(t) } 
			-> BinRel(path, In(), <get-type-extent> t)

	get-type-constraint:
		path { Optional(BasicType(t)) } 
			-> Or(BinRel(path, In(), <get-type-extent> t), BinRel(path, Equal(), Null()))
			

	get-type-constraint:
		path { Set(BasicType(t)) }
			-> BinRel(path, SubsetEquals(), <get-type-extent> t)


	get-type-constraint:
		path { Reference(name1) }
			-> BinRel(path, In(), PathStart(name1, None()))

	
	get-type-constraint:
		path { Optional(Reference(name1)) } 
			-> Or(BinRel(path, In(), PathStart(name1, None())), BinRel(path, Equal(), Null()))
			

	get-type-constraint:
		path { Optional(Reference(name1)) }
			-> BinRel(path, SubsetEquals(), PathStart(name1, None()))
							
										
			
			
			


	lookup-invariant:
		(classname, attname)
			->  inv
		where
			inv := <get-attribute-constraint> (classname, attname)
			
	

		
	get-multiplicity-constraint:
		path 
			-> constraint
		where
			att := <get-path-attribute> path;
			Set(s) := <lookup-attribute-type> att;
			constraint := <get-mult-constraint>(path, att)


	get-mult-constraint:
		(path, att)
			-> BinRel(UnOp(Cardinality(),path), GreaterThanEquals(), BasicValue(Integer(min)))
		where
			"*" := <lookup-max-mult> att ;
			min := <lookup-min-mult> att

	get-mult-constraint:
		(path, att)
			-> And(BinRel(UnOp(Cardinality(),path), LessThanEquals(), BasicValue(Integer(max))), BinRel(UnOp(Cardinality(),path), GreaterThanEquals(), Integer(min)))
		where
			max := <lookup-max-mult> att;
			min := <lookup-min-mult> att


	lookup-max-mult:
		(classname, attname)
			-> n
		where
			n := <lookup>((classname, attname), <LookupTable> "MaxMults")

	lookup-min-mult:
		(classname, attname)
			-> n
		where
			n := <lookup>((classname, attname), <LookupTable> "MinMults")


/*	lookup-invariants:
		(l, abm)
			-> []
		where
			debug */ 
			
	lookup-class-attributes:
		classname
		->
			<lookup>(classname, <LookupTable> "Attributes")

	lookup-class-methods:
		classname
		->
			<lookup>(classname, <LookupTable> "Operations")

	lookup-system-name:
		x -> <LookupTable> "Name"

	lookup-classes:
		x -> <LookupTable> "Classes"

	set-attribute-table-name:
		(classname, attname, tablename) ->
			[]
		where
			tableNames := (<LookupTable> "TableNames");
			tableNames' := <union>(tableNames, [((classname, attname), tablename)]);
			rules(
				LookupTable :+ "TableNames" -> tableNames'
			)

	set-attribute-table-name:
		(classname, attname, tablename) ->
			[]
		where
			rules(
				LookupTable :+ "TableNames" -> [((classname, attname), tablename)]
			)

	get-attribute-table-name:
		(classname, attname)
			-> elem
		where
			elem := <lookup>((classname, attname), <LookupTable> "TableNames")


	add-class-id:
		(classname, attname) ->
			[]
		where
			ids := (<LookupTable> "IDs");
			ids' := <union>(ids, [(classname, attname)]);
			rules(
				LookupTable :+ "IDs" -> ids'
			)

	add-class-id:
		(classname, attname) ->
			[]
		where
			rules(
				LookupTable :+ "IDs" -> [(classname, attname)]
			)

	get-class-ids:
		x
			-> elems
		where
			elems := <LookupTable> "Ids"
			

/***** TODO *****/
/*
	get-attribute-constraint:
		(classname, attname) -> constraint
			where		
				constraint := <lookup>((classname, attname), <LookupTable> "ClassBasedInvariants")

	get-attribute-constraint:
		(classname, attname) -> True()
				
*/				
	get-attribute-constraint:
		(classname, attname) -> True()
