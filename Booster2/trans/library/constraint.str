module library/constraint

imports
  include/Booster2
  
  library/relation
  library/environment
 
  library/strategy

  
  wp
  elaborate

  
 rules
 	
 	

			
/*	is-defined:
*/ 	

	is-defined:
		(classname, method, True(), env)
			-> True()

	is-defined:
		(classname, method, False(), env)
			-> True()
	
	is-defined:
		(classname, method, Not(constraint1), env)
			-> Not(constraint2)
		where
			constraint2 := <is-defined>(classname, method, constraint1, env)
			
	is-defined:
		(classname, method, And(constraint1, constraint2), env)
			-> And(constraint3, constraint4)
		where
			constraint3 := <is-defined>(classname, method, constraint1, env);
			constraint4 := <is-defined>(classname, method, constraint2, env)
			
	is-defined:
		(classname, method, Or(constraint1, constraint2), env)
			-> Or(And(constraint1, constraint3), And(constraint2, constraint4))
		where
			constraint3 := <is-defined>(classname, method, constraint1, env);
			constraint4 := <is-defined>(classname, method, constraint2, env)
	
	is-defined:
		(classname, method, Implies(constraint1, constraint2), env)
			-> Implies(And(constraint1, constraint3), And(constraint2, constraint4))
		where
			constraint3 := <is-defined>(classname, method, constraint1, env);
			constraint4 := <is-defined>(classname, method, constraint2, env)
		
	is-defined:
		(classname, method, Then(constraint1, constraint2), env)
			-> Then(constraint3, constraint4)
		where
			constraint3 := <is-defined>(classname, method, constraint1, env);
			constraint4 := <is-defined>(classname, method, constraint2, env)
			
			
	
	 

			
			
	
/*	combine-invariants:
		([invs1*],[invs2*])
			-> ([invs1*],[invs2*])
*/

/*
	combine-invariants:
		([], invs)
			-> []

	combine-invariants:
		([((classname, attname), constraint1), invs1*], [invs2*])
			-> [((classname, attname), constraint2), invs3*]
		where
			constraint2 := <get-invariant> ((classname, attname), [invs2*]);
			[invs3*] := <combine-invariants> ([invs1*], [invs2*])


	get-invariant:
		((classname, attname), [[((classname, attname), constraint2), invs1*], invs2*])
			-> And(constraint2, constraint3)
		where
			constraint3 := <get-invariant>((classname, attname), [[invs1*], invs2*])

	get-invariant:
		((classname, attname), [[((classname1, attname1), constraint2), invs1*], invs2*])
			-> constraint3
		where
			constraint3 := <get-invariant>((classname, attname), [[invs1*], invs2*])

	get-invariant:
		((classname, attname), [[], invs2*])
			-> constraint3
		where
			constraint3 := <get-invariant>((classname, attname), [invs2*])

	get-invariant:
		((classname, attname), [])
			-> True()
		
*/			

