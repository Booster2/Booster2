%% Grammar for the Booster language
%% By default, based on an example "entities" syntax
module AbstractBoosterModel

imports Common Booster2 Relational

exports

   context-free start-symbols
  	MaxMult Ordering Type GuardedCommand 
  	  	
  context-free syntax
    
  INT -> MaxMult {cons("MaxMult")}
  "*" -> MaxMult {cons("MaxMult")}
  MaxMult -> BoosterTerm
  
  "SET" -> Ordering {cons("Ordering")}
  "OSET" -> Ordering {cons("Ordering")}
  "SEQ" -> Ordering {cons("Ordering")}
  Ordering -> BoosterTerm
  
  'null' -> Type {cons("Null")}
  'INT' -> Type {cons("Int")}
  'STRING' -> Type {cons("String")}
  ID -> Type {cons("Reference")}

  '[' Type ']' -> Type {cons("Optional")}
  'set' '(' Type ')' -> Type {cons("Set")}
   
  'skip' -> GuardedCommand {cons("Skip"), prefer}
  Path ':=' Expression -> GuardedCommand {cons("Assign"), left}
  'new' ID '!' ':' ID -> GuardedCommand {cons("New")}
  Constraint '-->' GuardedCommand -> GuardedCommand {cons("Guard"), left}
  GuardedCommand '||' GuardedCommand -> GuardedCommand {cons("Parallel"), left}
  GuardedCommand ';'  GuardedCommand -> GuardedCommand {cons("Sequence"), left}
  GuardedCommand "[" "]" GuardedCommand -> GuardedCommand {cons("Choice"), left}
  'ALL' ID ':' Expression '.' GuardedCommand -> GuardedCommand {cons("Any"), prefer}
  'ANY' ID ':' Expression '.' GuardedCommand -> GuardedCommand {cons("All"), prefer}
  "(" GuardedCommand ")" -> GuardedCommand {bracket}
  GuardedCommand -> BoosterTerm
  
priorities
  'skip' -> GuardedCommand
  > Path ':=' Expression -> GuardedCommand
  > Constraint '-->' GuardedCommand -> GuardedCommand
  > GuardedCommand '||' GuardedCommand -> GuardedCommand  
  > GuardedCommand ';'  GuardedCommand -> GuardedCommand 
  > GuardedCommand "[" "]" GuardedCommand -> GuardedCommand
  