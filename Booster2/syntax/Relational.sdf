module Relational

imports Common

exports

   context-free start-symbols
  	Schema
  	  	
  context-free syntax
    
  
	'schema' ID "{" {Table "," }* {Procedure "," }* {Statement ","}* "}" -> Schema {cons("Schema")}

	'table' ID "{" {Column "," }* "}" -> Table {cons("Table")}
	
	
	'column'  ID STRING BOOL SQLType Extra Key Reference?-> Column {cons("Column")}
	%% name, default, isNullable, type, 'auto-increment', key 
	
	
	'varchar' '(' INT ')' -> SQLType {cons("Varchar")}
	
	'INT'  -> SQLType {cons("Int")}
	
	'bit' -> SQLType {cons("Bit")}
	
	'datetime'  -> SQLType {cons("Datetime")}
	
	'true' -> BOOL {cons("True")}
	'false' -> BOOL {cons("False")}
	
	'auto_increment' -> Extra {cons("AutoIncrement")}
	'/"/"' -> Extra {cons("NoExtra")}
	
	'Primary' -> Key {cons("Primary")}
	'Unique' -> Key {cons("Unique")}
	'Multiple' -> Key {cons("Multiple")}
	'None' -> Key {cons("NoKey")}
	
	'References' ID '(' { ID "," }* ')' -> Reference {cons("Reference")}
	
	"(" {Statement ";" }*  ")" -> StatementList {cons("StatementList")}
	
	'procedure' ID "(" {Parameter "," }*  ")" DeclareList StatementList -> Procedure {cons("Procedure")}

	'function' ID "(" {Parameter "," }*  ")" "returns" SQLType DeclareList StatementList -> Procedure {cons("Function")}
	
	'in' ID SQLType -> Parameter {cons("Input")}
	'out' ID SQLType -> Parameter {cons("Output")}
	'inout' ID SQLType -> Parameter {cons("InOut")}
	
	'if' SQLExpression 'then' StatementList
		{ ElseIf ";" }*
		Else?
	'end if'   -> Statement {cons("IfThen")}

	'begin' DeclareList StatementList 'end'   -> Statement {cons("BeginEnd")}
	
	Update -> Statement
	Query -> Statement 
	Insert -> Statement {cons("Insert")}
	'delete' -> Statement {cons("Delete")}
	Return -> Statement 
	'*' -> SQLExpression {cons("Star")}
	
	'true' -> SQLExpression {cons("True")}
	'false' -> SQLExpression {cons("False")}
	
	'elseif' SQLExpression 'then' StatementList -> ElseIf {cons("ElseIf")}
	'else' StatementList -> Else {cons("Else")}
	
	 SQLExpression "OR" SQLExpression -> SQLExpression {cons("Or")}
	 SQLExpression "||" SQLExpression -> SQLExpression {cons("Or")}
  	 SQLExpression "XOR" SQLExpression -> SQLExpression {cons("Xor")}
  	 SQLExpression "AND" SQLExpression -> SQLExpression {cons("And")}
  	 SQLExpression "&&" SQLExpression -> SQLExpression {cons("And")}
  	 "NOT" SQLExpression -> SQLExpression {cons("Not")}
  	 "!" SQLExpression -> SQLExpression {cons("Not")}
   	 BooleanPrimary "IS" Not? TFU -> SQLExpression {cons("Is")}
   	 BooleanPrimary -> SQLExpression
   	 SimpleExpression -> SQLExpression
   
   "True" -> TFU {cons("True")}
   "False" -> TFU {cons("False")}
   "Unknown" -> TFU {cons("Unknown")}
   
   "Not" -> Not{cons("Not")}

    BooleanPrimary "IS" Not? "NULL" -> BooleanPrimary {cons("IsNull")}
    BooleanPrimary "<=>" Predicate -> BooleanPrimary {cons("Iff")}
    BooleanPrimary "=" BooleanPrimary -> BooleanPrimary {cons("Equal")}
    BooleanPrimary ">=" BooleanPrimary -> BooleanPrimary {cons("GreaterThanEqual")}
    BooleanPrimary ">" BooleanPrimary -> BooleanPrimary {cons("GreaterThan")}
    BooleanPrimary "<=" BooleanPrimary -> BooleanPrimary {cons("LessThanEqual")}
    BooleanPrimary "<" BooleanPrimary -> BooleanPrimary {cons("LessThan")}
    BooleanPrimary "<>" BooleanPrimary -> BooleanPrimary {cons("NotEqual")}
    BooleanPrimary "!=" BooleanPrimary -> BooleanPrimary {cons("NotEqual")}

	BooleanPrimary "=" AllAny Query -> BooleanPrimary {cons("Equal")}
    BooleanPrimary ">=" AllAny Query -> BooleanPrimary {cons("GreaterThanEqual")}
    BooleanPrimary ">" AllAny Query -> BooleanPrimary {cons("GreaterThan")}
    BooleanPrimary "<=" AllAny Query -> BooleanPrimary {cons("LessThanEqual")}
    BooleanPrimary "<" AllAny Query -> BooleanPrimary {cons("LessThan")}
    BooleanPrimary "<>" AllAny Query -> BooleanPrimary {cons("NotEqual")}
    BooleanPrimary "!=" AllAny Query -> BooleanPrimary {cons("NotEqual")}
    
	"ALL" -> AllAny {cons("All")}
	"ANY" -> AllAny {cons("All")}
	
	Predicate -> BooleanPrimary
	
	BitExpression Not? "IN" Query -> Predicate {cons("InQuery")}
    BitExpression Not? "IN" SetExpression -> Predicate {cons("InSet")}
    BitExpression Not? "BETWEEN" BitExpression "AND" Predicate -> Predicate {cons("Between")}
    BitExpression "SOUNDS LIKE" BitExpression -> Predicate {cons("SoundsLike")}
    BitExpression Not? "LIKE" SimpleExpression Escape? -> Predicate {cons("Like")}
    BitExpression Not? "REGEXP" BitExpression -> Predicate {cons("Regexp")}
    BitExpression -> Predicate
    
    "ESCAPE" SimpleExpression -> Escape {cons("Escape")}
    
    BitExpression "|" BitExpression -> BitExpression {cons("BitOr")}
    BitExpression "&" BitExpression -> BitExpression {cons("BitAnd")}
    BitExpression "<<" BitExpression -> BitExpression {cons("BitShiftLeft")}
    BitExpression ">>" BitExpression -> BitExpression {cons("BitShiftRight")}
    BitExpression "+" BitExpression -> BitExpression {cons("Plus")}
    BitExpression "-" BitExpression -> BitExpression {cons("Minus")}
    BitExpression "*" BitExpression -> BitExpression {cons("Multiply")}
    BitExpression "/" BitExpression -> BitExpression {cons("Divide")}
    BitExpression "DIV" BitExpression -> BitExpression {cons("Div")}
    BitExpression "MOD" BitExpression -> BitExpression {cons("Mod")}
    BitExpression "%" BitExpression -> BitExpression {cons("Percent")}
    BitExpression "^" BitExpression -> BitExpression {cons("Power")}
    BitExpression "+" IntervalExpression -> BitExpression {cons("PlusInt")}
    BitExpression "-" IntervalExpression -> BitExpression {cons("MinusInt")}
    SimpleExpression -> BitExpression
    
    
    Literal -> SimpleExpression
    Identifier -> SimpleExpression
    FunctionCall -> SimpleExpression
    SimpleExpression "COLLATE" CollationName -> SimpleExpression {cons("Collate")}
    ParamMarker -> SimpleExpression
    Variable -> SimpleExpression
    SimpleExpression "||" SimpleExpression -> SimpleExpression {cons("Or")}
    "+" SimpleExpression -> SimpleExpression {cons("UnaryPlus")}
    "-" SimpleExpression -> SimpleExpression {cons("UnaryMinus")}
    "~" SimpleExpression -> SimpleExpression {cons("Reverse")}
    "!" SimpleExpression -> SimpleExpression {cons("Not")}
    "BINARY" SimpleExpression -> SimpleExpression {cons("Binary")}
    '(' {SQLExpression ","}+ ')' -> SetExpression {cons("SetExpression")}
    SetExpression -> SimpleExpression 
    "ROW" SQLExpression "," {SQLExpression ","}+ -> SimpleExpression {cons("Row")}
    Query -> SimpleExpression
    "EXISTS" Query -> SimpleExpression {cons("Exists")}
    '{' Identifier SQLExpression '}' -> SimpleExpression {cons("EscapeSyntax")}
    MatchExpression -> SimpleExpression
    CaseExpression -> SimpleExpression
    IntervalExpression -> SimpleExpression
    
    SQLSTRING -> Literal {cons("String")}
    INT -> Literal {cons("Int")}
    'true' -> Literal {cons("True")}
    'false' -> Literal {cons("False")}
    'null' -> Literal {cons("Null")}
    
    ID -> Identifier {cons("ColumnName")}
    ID '.' ID -> Identifier {cons("TableColumnName")}
    ID '.' ID '.' ID -> Identifier {cons("DBTableColumnName")}
    
    '@' ID -> Variable {cons("LocalVariable")}
    ID -> Variable {cons("SystemVariable")}
    
    '?' -> ParamMarker {cons("Marker")}
    
    "MATCH" '(' {ID ","}+ ')' "AGAINST" '(' SQLExpression SearchModifier?')' -> MatchExpression {cons("MatchExpression")}
    
    "IN BOOLEAN MODE" -> SearchModifier {cons("InBooleanMode")}
    "WITH QUERY EXPANSION" -> SearchModifier {cons("WithQueryExpansion")}
    
    "INTERVAL" SQLExpression Unit -> IntervalExpression {cons("IntervalExpression")}
    
    "MICROSECOND" -> Unit {cons("MicroSecondUnit")}
	"SECOND" -> Unit {cons("SecondUnit")}
	"MINUTE" -> Unit {cons("MinuteUnit")}
	"HOUR" -> Unit {cons("HourUnit")}
	"DAY" -> Unit {cons("DayUnit")}
	"WEEK" -> Unit {cons("WeekUnit")}
	"MONTH" -> Unit {cons("MonthUnit")}
	"QUARTER" -> Unit {cons("QuarterUnit")}
	"YEAR" -> Unit {cons("YearUnit")}
	"SECOND_MICROSECOND" -> Unit {cons("SecondMicroSecondUnit")}
	"MINUTE_MICROSECOND" -> Unit {cons("MinuteMicroSecondUnit")}
	"MINUTE_SECOND" -> Unit {cons("MinuteSecondUnit")}
	"HOUR_MICROSECOND" -> Unit {cons("HourMicroSecondUnit")}
	"HOUR_SECOND" -> Unit {cons("HourSecondUnit")}
	"HOUR_MINUTE" -> Unit {cons("HourMinuteUnit")}
	"DAY_MICROSECOND" -> Unit {cons("DayMicroSecondUnit")}
	"DAY_SECOND" -> Unit {cons("DaySecondUnit")}
	"DAY_MINUTE" -> Unit {cons("DayMinuteUnit")}
	"DAY_HOUR" -> Unit {cons("DayHourUnit")}
	"YEAR_MONTH" -> Unit {cons("YearMonthUnit")}
	
	"CASE" SQLExpression {CaseWhen ""}+ CaseElse? "END" -> CaseExpression {cons("CaseExpression")} 
	
	"WHEN" SQLExpression "THEN" SQLExpression -> CaseWhen {cons("CaseWhen")}
	
	"ELSE" SQLExpression -> CaseElse {cons("CaseElse")}
	
	ID '(' {Parameter ","}* ')' -> FunctionCall {cons("FunctionCall")}
	
	SQLExpression -> Parameter
	
	ID -> CollationName
	
	"SELECT"
	{SelectType ""}*
    {SelectExpression ","}+
    FromPart?
    WherePart?
	GroupByPart?
    HavingPart?
	OrderByPart?
	LimitPart?
	ProcedurePart?
	IntoPart?
	ModePart? -> Query {cons("Select")}
   
	
	"ALL" -> SelectType {cons("All")}
	"DISTINCT" -> SelectType {cons("Distinct")}
	"DISTINCTROW" -> SelectType {cons("DistinctRow")}
    "HIGH_PRIORITY" -> SelectType {cons("HighPriority")}
    "STRAIGHT_JOIN" -> SelectType {cons("StraightJoin")}
    "SQL_SMALL_RESULT"  -> SelectType {cons("SmallResult")}
    "SQL_BIG_RESULT" -> SelectType {cons("BigResult")}
    "SQL_BUFFER_RESULT" -> SelectType {cons("BufferResult")}
    "SQL_CACHE" -> SelectType {cons("Cache")}
    "SQL_NO_CACHE" -> SelectType {cons("NoCache")}
    "SQL_CALC_FOUND_ROWS" -> SelectType {cons("CalcFoundRows")}
    
    
    SQLExpression -> SelectExpression
    ID -> SelectExpression {cons("ColumnName")}
    ID '.' ID -> SelectExpression {cons("TableColumnName")}
    SQLExpression 'AS' ID -> SelectExpression {cons("ExpressionAs")}
    ID 'AS' ID  -> SelectExpression {cons("ColumnNameAs")}
    ID '.' ID 'AS' ID  -> SelectExpression {cons("TableColumnNameAs")}
    '*' -> SelectExpression {cons("Star")}
    
    "FROM" {TableReference ""}* -> FromPart {cons("FromPart")}
    
    "WHERE" SQLExpression -> WherePart {cons("Where")}

    "GROUP BY" SQLExpression
     Order? 
     Rollup? -> GroupByPart {cons("GroupByPart")}
     
     "WITH ROLLUP" -> Rollup {cons("Rollup")}
     
     "ASC" -> Order {cons("Ascending")}
     "DESC" -> Order {cons("Descending")}
	
	"HAVING" SQLExpression -> HavingPart {cons("HavingPart")}
	
	 "ORDER BY" SQLExpression
     Order? -> OrderByPart {cons("OrderByPart")}

     "LIMIT" INT? INT -> LimitPart {cons("LimitOffset")}
     "LIMIT" INT "OFFSET" INT -> LimitPart {cons("LimitOffset")}


     "PROCEDURE" ID '(' {Parameter "," }* ')' -> ProcedurePart {cons("ProcedurePart")}

     "INTO OUTFILE" SQLSTRING
     CharSet?
     ExportOptions -> IntoPart {cons("IntoOutFile")}

     "INTO DUMPFILE" SQLSTRING -> IntoPart {cons("IntoDumpFile")}
     "INTO" { ID ","}*  -> IntoPart {cons("Into")}
      
     "CHARACTER SET" ID -> CharSet {cons("CharSet")} 
      
     "FOR UPDATE" -> ModePart {cons("ForUpdate")}
     "LOCK IN SHARE MODE" -> ModePart {cons("LockShareMode")}

	 "ExportOptionsUnknown" -> ExportOptions {cons("ExportOptions")}
	 
	 TableFactor -> TableReference
     JoinTable -> TableReference

    ID -> TableFactor {cons("TableName")}
    ID Alias {IndexHint ""}* -> TableFactor {cons("Aliased")}
    Query Alias -> TableFactor {cons("Query")}
    '(' {TableReference ""}* ')' -> TableFactor {cons("Bracket")}
    "OJ" TableReference 'LEFT OUTER JOIN' TableReference
        "ON" SQLExpression -> TableFactor {cons("OJ")}

     "AS" ID -> Alias {cons("Alias")}

	
    TableReference "INNER JOIN" TableFactor JoinCondition? -> JoinTable {cons("InnerJoin")}
    TableReference "CROSS JOIN" TableFactor JoinCondition? -> JoinTable {cons("CrossJoin")}
    TableReference "STRAIGHT_JOIN" TableFactor JoinCondition? -> JoinTable {cons("StraightJoin")}
    TableReference "LEFT JOIN" TableReference JoinCondition -> JoinTable {cons("LeftJoin")}
    TableReference "LEFT OUTER JOIN" TableReference JoinCondition -> JoinTable {cons("LeftOuterJoin")}
    TableReference "RIGHT JOIN" TableReference JoinCondition -> JoinTable {cons("RightJoin")}
    TableReference "RIGHT OUTER JOIN" TableReference JoinCondition -> JoinTable {cons("RightOuterJoin")}
    TableReference "NATURAL LEFT JOIN" TableFactor JoinCondition -> JoinTable {cons("NaturalLeftJoin")}
    TableReference "NATURAL LEFT OUTER JOIN" TableFactor JoinCondition -> JoinTable {cons("NaturalLeftOuterJoin")}
    TableReference "NATURAL RIGHT JOIN" TableFactor JoinCondition -> JoinTable {cons("NaturalRightJoin")}
    TableReference "NATURAL RIGHT OUTER JOIN" TableFactor JoinCondition -> JoinTable {cons("NaturalRightOuterJoin")}


    "ON" SQLExpression -> JoinCondition {cons("On")}
    "USING" {ID ","}+ -> JoinCondition {cons("Using")}


    "USE" IndexKey ForClause? -> IndexHint {cons("Use")}
    "IGNORE" IndexKey ForClause? -> IndexHint {cons("Ignore")}
    "FORCE" IndexKey ForClause? -> IndexHint {cons("Force")}


	"INDEX" -> IndexKey {cons("Index")}
	"KEY" -> IndexKey {cons("Key")}
	 
	 
	
	"FOR" Jog ({ID ","}+) -> ForClause {cons("ForClause")}
	
	"JOIN" -> Jog {cons("Join")}
	"ORDER BY" -> Jog {cons("OrderBy")}
	"GROUP BY" -> Jog {cons("GroupBy")}
	
	
	
	"UPDATE" UpdateOption* TableReference
    "SET" UpdateSet+
    WherePart?
    OrderByPart?
    LimitPart? -> Update {cons("Update")}
    
    
    "LOW_PRIORITY" -> UpdateOption {cons("LowPriority")}
    "IGNORE" -> UpdateOption {cons("Ignore")}
    
    ID "=" SQLExpression -> UpdateSet {cons("UpdateSet")}
    ID "=" "DEFAULT" -> UpdateSet {cons("UpdateSetDefault")}
    
    'INSERT'
    InsertPriority? 
    Ignore?
    Into?
    ID '(' {ID ","}* ')'
    'values'
    '(' {SQLExpression ","}* ')'
    OnDuplicate? -> Insert {cons("Insert")}
    
    'LOW_PRIORITY' -> InsertPriority {cons("LowPriority")}
    'DELAYED' -> InsertPriority {cons("DelayedPriority")}
    'HIGH_PRIORITY' -> InsertPriority {cons("HighPriority")}
    
    'IGNORE' -> Ignore {cons("Ignore")}
    
    'INTO' -> Into {cons("Into")}
    
    'Values' -> Values {cons("Values")}
    'Value' -> Values {cons("Values")}
    
    'ON' 'DUPLICATE' 'KEY' 'UPDATE' {UpdatePart ","}* -> OnDuplicate {cons("OnDuplicate")}

	ID '=' SQLExpression -> UpdatePart {cons("UpdatePart")}
	
	{Declare ";"}* -> DeclareList {cons("DeclareList")}
	
	'DECLARE' {ID ","}+ SQLType DefaultDeclare? -> Declare {cons("Declare")}
	
	'default' SQLExpression -> DefaultDeclare {cons("DefaultDeclare")}
	
	'return' SQLExpression -> Return {cons("Return")}