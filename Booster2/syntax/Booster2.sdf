%% Grammar for the Booster language
module Booster2

%% We import some definitions from the Abstract Booster Model (which
%% includes syntax for guarded commands), and from the relational model,
%% which includes an SQL syntax.

imports Common AbstractBoosterModel Relational

exports


%% The start token for any instance is the \verb|system| token.
context-free start-symbols
  System
  	  	
context-free syntax
    
%% A system consists in the keyword \verb|System|, along with an
%% identifier, and a set of system components.

'system' ID ( SystemComponent )* -> System {cons("System")}

System -> BoosterTerm


%% Note that every construct in the language is a 'Booster term', which
%% is a hook to allow some concrete syntax transformations.

%% System components are either set definitions, or class definitions.
	
SetDef -> SystemComponent
Class -> SystemComponent
	
SystemComponent -> BoosterTerm


%% A set definition begins with the keyword \verb|set|, and an
%% identifier.  A non-empty list of enumerated values is given, within
%% curly brackets (\verb|{}|).
 
'set' ID '{' {ID ','}+ '}' -> SetDef {cons("SetDef")}

SetDef -> BoosterTerm



%% A class is defined with the keyword \verb|class| and an identifier.
%% There is an optional extension clause, and then a list of class
%% components, surrounded in curly brackets (\verb|{}|).

'class' ID Extends? '{' ClassComponents * '}' -> Class  {cons("Class")}

Class -> BoosterTerm
	

%% An extends clause is the keyword \verb|extends|, and a list of class
%% names, which must be non-empty.

'extends' {Extension ','}+ -> Extends {cons("Extend")}

Extends -> BoosterTerm

ID -> Extension {cons("Extension")}
	 


%% A class component is a section containing attributes, methods,
%% invariants or workflows.  Each section is prefixed by the appropriate
%% keyword. 

'attributes' Attribute*  -> ClassComponents {cons("Attributes")}
'methods' Method*  -> ClassComponents {cons("Methods")}
'invariants' Constraint* -> ClassComponents {cons("Invariant")}
'workflows' WorkflowComponent* -> ClassComponents {cons("Workflows")}
	
ClassComponents -> BoosterTerm
	 
	 
%% An attribute declaration contains an identifier, an optional list of
%% decorations, and a type declaration.  The type is separated by a colon
%% \verb|:|.

ID Decoration* ':' TypeDecl -> Attribute {cons("Attribute")}

Attribute -> BoosterTerm


%% At the moment, the only decoration currently supported is that of
%% identity, which is simply the keword \verb|ID|, surrounded in
%% brackets.
	 
'(' 'ID' ')' -> Identity {cons("Identity")}
	 
Identity -> Decoration


%% A type declaration uses the 'primitive' type declaration in one of
%% three forms: undecorated, to mean mandatory; in square brackets
%% (\verb|[]|) to indicate optionality; with the keyword \verb|set|, and
%% round brackets, to indicate a set-valued attribute.  In the latter
%% case, a mutiplicity is also required in square brackets (\verb|[]|).
  	 
PrimTypeDecl -> TypeDecl  
'[' PrimTypeDecl ']' -> TypeDecl {cons("Optional")} 
'set' '(' PrimTypeDecl ')' '[' Multiplicity ']' ->  TypeDecl {cons("Set")}

TypeDecl -> BoosterTerm


%% A primitive type declaration is either one of the basic types; or it
%% is the name of a class, or set definition; or a class identifier with
%% an attribute name, signifying the opposite attribute.

BasicTypeDecl -> PrimTypeDecl {cons("BasicType")}

ID -> PrimTypeDecl {cons("UniDirectional")}
ID '.' ID -> PrimTypeDecl {cons("BiDirectional")}

PrimTypeDecl -> BoosterTerm
 
 
%% A basic type is either a string, an integer, a datetime, or a boolean
%% value:
 
'STRING' -> BasicTypeDecl {cons("String")}
'INT' -> BasicTypeDecl {cons("Int")}
'DECIMAL' -> BasicTypeDecl {cons("Decimal")}
'DATE' -> BasicTypeDecl {cons("Date")}
'TIME' -> BasicTypeDecl {cons("Time")}
'DATETIME' -> BasicTypeDecl {cons("DateTime")}
'BOOLEAN' -> BasicTypeDecl {cons("Boolean")}
'PASSWORD' -> BasicTypeDecl {cons("Password")}
 

%% Mupliticties can come in many forms.  See
%% section~\ref{sec:language-classes} for more details.  Here the
%% different formalisms are enumerated explicitly:
 
INT '..' INT -> Multiplicity {cons("MultMinAndMax")}
    '..' INT -> Multiplicity {cons("MultJustMax")}
INT '..'     -> Multiplicity {cons("MultJustMin")}
INT '..' '*' -> Multiplicity {cons("MultJustMin")}
     INT     -> Multiplicity {cons("MultSingle")}
	  '*'     -> Multiplicity {cons("MultAny")}

Multiplicity -> BoosterTerm


%% A method is defined with an identifier, and a constraint within curly
%% brackets (\verb|{}|).  For the purposes of auto-completion, it is
%% useful to define allow an expression instead of a constraint: this is
%% marked as deprecated to warn the user.  For the purposes of debugging,
%% a method body may also be defined as a guarded command.

ID '{' Constraint '}' -> Method {cons("Method")}
%% ID '{' Expression '}' -> Method {cons("Method"), deprecated}
ID '{' GuardedCommand '}' -> Method {cons("Method")}

Method -> BoosterTerm

%% In its simplest form, a constraint is either \verb|true|,
%% \verb|false|, or a relation between expressions: 
	 
'true' 				-> Constraint {cons("True")}
'false' 			-> Constraint {cons("False")}
Relation 			-> Constraint 


%% Alternatively, a constraint may be made up of smaller constraints,
%% using the logical combinators \emph{not}, \emph{and}, \emph{or},
%% \emph{implies}, or \emph{relational composition}.  A constraint may
%% also appear in brackets, to denote operator precedence.

'not' Constraint		-> Constraint { cons("Not")}
Constraint '&' Constraint 	-> Constraint { cons("And"), assoc}
Constraint 'or' Constraint 	-> Constraint { cons("Or"), assoc}
Constraint '=>' Constraint 	-> Constraint { cons("Implies"), assoc}
Constraint ';' Constraint 	-> Constraint { cons("Then"), assoc}
"(" Constraint ")" 		-> Constraint { bracket}

%% These should not available in the user syntax, but are there to help with
%% normalisation and simplification

"conjuncts" { Constraint "&" }* -> Constraint {cons("Conjuncts"), deprecated}
"disjuncts" { Constraint "or" }* -> Constraint {cons("Disjuncts"), deprecated}

%% More complex combinators are provided in the quantifiers: existential
%% and unviersal.  These use the keywords \verb|exists| and \verb|forall|
%% respectively, and declare a quantified variable, a set expression
%% denoting the range, and a constraint:

'exists' ID ":" Expression "@" Constraint -> Constraint {cons("Exists")}
'forall' ID ":" Expression "@" Constraint -> Constraint {cons("Forall")}


%% The final type of constraint is that of a method reference, which is
%% defined later.

MethodReference -> Constraint 
  	 
Constraint -> BoosterTerm 


%% A relation, or comparison between two expressions, is simply the two
%% expressions separated by an operator:

Expression BinRel Expression -> Relation {cons("BinRel")}

Relation -> BoosterTerm


%% The list of relational operators are as follows:
  	 
'=' 	-> BinRel {cons("Equal")}
'/=' 	-> BinRel {cons("NotEqual")}
':' 	-> BinRel {cons("In")}
'/:' 	-> BinRel {cons("NotIn")}
'<' 	-> BinRel {cons("LessThan")}
'>' 	-> BinRel {cons("GreaterThan")}
'<=' 	-> BinRel {cons("LessThanEquals")}
'>=' 	-> BinRel {cons("GreaterThanEquals")}
'<:' 	-> BinRel {cons("Subset")}
'<<:' 	-> BinRel {cons("SubsetEquals")}
':>' 	-> BinRel {cons("Superset")}
':>>' 	-> BinRel {cons("SupersetEquals")}

    
%% An expression is either a simple value expression, or is formed of sub
%% expressions: either through a unary operator or a binary operator -
%% the lists of these are defined below.  Brackets are also permitted to
%% declare precedence.    
    
ValueExpression 	-> Expression
UnOp Expression 	-> Expression {cons("UnOp"), left}

"(" Expression ")" 	-> Expression {bracket}

Expression BinOp Expression -> Expression {cons("BinOp"), left}

Expression -> BoosterTerm


%% A value expression may be either a basic value, such as an integer or
%% string; a type extent, such as the set of all integers; a path
%% expression; the \emph{null} value; or a (possibly empty) set of
%% further expressions.  In the final case, the expressions are presented
%% in a comma-separated list, surrounded by curly brackets (\verb|{}|):

BasicValue -> ValueExpression {cons("BasicValue")}
TypeExtent -> ValueExpression {cons("TypeExtent")}
Path		-> ValueExpression {} 
'null'		-> ValueExpression {cons("Null"), prefer}
"{" {Expression "," }* "}" -> ValueExpression {cons("SetExtent")}

ValueExpression -> BoosterTerm


 %% A basic value can either be a string, or an integer:   

INT 		-> BasicValue {cons("Integer")}
STRING		-> BasicValue {cons("String")}
DECIMAL		-> BasicValue {cons("Decimal")}
'true'		-> BasicValue {cons("True")}
'false'		-> BasicValue {cons("False")}

'currentdatetime' -> BasicValue {cons("CurrentDateTime")}
'currentdate' -> BasicValue {cons("CurrentDate")}
'currenttime' -> BasicValue {cons("CurrentTime")}

%% A type extent is simply the name of one of the basic types:
    
'string'	-> TypeExtent {cons("String"), prefer}
'int'		-> TypeExtent {cons("Int"), prefer}
'decimal'	-> TypeExtent {cons("Decimal"), prefer}
'date'		-> TypeExtent {cons("Date"), prefer}
'time'		-> TypeExtent {cons("Time"), prefer}
'datetime'	-> TypeExtent {cons("DateTime"), prefer}
'boolean'	-> TypeExtent {cons("Boolean"), prefer}
'password'	-> TypeExtent {cons("Password"), prefer}
    
%% A path is either a \emph{path start}, or it is a path followed by a
%% path component, using the standard 'dot' (\verb|.|) notation.

PathStart -> Path
Path '.' PathComponent -> Path {cons("Path"), prefer}

Path -> BoosterTerm


%% A \emph{path start} can be an input, or an output, the keyword
%% \emph{this} in a primed or unprimed fashion, or an attribute
%% identifier, which again, may be optionally primed.

Input -> PathStart
Output -> PathStart
This -> PathStart
ThisPrimed -> PathStart
ID Primed? -> PathStart {cons("PathStart")}

PathStart -> BoosterTerm


%% Inputs are simply an identifier with the \verb|?| decoration; ouptuts
%% are identifiers with the \verb|!| decoration.

ID "?" -> Input {cons("Input")}
ID "!" -> Output {cons("Output")}


%% The keyword \verb|this| is used to indicate the current object.  It
%% may appear in primed form.

'this' -> This {cons("This")}
'this' "'" -> ThisPrimed {cons("ThisPrimed")}


%% The primed decoration is simply the character \verb|'|.

"'" -> Primed {cons("Primed")}

Primed -> BoosterTerm


%% A path component is simply an attribute name, which may optionally be
%% primed:

ID Primed? -> PathComponent {cons("PathComponent")}

%% For auto-completion purposes, it is handy to understand the unfinished
%% path: the empty path component.

 -> PathComponent {cons("PathComponent"), deprecated}

PathComponent -> BoosterTerm

%% The list of unary expression operators is given below:

'head' -> UnOp {cons("Head")}
'tail' -> UnOp {cons("Tail")}
'card' -> UnOp {cons("Cardinality")}
'-'    -> UnOp {cons("Negative")}


%% The list of binary expression operators is given below:

"+"		-> BinOp {cons("Plus")}
"-" 	-> BinOp {cons("Minus")}
"*" 	-> BinOp {cons("Times")}
"/" 	-> BinOp {cons("Divide")}
"max" 	-> BinOp {cons("Maximum")}
"min" 	-> BinOp {cons("Minimum")}
"/\\" 	-> BinOp {cons("Intersection")}
"\\/" 	-> BinOp {cons("Union")}
"++" 	-> BinOp {cons("Concat")}
    
    
%% A method reference consists in a path, which denotes the name of the
%% method, and the object on which the method is to be performed.  A list
%% of substitutions is provided in brackets: an input name and an
%% expression it is to be replaced with, separated by an equals
%% (\verb|=|) sign.    

Path '(' { ( Input '=' Expression) "," }* ')' -> MethodReference {cons("MethodReference")}

MethodReference -> BoosterTerm
  
   
%% A workflow component is either a sequential workflow, or a parallel
%% workflow.

SeqWf -> WorkflowComponent
ParWf -> WorkflowComponent
    
%% Both sequential and parallel workflows are introduced with the
%% keywords \verb|seq| and \verb|par| respectively.  An identifier is
%% provided, followed by a colon (\verb|:|).  Finally an expression
%% of the appropriate type is given.
    
'seq' ID ':' SeqWfExpression 		-> SeqWf {cons("SeqWf")}
'par' ID ':' ParWfExpression		-> ParWf {cons("ParWf")}

'par' Constraint '&' ID ':' ParWfExpression		-> ParWf {cons("ParWf2")}
  
%% A sequential workflow expression is either the keyword \verb|skip|, or
%% the choice between two guarded actions, or a wait expression:   
'Skip'										-> SeqWfExpression {cons("Skip")}
  
GuardedAction '->' SeqWfExpression
'[]' 
GuardedAction '->' SeqWfExpression 			-> SeqWfExpression{cons("Choice")}
  
'WAIT{' { INT "," }+ '}' '->' SeqWfExpression	-> SeqWfExpression {cons("Wait")}


%% A sequential workflow may also be defined as a reference to another
%% sequential workflow, a guarded sequential workflow, or may be
%% bracketed to resolve ambiguities.  These definitions are intended to
%% be syntactic sugar, and should be simplified before any precondition
%% calculation is attempted.

ID 									-> SeqWfExpression {cons("WorkflowReference")}
GuardedAction '->' SeqWfExpression 	-> SeqWfExpression {cons("Prefix")}
"(" SeqWfExpression ")" 			-> SeqWfExpression {bracket}

%% A guarded action is simply a guard expression, followed by a method
%% reference:

Guard '&' MethodReference					-> GuardedAction {cons("GA")}
"(" GuardedAction ")"						-> GuardedAction {bracket}

  
%% And a guard is just a constraint or may be tagged with the keyword
%% \verb|Delayed|. This is only used in the precondition calculation - at least
%% once we support prioritisable guarded actions. 
%% A guard may also be bracketed to resolve ambiguities.  

Constraint			 						-> Guard {cons("Normal")}
'Delayed' Constraint 						-> Guard {cons("Delayed")}
  
%% Parallel workflows may be a reference to another workflow, or the
%% parallel combination of another workflow and a parallel workflow
%% expression.  

ID						 -> ParWfExpression {cons("Single")}
ID '|||' ParWfExpression -> ParWfExpression {cons("Multiple")}
  

context-free priorities
	GuardedAction '->' SeqWfExpression 		-> SeqWfExpression
	> GuardedAction '->' SeqWfExpression
      '[]' 
      GuardedAction '->' SeqWfExpression	-> SeqWfExpression
     
context-free priorities
	 'not' Constraint		-> Constraint 
	 > Constraint '&' Constraint 	-> Constraint 
  	 > Constraint 'or' Constraint 	-> Constraint
 	 > Constraint '=>' Constraint 	-> Constraint 
 	 > Constraint ';' Constraint 	-> Constraint 
 	 	  
context-free priorities

  ValueExpression 				-> Expression
> UnOp Expression 				-> Expression
> Expression BinOp Expression 	-> Expression
