module names

imports
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/properties/-
  lib/runtime/types/-
  lib/runtime/relations/-
  lib/runtime/editor/-
  include/Booster25


signature
  constructors
    NablNsSystem    : Namespace
    NablNsSet       : Namespace
    NablNsSetVal    : Namespace
    NablNsClass     : Namespace
    NablNsAttribute : Namespace
    NablNsMethod    : Namespace
    NablNsThis      : Namespace
    NablNsVariable  : Namespace


signature
  constructors
    


rules

  nabl-custom-properties(add-properties) =
    ![] ; add-properties


rules

  nabl-get-scope =
    ?System(s, c)
    ; ![NablNsClass(), NablNsSet(), NablNsSetVal()]

  nabl-get-name :
    System(s, c) -> s

  nabl-name-apply(s) =
    System(s, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?System(s, c)
    ; origin-track-forced(
        System(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsSystem()
          , Unique()
          , Current()
          , [NablNsClass(), NablNsSet(), NablNsSetVal()]
          , []
          )
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-get-scope =
    ?SetDef(s, values)
    ; ![NablNsThis()]

  nabl-get-name :
    SetDef(s, values) -> s

  nabl-name-apply(s) =
    SetDef(s, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?SetDef(s, values)
    ; origin-track-forced(
        SetDef(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsSet()
          , Unique()
          , Current()
          , [NablNsThis()]
          , []
          )
        , id
        )
      |
      )
    ; where(i-2__ := <nabl-def(
                        ?c-uri2__
                      , ?s-uri2__
                      | lang__
                      , ctx__
                      , uniques__
                      , c-uri1__
                      , s-uri1__
                      , NablNsThis()
                      , Unique()
                      , Current()
                      , []
                      , []
                      )> This())
    ; match(child-uris__|c-uri2__)
    ; match(sibl-uris__|s-uri2__)
    ; match(implicits__|[i-2__])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?SetDef(s, values)
    ; (where([i-2__] := implicits__)
       ; where(id)
       ; SetDef(
           nabl-store-props(
           | ctx__
           , [Prop(Type(), s, [])]
           )
         , id
         )
       ; where(id)
       ; where(<nabl-store-props(
                | ctx__
                , [Prop(Type(), s, [])]
                )> i-2__))
    ; fail

  nabl-get-name :
    SetVal(value) -> value

  nabl-name-apply(s) =
    SetVal(s)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?SetVal(value)
    ; origin-track-forced(
        SetVal(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsSetVal()
          , Unique()
          , Current()
          , []
          , []
          )
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?SetVal(value)
    ; (where(this := <nabl-use-candidate(
                      | lang__
                      , ctx__
                      , uris__
                      , <nabl-fix-name> This()
                      )> <{:
                            id
                            ; !UseCandidate(
                                 NablNsThis()
                               , []
                               , Current()
                               , True()
                               , []
                               )
                          }>
             ; {prev__:
                 ?prev__
                 ; ty := <new-task-fixdeps(|ctx__, [prev__])> Id(
                                                                <get-or-create-property-task(|ctx__, Type())> this
                                                              )
               })
       ; SetVal(
           nabl-store-props(
           | ctx__
           , [Prop(Type(), ty, [])]
           )
         ))
    ; fail

  nabl-get-scope =
    ?Class(c, extends, members)
    ; ![NablNsMethod(), NablNsAttribute(), NablNsThis()]

  nabl-get-name :
    Class(c, extends, members) -> c

  nabl-name-apply(s) =
    Class(s, id, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?Class(c, extends, members)
    ; origin-track-forced(
        Class(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsClass()
          , Unique()
          , Current()
          , [NablNsMethod(), NablNsAttribute(), NablNsThis()]
          , []
          )
        , id
        , id
        )
      |
      )
    ; where(i-2__ := <nabl-def(
                        ?c-uri2__
                      , ?s-uri2__
                      | lang__
                      , ctx__
                      , uniques__
                      , c-uri1__
                      , s-uri1__
                      , NablNsThis()
                      , Unique()
                      , Current()
                      , []
                      , []
                      )> This())
    ; match(child-uris__|c-uri2__)
    ; match(sibl-uris__|s-uri2__)
    ; match(implicits__|[i-2__])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?Class(c, extends, members)
    ; (where([i-2__] := implicits__)
       ; where(id)
       ; Class(
           nabl-store-props(
           | ctx__
           , [Prop(Type(), c, [])]
           )
         , id
         , id
         )
       ; where(id)
       ; where(<nabl-store-props(
                | ctx__
                , [Prop(Type(), c, [])]
                )> i-2__))
    ; fail

  nabl-get-name :
    Extension(c) -> c

  nabl-name-apply(s) =
    Extension(s)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?Extension(c)
    ; origin-track-forced(
        Extension(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsClass()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        )
      |
      )

  nabl-import-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?Extension(c)
    ; origin-track-forced(
        nabl-import(
        | lang__
        , ctx__
        , uniques__
        , uris__
        , [ <{:
               id
               ; !Wildcard(
                    [ Import(lang__, NablNsAttribute())
                    , Import(lang__, NablNsMethod())
                    ]
                  , Context(
                      NablNsClass()
                    , c
                    , []
                    , Current()
                    )
                  , Current()
                  , []
                  )
             }>
          ]
        )
      |
      )

  nabl-get-name :
    Attribute(a, dec, a-ty) -> a

  nabl-name-apply(s) =
    Attribute(s, id, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?Attribute(a, dec, a-ty)
    ; origin-track-forced(
        Attribute(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsAttribute()
          , Unique()
          , Current()
          , []
          , []
          )
        , id
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?Attribute(a, dec, a-ty)
    ; (where(ty := <new-task-fixdeps(|ctx__, [])> Id(
                                                    <get-or-create-property-task(|ctx__, Type())> a-ty
                                                  ))
       ; Attribute(
           nabl-store-props(
           | ctx__
           , [Prop(Type(), ty, [])]
           )
         , id
         , id
         ))
    ; fail

  nabl-get-scope =
    ?Method(m, body)
    ; ![NablNsVariable()]

  nabl-get-name :
    Method(m, body) -> m

  nabl-name-apply(s) =
    Method(s, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?Method(m, body)
    ; origin-track-forced(
        Method(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsMethod()
          , Unique()
          , Current()
          , [NablNsVariable()]
          , []
          )
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-get-name :
    UniDirectional(s) -> s

  nabl-name-apply(s) =
    UniDirectional(s)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?UniDirectional(s)
    ; origin-track-forced(
        UniDirectional(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsSet()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            , <{:
                 id
                 ; !UseCandidate(
                      NablNsClass()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        )
      |
      )

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?BiDirectional(class, attr)
    ; origin-track-forced(
        BiDirectional(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsClass()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        , id
        )
      |
      )
    ; origin-track-forced(
        BiDirectional(
          id
        , nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsAttribute()
                    , []
                    , Context(
                        NablNsClass()
                      , class
                      , []
                      , Current()
                      )
                    , True()
                    , []
                    )
               }>
            ]
          )
        )
      |
      )

  nabl-get-name :
    PathStart(p, prime) -> p

  nabl-name-apply(s) =
    PathStart(s, id)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?PathStart(p, prime)
    ; origin-track-forced(
        PathStart(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsAttribute()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            , <{:
                 id
                 ; !UseCandidate(
                      NablNsMethod()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            , <{:
                 id
                 ; !UseCandidate(
                      NablNsClass()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            , <{:
                 id
                 ; !UseCandidate(
                      NablNsSetVal()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            , <{:
                 id
                 ; !UseCandidate(
                      NablNsVariable()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        , id
        )
      |
      )

  nabl-get-name :
    Input(v) -> v

  nabl-name-apply(s) =
    Input(s)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?Input(v)
    ; origin-track-forced(
        Input(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsVariable()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        )
      |
      )

  nabl-get-name :
    Output(v) -> v

  nabl-name-apply(s) =
    Output(s)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?Output(v)
    ; origin-track-forced(
        Output(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsVariable()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        )
      |
      )

  nabl-get-name :
    Path(path-start, PathComponent(a, prime)) -> a

  nabl-name-apply(s) =
    Path(id, PathComponent(s, id))

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?Path(path-start, PathComponent(a, prime))
    ; origin-track-forced(
        Path(
          id
        , origin-track-forced(
            PathComponent(
              nabl-use(
              | lang__
              , ctx__
              , uniques__
              , uris__
              , [ <{c:
                     c := <new-task-fixdeps(|ctx__, [])> Id(
                                                           <get-or-create-property-task(|ctx__, Type())> path-start
                                                         )
                     ; !UseCandidate(
                          NablNsAttribute()
                        , []
                        , Context(
                            NablNsClass()
                          , c
                          , []
                          , Current()
                          )
                        , True()
                        , []
                        )
                   }>
                , <{c:
                     c := <new-task-fixdeps(|ctx__, [])> Id(
                                                           <get-or-create-property-task(|ctx__, Type())> path-start
                                                         )
                     ; !UseCandidate(
                          NablNsMethod()
                        , []
                        , Context(
                            NablNsClass()
                          , c
                          , []
                          , Current()
                          )
                        , True()
                        , []
                        )
                   }>
                ]
              )
            , id
            )
          |
          )
        )
      |
      )

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?This()
    ; origin-track-forced(
        nabl-use(
        | lang__
        , ctx__
        , uniques__
        , uris__
        , [ <{:
               id
               ; !UseCandidate(
                    NablNsThis()
                  , []
                  , Current()
                  , True()
                  , []
                  )
             }>
          ]
        )
      |
      )

  nabl-get-name :
    BinRelDefLeftInput(v, op, rhs) -> v

  nabl-name-apply(s) =
    BinRelDefLeftInput(s, id, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?BinRelDefLeftInput(v, op, rhs)
    ; origin-track-forced(
        BinRelDefLeftInput(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsVariable()
          , Unique()
          , Current()
          , []
          , []
          )
        , id
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?BinRelDefLeftInput(v, op, rhs)
    ; (where(t := <new-task-fixdeps(|ctx__, [])> Id(
                                                   <get-or-create-property-task(|ctx__, Type())> rhs
                                                 ))
       ; BinRelDefLeftInput(
           nabl-store-props(
           | ctx__
           , [Prop(Type(), t, [])]
           )
         , id
         , id
         ))
    ; fail

  nabl-get-name :
    BinRelDefLeftOutput(v, op, rhs) -> v

  nabl-name-apply(s) =
    BinRelDefLeftOutput(s, id, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?BinRelDefLeftOutput(v, op, rhs)
    ; origin-track-forced(
        BinRelDefLeftOutput(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsVariable()
          , Unique()
          , Current()
          , []
          , []
          )
        , id
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?BinRelDefLeftOutput(v, op, rhs)
    ; (where(t := <new-task-fixdeps(|ctx__, [])> Id(
                                                   <get-or-create-property-task(|ctx__, Type())> rhs
                                                 ))
       ; BinRelDefLeftOutput(
           nabl-store-props(
           | ctx__
           , [Prop(Type(), t, [])]
           )
         , id
         , id
         ))
    ; fail

  nabl-get-name :
    BinRelDefRightInput(lhs, op, v) -> v

  nabl-name-apply(s) =
    BinRelDefRightInput(id, id, s)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?BinRelDefRightInput(lhs, op, v)
    ; origin-track-forced(
        BinRelDefRightInput(
          id
        , id
        , nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsVariable()
          , Unique()
          , Current()
          , []
          , []
          )
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?BinRelDefRightInput(lhs, op, v)
    ; (where(t := <new-task-fixdeps(|ctx__, [])> Id(
                                                   <get-or-create-property-task(|ctx__, Type())> lhs
                                                 ))
       ; BinRelDefRightInput(
           id
         , id
         , nabl-store-props(
           | ctx__
           , [Prop(Type(), t, [])]
           )
         ))
    ; fail

  nabl-get-name :
    BinRelDefRightOutput(lhs, op, v) -> v

  nabl-name-apply(s) =
    BinRelDefRightOutput(id, id, s)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?BinRelDefRightOutput(lhs, op, v)
    ; origin-track-forced(
        BinRelDefRightOutput(
          id
        , id
        , nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsVariable()
          , Unique()
          , Current()
          , []
          , []
          )
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?BinRelDefRightOutput(lhs, op, v)
    ; (where(t := <new-task-fixdeps(|ctx__, [])> Id(
                                                   <get-or-create-property-task(|ctx__, Type())> lhs
                                                 ))
       ; BinRelDefRightOutput(
           id
         , id
         , nabl-store-props(
           | ctx__
           , [Prop(Type(), t, [])]
           )
         ))
    ; fail

  nabl-get-name :
    Forall(v, expr, body) -> v

  nabl-name-apply(s) =
    Forall(s, id, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?Forall(v, expr, body)
    ; origin-track-forced(
        Forall(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsVariable()
          , Unique()
          , Current()
          , []
          , []
          )
        , id
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?Forall(v, expr, body)
    ; (where(ty := <new-task-fixdeps(|ctx__, [])> Id(
                                                    <get-or-create-property-task(|ctx__, Type())> expr
                                                  ))
       ; Forall(
           nabl-store-props(
           | ctx__
           , [Prop(Type(), ty, [])]
           )
         , id
         , id
         ))
    ; fail