module names

imports
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/properties/-
  lib/runtime/types/-
  lib/runtime/relations/-
  lib/runtime/editor/-
  include/Booster25


signature
  constructors
    NablNsModule   : Namespace
    NablNsEntity   : Namespace
    NablNsProperty : Namespace


signature
  constructors
    


rules

  nabl-custom-properties(add-properties) =
    ![] ; add-properties


rules

  nabl-get-scope =
    ?Module(x, _)
    ; ![NablNsEntity()]

  nabl-get-name :
    Module(x, _) -> x

  nabl-name-apply(s) =
    Module(s, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?Module(x, _)
    ; origin-track-forced(
        Module(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsModule()
          , Unique()
          , Current()
          , [NablNsEntity()]
          , []
          )
        , id
        )
      |
      )
    ; where(i-2__ := <nabl-def(
                        ?c-uri2__
                      , ?s-uri2__
                      | lang__
                      , ctx__
                      , uniques__
                      , c-uri1__
                      , s-uri1__
                      , NablNsEntity()
                      , Unique()
                      , Current()
                      , []
                      , []
                      )> "String")
    ; where(i-3__ := <nabl-def(
                        ?c-uri3__
                      , ?s-uri3__
                      | lang__
                      , ctx__
                      , uniques__
                      , c-uri2__
                      , s-uri2__
                      , NablNsEntity()
                      , Unique()
                      , Current()
                      , []
                      , []
                      )> "Int")
    ; match(child-uris__|c-uri3__)
    ; match(sibl-uris__|s-uri3__)
    ; match(implicits__|[i-2__, i-3__])

  nabl-get-scope =
    ?Entity(x, _)
    ; ![NablNsProperty()]

  nabl-get-name :
    Entity(x, _) -> x

  nabl-name-apply(s) =
    Entity(s, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?Entity(x, _)
    ; origin-track-forced(
        Entity(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsEntity()
          , Unique()
          , Current()
          , [NablNsProperty()]
          , []
          )
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?Entity(x, _)
    ; (where(id)
       ; Entity(
           nabl-store-props(
           | ctx__
           , [ Prop(Type(), Type(x), [])
             ]
           )
         , id
         ))
    ; fail

  nabl-get-name :
    Property(x, t) -> x

  nabl-name-apply(s) =
    Property(s, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, ctx__, uniques__, uri__, states__) =
    ?Property(x, t)
    ; origin-track-forced(
        Property(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , ctx__
          , uniques__
          , uri__
          , uri__
          , NablNsProperty()
          , Unique()
          , Current()
          , []
          , []
          )
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, ctx__, uris__, states__, implicits__) =
    ?Property(x, t)
    ; (where(id)
       ; Property(
           nabl-store-props(
           | ctx__
           , [Prop(Type(), t, [])]
           )
         , id
         ))
    ; fail

  nabl-get-name :
    Type(x) -> x

  nabl-name-apply(s) =
    Type(s)

  nabl-use-site(|lang__, ctx__, uniques__, uris__, states__) =
    ?Type(x)
    ; origin-track-forced(
        Type(
          nabl-use(
          | lang__
          , ctx__
          , uniques__
          , uris__
          , [ <{:
                 id
                 ; !UseCandidate(
                      NablNsEntity()
                    , []
                    , Current()
                    , True()
                    , []
                    )
               }>
            ]
          )
        )
      |
      )