module simplify

imports
	signatures/-
	api/_runtime
	api/_runtime-constructors
	api/attribute
	api/constraint
	api/expression
	lib/search
	lib/eq
	names/names
	
rules
	
	simplify = innermost( constraint-simp <+ relation-simp <+ expression-simp <+ gc-simp)
	
rules
	
	constraint-simp: |[true & ~e]| 					-> e
	constraint-simp: |[~e & true]| 					-> e
	constraint-simp: |[false & ~e]| 				-> |[ false ]|
	constraint-simp: |[~e & false]| 				-> |[ false ]|

	constraint-simp: |[true or ~e]| 				-> |[ true ]|
	constraint-simp: |[~e or true]| 				-> |[ true ]|
	constraint-simp: |[false or ~e]| 				-> e
	constraint-simp: |[~e or false]| 				-> e

	constraint-simp: |[true ; ~e]| 					-> e
	constraint-simp: |[~e ; true]| 					-> e

	constraint-simp: |[ ~c or ~c ]|					-> c
	constraint-simp: |[ ~c & ~c ]|					-> c

	constraint-simp: |[ ~c or not(~c) ]|		-> |[ true ]|
	constraint-simp: |[ ~c & not(~c) ]|			-> |[ false ]|

	constraint-simp: |[ not(true) ]| 				-> |[ false ]|
	constraint-simp: |[ not(false) ]| 			-> |[ true ]|
	constraint-simp: |[ not(not(~c)) ]| 		-> c

	constraint-simp: |[ not(~a or ~b) ]|		-> |[ not(~a) & not(~b) ]|	
	constraint-simp: |[ not(~a & ~b) ]|			-> |[ not(~a) or not(~b) ]|	
	
	constraint-simp: |[ true => ~p ]|				-> p
	constraint-simp: |[ false => ~p ]|			-> |[ true ]|

	constraint-simp: |[ ~a => (~b & ~c) ]|	-> |[(~a => ~b) & (~a => ~c)]|
	
	constraint-simp: |[ (~e = ~f) => ((~e' /= ~f') => ~c) ]|
																					-> |[ true ]| where <eq-an> (e, e'); <eq-an> (f, f')
	constraint-simp: |[ (~e /= ~f) => ((~e' = ~f') => ~c) ]|
																					-> |[ true ]| where <eq-an> (e, e'); <eq-an> (f, f')

	
	constraint-simp: |[~a => ( ~b => ~c) ]| -> |[ ~a => ~c]| where <eq-an> (a,b)

//	constraint-simp: |[ ~e = ~f => ~a & 
//											~e /= ~f => ~a ]|	-> a


rules
	
	
	relation-simp: |[ ~e = ~f ]|						-> |[true]| where <eq-an>(e,f)
	relation-simp: |[ ~e /= ~f ]|						-> |[false]| where <eq-an>(e,f)
	
	relation-simp: |[ ~e < ~e ]|						-> |[false]|
	relation-simp: |[ ~e <= ~e ]|						-> |[true]|
	relation-simp: |[ ~e > ~e ]|						-> |[false]|
	relation-simp: |[ ~e >= ~e ]|						-> |[true]|

	relation-simp: |[ ~e < ~f ]|						-> |[ true ]| where <lt>(<get-int>e,<get-int>f)
	relation-simp: |[ ~e < ~f ]|						-> |[ false ]| where <geq>(<get-int>e,<get-int>f)

	relation-simp: |[ ~e > ~f ]|						-> |[ true ]| where <gt>(<get-int>e,<get-int>f)
	relation-simp: |[ ~e > ~f ]|						-> |[ false ]| where <leq>(<get-int>e,<get-int>f)

	relation-simp: |[ ~e <= ~f ]|						-> |[ true ]| where <leq>(<get-int>e,<get-int>f)
	relation-simp: |[ ~e <= ~f ]|						-> |[ false ]| where <gt>(<get-int>e,<get-int>f)

	relation-simp: |[ ~e >= ~f ]|						-> |[ true ]| where <geq>(<get-int>e,<get-int>f)
	relation-simp: |[ ~e >= ~f ]|						-> |[ false ]| where <lt>(<get-int>e,<get-int>f)
	
	relation-simp: |[ ~e : ~f \/ {~e}]|			-> |[true]|

rules
		
	expression-simp: |[ 0 + ~e ]| 					-> e
	expression-simp: |[ ~e + 0 ]| 					-> e
	
	expression-simp: |[ ~e \/ ~f - ~f]|			-> e
	
	expression-simp: Path(Path(p, PathComponent(a1, mbp)), PathComponent(a2, mbp))			
																					-> p where 
																								<eq-an>(a2,<attr-get-inverse> a1);
																								<not(attr-is-set)> a1;
																								<not(attr-is-set)> a2
	
rules
	
	gc-simp: |[ ~gc1 || skip ]| 						-> gc1
	gc-simp: |[ skip || ~gc1 ]| 						-> gc1

	gc-simp: |[ ~g1 --> (~g2 --> ~p) ]| 		-> |[ ~g1 & ~g2 --> ~p ]|
	

	gc-simp: |[ true --> ~p ]| 							-> p
	
rules
	
	get-int: BasicValue(Integer(c)) -> <string-to-int> c	
	
rules