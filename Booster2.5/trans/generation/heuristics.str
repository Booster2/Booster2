module trans/generation/heuristics

imports
	include/Booster25
	trans/api/_runtime
	trans/api/_runtime-constructors
	trans/api/attribute
	trans/api/constraint
	trans/api/expression
	trans/api/path
	trans/lib/search
	trans/names
	trans/pp
	
rules
	
	heuristics = 
		try(sometd(method-heuristics))
	
rules
	
	method-heuristics: Method(name, decs, const) -> Method(name, decs, Both(const, gc))
		with
			gc := <program> const

rules
	
	/* @type Constraint -> GuardedCommand */
	
	program:  |[ true ]|       ->  |[ skip ]|		
	program:  |[ false ]|      ->  |[ false --> skip ]|
	program:  |[~c1 & ~c2]|  ->  |[~p1 || ~p2]|                        with p1 := <program>c1; p2 := <program>c2
	program:  |[~c1 or ~c2]| ->  |[~p1 [ ] ~p2]|                       with p1 := <program>c1; p2 := <program>c2
	program: c|[~c1 ; ~c2]|  -> g|[~p1 ; ~p2]|                         with p1 := <program>c1; p2 := <program>c2
	program:  |[~c1 => ~c2]| ->  |[~c1 --> ~p2 [ ] not ~c1 --> skip]|  with p2 := <program>c2

	program:  |[not ~c1]|    ->  |[not ~c1 --> skip ]|
	
	program: |[exists x : ~e @ ~c1 ]| -> |[ANY x : ~e . ~p1]|                               with p1 := <program>c1
	program: |[forall x : ~e @ ~c1 ]| -> |[ALL x : ~e . ~p1]| where <not(is-pre-state)> c1  with p1 := <program>c1

	program: |[~f = ~e]|       ->  |[~f_pre := ~e]|
      where 
      	<is-pre-state>e;
      	<attr-is-basic <+ attr-is-enum>f;
  			<is-post-state>f;
				f_pre := <make-pre-state> f


	program: |[~e : x_a.x_b ']|       ->  |[x_a.x_b := x_a.x_b \/ {~e}]|   where <is-pre-state>e
	
	program: |[x_output! : x_c' ]|   ->  |[new x_output! : x_c]| where <is-class-name> x_c

rules 
	
	/* assign to bidirectional relations */
	
	/* Mandatory -> Mandatory --- Add */

	program: |[y!.z_1 ' = x! ]| -> |[ y!.z_1 := x! || x!.z_2 := y! ]| 
		where
			<attr-is-mandatory> z_1;
			z_2 := <attr-get-inverse> z_1;
			<attr-is-mandatory> z_2

	/* Mandatory -> Optional --- Add */
	program: |[x! . y '= ~e]| -> |[ x!.y := ~e 
																	|| ~e.z := x!
																	|| (~e.z /= null --> ~e.z.y := null
																				[]
																			~e.z = null --> skip)]|
		where
			<is-pre-state> e;
			z := <attr-get-inverse> y;
			<attr-is-mandatory> y;
			<attr-is-optional> z;
			<is-obj-expression> e
			
	/* Mandatory -> Optional --- Add */
	program: |[~f = ~e]| -> |[ ~f_pre := ~e ||
														 ~e.z := ~f_parent ||  
														 (~e.z /= null --> ~e.z.y := null
																[]
															~e.z = null --> skip)]|
		where
			<is-pre-state> e;
			<is-post-state>f;
			y := <path-suffix-name> f;
			z := <attr-get-inverse> f;
			<attr-is-mandatory> f;
			<attr-is-optional> z;
			<is-obj-expression> e;
			f_pre := <make-pre-state> f;
			f_parent := <path-prefix> f_pre

	/* Mandatory -> Set-valued --- Add */
	program: |[~f = ~e]| -> |[ ~f_pre := ~e 
														 || ~e.z := ~e.z \/ {~f_parent}
														 || ~f_pre.z := ~f_pre.z - {~f_parent}]|
		where
			<is-pre-state> e;
			<is-post-state>f;
			<attr-is-mandatory> f;
			z := <attr-get-inverse> f;
			<attr-is-set> z;
			<is-obj-expression> e;
			f_pre := <make-pre-state> f;
			f_parent := <path-prefix> f_pre


	
	/* Mandatory -> Set-valued --- Add */
	program: |[~f = ~e]| -> |[ ~f_pre := ~e 
															|| ~e.z := ~e.z \/ {~f_parent} 
															|| ~f_pre.z := ~f_pre.z - {~f_parent}]|
		where
			<is-pre-state> e;
			<is-post-state>f;
			z := <attr-get-inverse> f;
			<attr-is-mandatory> f;
			<attr-is-set> z;
			<is-obj-expression> e;
			f_pre := <make-pre-state> f;
			f_parent := <path-prefix> f_pre

	/* Optional -> Mandatory --- Add */
	program: |[~f = x!]| -> |[ ~f_pre := x! || x!.z := ~f_parent ]|
		where
			<is-post-state>f;
			z := <attr-get-inverse> f;
			<attr-is-optional> f;
			<attr-is-mandatory> z;
			f_pre := <make-pre-state> f;
			f_parent := <path-prefix> f_pre

	/* Optional -> Optional --- Add */
	program: |[~f = ~e]| -> |[ ~f_pre := ~e ||
														 ~e.z := ~f_parent ||  
																(~f_pre /= null --> ~f_pre.z := null
																[]
																~f_pre = null --> skip)]|
		where
			<is-pre-state> e;
			<is-post-state>f;
			z := <attr-get-inverse> f;
			<attr-is-optional> f;
			<attr-is-optional> z;
			<is-obj-expression> e;
			f_pre := <make-pre-state> f;
			f_parent := <path-prefix> f_pre
			

	/* Optional -> Set-valued --- Add */
	program: |[~f = ~e]| -> |[(~f_pre := ~e || ~e.z := ~e.z \/ {~f_parent} || 
																(~f_pre /= null --> ~f_pre.z := ~f_pre.z - {~f_parent}
																[]
																~f_pre = null --> skip))]|
		where
			<is-pre-state> e;
			<is-post-state>f;
			z := <attr-get-inverse> f;
			<attr-is-optional> f;
			<attr-is-set> z;
			<is-obj-expression> e;
			f_pre := <make-pre-state> f;
			f_parent := <path-prefix> f_pre

	/* Set-valued -> Mandatory --- Add */
	program: |[x! : ~f]| -> |[(( ~f_pre := ~f_pre \/ {x!} || x!.z := ~f_parent))  ]|
		where
			x_classX := <_get-type>x;
			<is-post-state>f;
			z := <attr-get-inverse> f;
			<attr-is-set> f;
			<attr-is-mandatory> z;
			f_pre := <make-pre-state> f;
			f_parent := <path-prefix> f_pre

	/* Set-valued -> Optional --- Add */
	program: |[~e : ~f]| -> |[~e.z = null --> (~f_pre := ~f_pre \/ {~e} || ~e.z := ~f_parent ) ]|
		where
			<debug> "set-opt";
			<is-pre-state> e;
			<debug> "1";
			<is-post-state>f;
			<debug> "2";
			z := <attr-get-inverse> f;
			<debug> "3";
			<attr-is-set> f;
			<debug> "4";
			<attr-is-optional> z;
			<debug> "5";
			<debug> e;
			<debug><_get-type> e;
			<debug><_get-type ; _nabl-uri> e;
			<is-obj-expression> e;
			<debug> "6";
			f_pre := <make-pre-state> f;
			<debug> "7";
			f_parent := <path-prefix> f_pre;
			<debug> "8"

	/* Set-valued -> Set-valued --- Add */
	program: |[~e : ~f]| -> |[(~f_pre := ~f_pre \/ {~e}) || (~e.z := ~e.z \/ {~f_parent})]|
		where
			<is-pre-state> e;
			<is-post-state>f;
			z := <attr-get-inverse> f;
			<attr-is-set> f;
			<debug> <get-multiplicity>  z;
			<attr-is-set> z;
			<is-obj-expression> e;
			f_pre := <make-pre-state> f;
			f_parent := <path-prefix> f_pre

rules

	/* Mandatory -> Anything --- Remove */
	program: |[~f = null]| -> |[false --> skip]|
		where
			<is-post-state>f;
			z := <attr-get-inverse> f;
			<attr-is-mandatory> f

	/* Optional -> Mandatory --- Remove */
	program: |[~f = null]| -> |[false --> skip]|
		where
			<is-post-state> f;
			z := <attr-get-inverse>f;
			<attr-is-optional> f;
			<attr-is-mandatory> z
	

	/* Optional -> Optional --- Remove */
	program: |[~f = null]| -> |[~f_pre /= null --> (~f_pre := null || ~f_pre.z := null) ]|
		where
			<is-post-state>f;
			z := <attr-get-inverse> f;
			<attr-is-optional> f;
			<attr-is-optional> z;
			f_pre := <make-pre-state> f
			
	/* Optional -> Set-valued --- Remove */
	program: |[~f = null]| -> |[~f_pre /= null --> (~f_pre := null || ~f_pre.z := ~f_pre.z - {~f_parent}) ]|
		where
			<is-post-state>f;
			z := <attr-get-inverse> f;
			<attr-is-optional> f;
			<attr-is-set> z;
			f_pre := <make-pre-state> f;
			f_parent := <path-prefix> f_pre

	/* Set-valued -> Mandatory --- Remove */
	program: |[~e /: ~f]| -> |[false --> skip]|
		where
			<is-pre-state> e;
			<is-post-state>f;
			z := <attr-get-inverse> f;
			<attr-is-set> f;
			<attr-is-mandatory> z;
			<is-obj-expression> e;
			f_pre := <make-pre-state> f;
			f_parent := <path-prefix> f_pre

	/* Set-valued -> Optional --- Remove */
	program: |[~e /: ~f]| -> |[~e : ~f_pre --> (~f_pre := ~f_pre - {~e} || ~e.z := null) ]|
		where
			<debug> "set-opt remove";
			<is-pre-state> e;
			<debug> "1";
			<is-post-state>f;
			<debug> "2";
			z := <attr-get-inverse> f;
			<debug> "3";
			<attr-is-set> f;
			<debug> "4";
			<attr-is-optional> z;
			<debug> "5";
			<debug> e;
			<debug> <_get-type> e;
			<debug> <_get-type ; _nabl-uri> e;
			<debug> <_get-type ; _nabl-uri; _nabl-uri-namespace> e;
			<is-obj-expression> e;
			<debug> "6";
			f_pre := <make-pre-state> f;
			<debug> "7";
			f_parent := <path-prefix> f_pre


	/* Set-valued -> Set-valued --- Remove */
	program: |[~e /: ~f]| -> |[~e : ~f_pre --> (~f_pre := ~f_pre - {~e} || ~e.z := ~e.z - {~f_parent}) ]|
		where
			<is-pre-state> e;
			<is-post-state>f;
			z := <attr-get-inverse> f;
			<attr-is-set> f;
			<attr-is-set> z;
			<is-obj-expression> e;
			f_pre := <make-pre-state> f;
			f_parent := <path-prefix> f_pre


			


rules // catch all not supported

	program: x -> |[ skip ]|
		where
			log(|Warning(), "cannot determine program", <pp-Constraint-string> x)

rules