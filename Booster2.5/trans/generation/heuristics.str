module trans/generate/heuristics

imports
	include/booster25
	trans/api/_runtime
	trans/api/_runtime-constructors
	trans/api/attribute
	trans/api/constraint
	trans/lib/search
	trans/names
	
rules
	
	heuristics = 
		try(sometd(method-heuristics))
	
rules
	
	method-heuristics: Method(name, const) -> Method(name, Both(const, gc))
		with
			gc := <program>const

rules
	
	// @type Constraint -> GuardedCommand
	program:  |[true]|       ->  |[skip]|
	program:  |[false]|      ->  |[false --> skip]|
	program:  |[~c1 & ~c2]|  ->  |[~p1 || ~p2]|                        with p1 := <program>c1; p2 := <program>c2
	program:  |[~c1 or ~c2]| ->  |[~p1 [ ] ~p2]|                       with p1 := <program>c1; p2 := <program>c2
	program: c|[~c1 ; ~c2]|  -> g|[~p1 ; ~p2]|                         with p1 := <program>c1; p2 := <program>c2
	program:  |[~c1 => ~c2]| ->  |[~c1 --> ~p2 [ ] not ~c1 --> skip]|  with p2 := <program>c2
	program:  |[not ~c1]|    ->  |[not ~c1 --> skip]|
	
	program: |[exists x : ~e @ ~c1 ]| -> |[ANY x : ~e . ~p1]|                               with p1 := <program>c1
	program: |[forall x : ~e @ ~c1 ]| -> |[ALL x : ~e . ~p1]| where <not(is-pre-state)> c1  with p1 := <program>c1

	program: |[x_a '     = ~e]|       ->  |[x_a     := ~e]|                where <is-pre-state>e
	program: |[x_a.x_b ' = ~e]|       ->  |[x_a.x_b := ~e]|                where <is-pre-state>e
	program: |[~e : x_a.x_b ']|       ->  |[x_a.x_b := x_a.x_b \/ {~e}]|   where <is-pre-state>e
	program: |[x_output! : x_c1 ']|   ->  |[new x_output! : x_c1]|

rules // assign to bidirectional relations
	


	program: |[x? : y ']| -> |[(y := y \/ {x?}) || (x?.z := x?.z \/ {this})]|
		where
			z := <attr-get-inverse>y;
			<attr-is-set>y;
			<attr-is-set>z
			
	program: |[y ' = x!]| -> |[x! /: x_classX --> ( (new x! : x_classX) ; ((y := x!) || (x!.z := this)) )]|
		where
			z := <attr-get-inverse>y;
			<attr-is-mandatory>y;
			<attr-is-mandatory>z;
			x_classX := <_get-type>x

rules // catch all not supported

	program: x -> Skip()
		where
			log(|Warning(), "cannot determine program", x)

rules