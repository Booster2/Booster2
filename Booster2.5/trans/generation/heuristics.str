module trans/generate/heuristics

imports
	include/booster25
	trans/api/_runtime
	trans/api/_runtime-constructors
	trans/api/constraint
	trans/lib/search
	trans/names
	
rules
	
	heuristics = 
		try(sometd(method-heuristics))
	
rules
	
	method-heuristics: Method(name, const) -> Method(name, Both(const, gc))
		with
			gc := <program>const

rules
	
	// @type Constraint -> GuardedCommand
	program: |[true]|	       -> |[skip]|
	program: |[false]|       -> |[false --> skip]|
	program: |[~c1 & ~c2]|   -> |[~p1 || ~p2]|                        with p1 := <program>c1; p2 := <program>c2
	program: |[~c1 or ~c2]|  -> |[~p1 [ ] ~p2]|                       with p1 := <program>c1; p2 := <program>c2
	program: Then(c1, c2)    -> Sequence(<program>c1, <program>c2)
	// program: g |[~c1 ; ~c2]|   -> |[~p1 ; ~p2]|            with p1 := <program>c1; p2 := <program>c2
	program: |[~c1 => ~c2]|  -> |[~c1 --> ~p2 [ ] not ~c1 --> skip]|  with p2 := <program>c2
	program: |[not ~c1]|     -> |[not ~c1 --> skip]|
	
	program: Exists(name, expr, c1) -> Any(name, expr, <program>c1)
	program: Forall(name, expr, c1) -> All(name, expr, <program>c1)
		where
			<not(is-pre-state)> c1
	
	program: BinRel(Path(a,b), Equal(), expression) -> Assign(path1, expression)
		where
			<not(is-pre-state)> Path(a,b) ;
			<is-pre-state> expression
		where
			path1 := <make-pre-state> Path(a,b)

	program: x -> Skip()
		where
			log(|Warning(), "cannot determine program", x)

rules