module trans/generate/elaborate

imports
	include/booster25
	trans/names
	trans/api/_runtime
	trans/api/_runtime-constructors
	trans/lib/search
	trans/generation/elaborate-flatten
	trans/api/path
	
rules
	
	elaborate =
		?ast;
		try(sometd(inline-extension(|ast)));
		inline-recursion;
		try(sometd(flatten-class-hierarchy(|ast)))
	
	// inline-recursion AST -> AST
	inline-recursion:
		ast -> ast'
		where
			ast' := <sometd(inline-method(|ast));inline-recursion <+ id> ast
			


	
	inline-extension(|ast): m -> m
	
	
	// inline-method (|AST) MethodReference -> Expr
	inline-method(|ast): MethodReference(path, expr*) -> subst-method-body'
		 with
		 	path-ty := <_get-type> path; 
			_ {Def(path-uri)} := path-ty;
		  Method(_, method-body) := <uri-to-ast(|path-uri)> ast;
		  subst-method-body := <literal-substitute> (method-body, expr*);
		  subst-method-body' := <replace-paths> (subst-method-body, path)
		  
		  
	match-subst(|name):
		Subst(Input(name'), exp)
			-> exp
		where 
			<eq-an>(name, name')
			
	literal-substitute:
		(ast, substs) 
			-> ast'
		with
			ast' := <topdown(try(\ Input(name) -> <fetch-elem(match-subst(|name))> substs \))> ast
			
	eq-an: (a,b) -> (a,b)
		where
			a' := <_remove-annotations(id)> a;
			b' := <_remove-annotations(id)> b;
			<eq>(a',b')

	replace-paths:
		(ast, path)
			-> ast'
		with
			ast' := <try(sometd(\t -> <try-replace-term>(path, t)\))> ast
	
	try-replace-term:
		(path, t) -> t'
		where
			t' :=  <prefix-compose-paths>(path, t)
		
rules
	
	
	