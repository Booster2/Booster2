module trans/generation/elaborate

imports
	
	include/booster25
	trans/api/_runtime
	trans/api/_runtime-constructors
	trans/api/path
	trans/api/class
	trans/api/method
	trans/lib/eq
	trans/lib/search
	trans/names
	
rules // elaborate phase
	
	elaborate =
		?ast;
		inline-methods;
		try(sometd(flatten-class-hierarchy(|ast)));
		topdown(try(path-add-this))

rules // inline methods

	// inline-methods AST -> AST
	inline-methods:
		ast -> ast'
		where
			ast' := <sometd(inline-method(|ast));inline-methods <+ id> ast
			
	// inline-method (|AST) MethodReference -> Expr
	inline-method(|ast): MethodReference(path, expr*) -> subst-method-body'
		 with
		 	path-ty := <_get-type> path; 
			_ {Def(path-uri)} := path-ty;
		  Method(_, _, method-body) := <uri-to-ast(|path-uri)> ast;
		  subst-method-body := <literal-substitute> (method-body, expr*);
		  subst-method-body' := <replace-paths> (subst-method-body, path)
	
	// @type (AST, [Subst]) -> AST
	literal-substitute:
		(ast, substs) -> ast'
		with
			ast' := <topdown(try(\ Input(name) -> <fetch-elem(match-subst(|name))> substs \))> ast
	
	// @type Subst -> Constraint or fail
	match-subst(|name):
		Subst(Input(name'), exp) -> exp
		where 
			<eq-an>(name, name')
	
	// @type (AST, Path) -> AST
	replace-paths:
		(ast, path)
			-> ast'
		with
			ast' := <try(sometd(\t -> <try-replace-term>(path, t)\))> ast
	
	// @type (Path, Constraint) -> Constraint
	try-replace-term:
		(path, t) -> t'
		where
			t' :=  <prefix-compose-paths>(path, t)
		
rules // flatten class hierarchy
	
	// @type (|AST) Class -> Class
	flatten-class-hierarchy(|ast):
	c@Class(cname, ext, cmember*) -> 
		Class(cname, ext, cmember'*)
			with
				superclass*       := <_relation-lookup(|"<sub:");nub;reverse>cname;
				// <strip-annos;debug>cname;
				// <map(_pp-uri);debug><_relation-lookup(|"<sub:")>cname;
				// <map(_pp-uri);debug>superclass*;
				superclass-def*   := <map(class-get-definition(|ast))>superclass*
			with // attributes: only pull in ones that are not defined allready (and pull in most specific ones)
				attr*             := <class-get-attributes>c;
				superclass-attr*  := <map(class-get-attributes);concat>superclass-def*;
				all-attr*         := [superclass-attr*,attr*]
			with // invariants: pull all invariants in
				inv*              := <class-get-invariants>c;
				superclass-inv*   := <map(class-get-invariants);concat>superclass-def*;
				all-inv*          := [superclass-inv*,inv*]
			with // methods: pull all methods in not defined + pull all bodies of methods defined
				method*           := <class-get-methods>c;
				superclass-meth*  := <map(class-get-methods);concat>superclass-def*;
				superclass-meth'* := <map(replace-class(|cname))> superclass-meth*;
				all-meth*         := [superclass-meth'*,method*];
				all-meth'*        := <reverse;method-conjoin-all;reverse> all-meth*
			with
				new-attr* := <?a;if ?[] then ![] else ![Attributes(a)] end>all-attr*;
				new-inv*  := <?b;if ?[] then ![] else ![Invariants(b)] end>all-inv*;
				new-meth* := <?d;if ?[] then ![] else ![Methods   (d)] end>all-meth'*;
				cmember'* := [new-attr*, new-inv*, new-meth*]

rules
	
			replace-class(|cname):
				m@Method(mname, decs, gc)
					-> m'
			where 
				mcname := <method-parent> mname;
				gc' := <bottomup(try(replace-class-name(|mcname, cname)))> gc;
				m' := Method(mname, decs, gc')
				 

			replace-class-name(|cname, cname'):
					PathStart(cname, mbp) -> PathStart(cname', mbp)
	
rules	