module trans/types.generated

imports
  
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/types/-
  lib/runtime/properties/-
  lib/runtime/relations/-

imports

  
signature constructors
  
  
  
rules // functions 
  

rules // relations
  

rules // rules
  
  create-type-task(|ctx) :
    Input(a) -> <task-create-id(|ctx,[ty])> ty
    where 
      ty := <type-lookup(|ctx)> a
  
  create-type-task(|ctx) :
    Output(a) -> <task-create-id(|ctx,[ty])> ty
    where 
      ty := <type-lookup(|ctx)> a
  
  create-type-task(|ctx) :
    PathStart(a, prime) -> <task-create-id(|ctx,[ty])> ty
    where 
      ty := <type-lookup(|ctx)> a
  
  create-type-task(|ctx) :
    Path(path-start, PathComponent(path-component, prime)) -> <task-create-id(|ctx,[ty])> ty
    where 
      ty := <type-lookup(|ctx)> path-component
  
  create-type-task(|ctx) :
    t@This() -> <task-create-id(|ctx,[ty])> ty
    where 
      ty := <type-lookup(|ctx)> t
  
  create-type-task(|ctx) :
    UniDirectional(s) -> <task-create-id(|ctx,[ty])> ty
    where 
      ty := <type-lookup(|ctx)> s
  
  create-type-task(|ctx) :
    BiDirectional(class, attr) -> <task-create-id(|ctx,[ty])> ty
    where 
      ty := <type-lookup(|ctx)> class
  
  create-type-task(|ctx) :
    Optional(s) -> <task-create-id(|ctx,[ty])> ty
    where 
      ty := <type-task(|ctx)> s
  
  create-type-task(|ctx) :
    Set(s, mult) -> <task-create-id(|ctx,[ty])> ty
    where 
      ty := <type-task(|ctx)> s
  
  create-type-task(|ctx) :
    ty@BasicType(x) -> <task-create-id(|ctx,[])> ty
  

rules // projections
  
