module trans/types.generated

imports
  
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/types/-
  lib/runtime/properties/-
  lib/runtime/relations/-

imports

  
signature constructors
  
  
  
rules // functions 
  

rules // relations
  

rules // rules
  
  create-type-task(|ctx) :
    Input(a) -> <task-create-id(|ctx,[ty])> ty
    where 
      ty := <type-lookup(|ctx)> a
  
  create-type-task(|ctx) :
    Output(a) -> <task-create-id(|ctx,[ty])> ty
    where 
      ty := <type-lookup(|ctx)> a
  
  create-type-task(|ctx) :
    PathStart(a, prime) -> <task-create-id(|ctx,[ty])> ty
    where 
      ty := <type-lookup(|ctx)> a
  
  create-type-task(|ctx) :
    Path(path-start, PathComponent(path-component, prime)) -> <task-create-id(|ctx,[ty])> ty
    where 
      ty := <type-lookup(|ctx)> path-component
  
  create-type-task(|ctx) :
    t@This() -> <task-create-id(|ctx,[ty])> ty
    where 
      ty := <type-lookup(|ctx)> t
  
  create-type-task(|ctx) :
    UniDirectional(s) -> <task-create-id(|ctx,[ty])> ty
    where 
      ty := <type-lookup(|ctx)> s
  
  create-type-task(|ctx) :
    BiDirectional(class, attr) -> <task-create-id(|ctx,[ty])> ty
    where 
      ty := <type-lookup(|ctx)> class
  
  create-type-task(|ctx) :
    Optional(s) -> <task-create-id(|ctx,[ty])> ty
    where 
      ty := <type-task(|ctx)> s
  
  create-type-task(|ctx) :
    Set(s, mult) -> <task-create-id(|ctx,[ty])> ty
    where 
      ty := <type-task(|ctx)> s
  
  create-type-task(|ctx) :
    ty@BasicType(x) -> <task-create-id(|ctx,[])> ty
  
  create-type-task(|ctx) :
    BasicValue(True()) -> <task-create-id(|ctx,[x1956])> x1956
    where 
      x1956 := <type-is(|ctx)> BasicType(Boolean())
  
  create-type-task(|ctx) :
    BasicValue(False()) -> <task-create-id(|ctx,[x1957])> x1957
    where 
      x1957 := <type-is(|ctx)> BasicType(Boolean())
  
  create-type-task(|ctx) :
    BasicValue(CurrentDate()) -> <task-create-id(|ctx,[x1958])> x1958
    where 
      x1958 := <type-is(|ctx)> BasicType(Date())
  
  create-type-task(|ctx) :
    BasicValue(CurrentDateTime()) -> <task-create-id(|ctx,[x1959])> x1959
    where 
      x1959 := <type-is(|ctx)> BasicType(DateTime())
  
  create-type-task(|ctx) :
    BasicValue(Decimal(i)) -> <task-create-id(|ctx,[x1960])> x1960
    where 
      x1960 := <type-is(|ctx)> BasicType(Decimal())
  
  create-type-task(|ctx) :
    BasicValue(Integer(i)) -> <task-create-id(|ctx,[x1961])> x1961
    where 
      x1961 := <type-is(|ctx)> BasicType(Int())
  
  create-type-task(|ctx) :
    BasicValue(String(i)) -> <task-create-id(|ctx,[x1962])> x1962
    where 
      x1962 := <type-is(|ctx)> BasicType(String())
  
  create-type-task(|ctx) :
    BasicValue(CurrentTime()) -> <task-create-id(|ctx,[x1963])> x1963
    where 
      x1963 := <type-is(|ctx)> BasicType(Time())
  
  create-type-task(|ctx) :
    Null() -> <task-create-id(|ctx,[x1964])> x1964
    where 
      x1964 := <type-is(|ctx)> Null()
  
  create-type-task(|ctx) :
    BinRel(l, op@Equal(), r) -> <task-create-id(|ctx,[x1965])> x1965
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq462 := <type-match(|ctx, l-ty); task-create-id(|ctx, [r-ty])> r-ty;
      <task-create-error-on-failure(|ctx, eq462, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r;
      x1965 := <type-is(|ctx); task-create-id(|ctx, [eq462])> BasicType(Boolean())
  
  create-type-task(|ctx) :
    BinRel(l, op@NotEqual(), r) -> <task-create-id(|ctx,[x1965])> x1965
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq463 := <type-match(|ctx, l-ty); task-create-id(|ctx, [r-ty])> r-ty;
      <task-create-error-on-failure(|ctx, eq463, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r;
      x1965 := <type-is(|ctx); task-create-id(|ctx, [eq463])> BasicType(Boolean())
  
  create-type-task(|ctx) :
    BinRel(l, op@In(), r) -> <task-create-id(|ctx,[x1965])> x1965
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq464 := <type-match(|ctx, l-ty); task-create-id(|ctx, [r-ty])> r-ty;
      <task-create-error-on-failure(|ctx, eq464, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r;
      x1965 := <type-is(|ctx); task-create-id(|ctx, [eq464])> BasicType(Boolean())
  
  create-type-task(|ctx) :
    BinRel(l, op@NotIn(), r) -> <task-create-id(|ctx,[x1965])> x1965
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq465 := <type-match(|ctx, l-ty); task-create-id(|ctx, [r-ty])> r-ty;
      <task-create-error-on-failure(|ctx, eq465, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r;
      x1965 := <type-is(|ctx); task-create-id(|ctx, [eq465])> BasicType(Boolean())
  
  create-type-task(|ctx) :
    BinRel(l, op@Subset(), r) -> <task-create-id(|ctx,[x1965])> x1965
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq466 := <type-match(|ctx, l-ty); task-create-id(|ctx, [r-ty])> r-ty;
      <task-create-error-on-failure(|ctx, eq466, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r;
      x1965 := <type-is(|ctx); task-create-id(|ctx, [eq466])> BasicType(Boolean())
  
  create-type-task(|ctx) :
    BinRel(l, op@SubsetEquals(), r) -> <task-create-id(|ctx,[x1965])> x1965
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq467 := <type-match(|ctx, l-ty); task-create-id(|ctx, [r-ty])> r-ty;
      <task-create-error-on-failure(|ctx, eq467, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r;
      x1965 := <type-is(|ctx); task-create-id(|ctx, [eq467])> BasicType(Boolean())
  
  create-type-task(|ctx) :
    BinRel(l, op@Superset(), r) -> <task-create-id(|ctx,[x1965])> x1965
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq468 := <type-match(|ctx, l-ty); task-create-id(|ctx, [r-ty])> r-ty;
      <task-create-error-on-failure(|ctx, eq468, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r;
      x1965 := <type-is(|ctx); task-create-id(|ctx, [eq468])> BasicType(Boolean())
  
  create-type-task(|ctx) :
    BinRel(l, op@SupersetEquals(), r) -> <task-create-id(|ctx,[x1965])> x1965
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq469 := <type-match(|ctx, l-ty); task-create-id(|ctx, [r-ty])> r-ty;
      <task-create-error-on-failure(|ctx, eq469, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r;
      x1965 := <type-is(|ctx); task-create-id(|ctx, [eq469])> BasicType(Boolean())
  
  create-type-task(|ctx) :
    BinRel(l, op@LessThan(), r) -> <task-create-id(|ctx,[x1966])> x1966
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq470 := <type-match(|ctx, BasicType(Decimal())); task-create-id(|ctx, [r-ty])> l-ty;
      eq471 := <type-match(|ctx, BasicType(Int())); task-create-id(|ctx, [r-ty])> l-ty;
      or109 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq470, eq471];
      <task-create-error-on-failure(|ctx, or109, ["Type mismatch: expected BasicType(Decimal()) or BasicType(Int()) got ", l-ty, " in ", op])> l;
      eq472 := <type-match(|ctx, l-ty); task-create-id(|ctx, [or109])> r-ty;
      <task-create-error-on-failure(|ctx, eq472, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r;
      x1966 := <type-is(|ctx); task-create-id(|ctx, [eq472])> BasicType(Boolean())
  
  create-type-task(|ctx) :
    BinRel(l, op@LessThanEquals(), r) -> <task-create-id(|ctx,[x1966])> x1966
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq473 := <type-match(|ctx, BasicType(Decimal())); task-create-id(|ctx, [r-ty])> l-ty;
      eq474 := <type-match(|ctx, BasicType(Int())); task-create-id(|ctx, [r-ty])> l-ty;
      or110 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq473, eq474];
      <task-create-error-on-failure(|ctx, or110, ["Type mismatch: expected BasicType(Decimal()) or BasicType(Int()) got ", l-ty, " in ", op])> l;
      eq475 := <type-match(|ctx, l-ty); task-create-id(|ctx, [or110])> r-ty;
      <task-create-error-on-failure(|ctx, eq475, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r;
      x1966 := <type-is(|ctx); task-create-id(|ctx, [eq475])> BasicType(Boolean())
  
  create-type-task(|ctx) :
    BinRel(l, op@GreaterThan(), r) -> <task-create-id(|ctx,[x1966])> x1966
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq476 := <type-match(|ctx, BasicType(Decimal())); task-create-id(|ctx, [r-ty])> l-ty;
      eq477 := <type-match(|ctx, BasicType(Int())); task-create-id(|ctx, [r-ty])> l-ty;
      or111 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq476, eq477];
      <task-create-error-on-failure(|ctx, or111, ["Type mismatch: expected BasicType(Decimal()) or BasicType(Int()) got ", l-ty, " in ", op])> l;
      eq478 := <type-match(|ctx, l-ty); task-create-id(|ctx, [or111])> r-ty;
      <task-create-error-on-failure(|ctx, eq478, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r;
      x1966 := <type-is(|ctx); task-create-id(|ctx, [eq478])> BasicType(Boolean())
  
  create-type-task(|ctx) :
    BinRel(l, op@GreaterThanEquals(), r) -> <task-create-id(|ctx,[x1966])> x1966
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq479 := <type-match(|ctx, BasicType(Decimal())); task-create-id(|ctx, [r-ty])> l-ty;
      eq480 := <type-match(|ctx, BasicType(Int())); task-create-id(|ctx, [r-ty])> l-ty;
      or112 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq479, eq480];
      <task-create-error-on-failure(|ctx, or112, ["Type mismatch: expected BasicType(Decimal()) or BasicType(Int()) got ", l-ty, " in ", op])> l;
      eq481 := <type-match(|ctx, l-ty); task-create-id(|ctx, [or112])> r-ty;
      <task-create-error-on-failure(|ctx, eq481, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r;
      x1966 := <type-is(|ctx); task-create-id(|ctx, [eq481])> BasicType(Boolean())
  
  create-type-task(|ctx) :
    BinOp(l, op@Plus(), r) -> <task-create-id(|ctx,[eq484])> l-ty
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq482 := <type-match(|ctx, BasicType(Decimal())); task-create-id(|ctx, [r-ty])> l-ty;
      eq483 := <type-match(|ctx, BasicType(Int())); task-create-id(|ctx, [r-ty])> l-ty;
      or113 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq482, eq483];
      <task-create-error-on-failure(|ctx, or113, ["Type mismatch: expected BasicType(Decimal()) or BasicType(Int()) got ", l-ty, " in ", op])> l;
      eq484 := <type-match(|ctx, l-ty); task-create-id(|ctx, [or113])> r-ty;
      <task-create-error-on-failure(|ctx, eq484, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r
  
  create-type-task(|ctx) :
    BinOp(l, op@Minus(), r) -> <task-create-id(|ctx,[eq487])> l-ty
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq485 := <type-match(|ctx, BasicType(Decimal())); task-create-id(|ctx, [r-ty])> l-ty;
      eq486 := <type-match(|ctx, BasicType(Int())); task-create-id(|ctx, [r-ty])> l-ty;
      or114 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq485, eq486];
      <task-create-error-on-failure(|ctx, or114, ["Type mismatch: expected BasicType(Decimal()) or BasicType(Int()) got ", l-ty, " in ", op])> l;
      eq487 := <type-match(|ctx, l-ty); task-create-id(|ctx, [or114])> r-ty;
      <task-create-error-on-failure(|ctx, eq487, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r
  
  create-type-task(|ctx) :
    BinOp(l, op@Times(), r) -> <task-create-id(|ctx,[eq490])> l-ty
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq488 := <type-match(|ctx, BasicType(Decimal())); task-create-id(|ctx, [r-ty])> l-ty;
      eq489 := <type-match(|ctx, BasicType(Int())); task-create-id(|ctx, [r-ty])> l-ty;
      or115 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq488, eq489];
      <task-create-error-on-failure(|ctx, or115, ["Type mismatch: expected BasicType(Decimal()) or BasicType(Int()) got ", l-ty, " in ", op])> l;
      eq490 := <type-match(|ctx, l-ty); task-create-id(|ctx, [or115])> r-ty;
      <task-create-error-on-failure(|ctx, eq490, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r
  
  create-type-task(|ctx) :
    BinOp(l, op@Divide(), r) -> <task-create-id(|ctx,[eq493])> l-ty
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq491 := <type-match(|ctx, BasicType(Decimal())); task-create-id(|ctx, [r-ty])> l-ty;
      eq492 := <type-match(|ctx, BasicType(Int())); task-create-id(|ctx, [r-ty])> l-ty;
      or116 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq491, eq492];
      <task-create-error-on-failure(|ctx, or116, ["Type mismatch: expected BasicType(Decimal()) or BasicType(Int()) got ", l-ty, " in ", op])> l;
      eq493 := <type-match(|ctx, l-ty); task-create-id(|ctx, [or116])> r-ty;
      <task-create-error-on-failure(|ctx, eq493, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r
  
  create-type-task(|ctx) :
    BinOp(l, op@Maximum(), r) -> <task-create-id(|ctx,[eq496])> l-ty
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq494 := <type-match(|ctx, BasicType(Decimal())); task-create-id(|ctx, [r-ty])> l-ty;
      eq495 := <type-match(|ctx, BasicType(Int())); task-create-id(|ctx, [r-ty])> l-ty;
      or117 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq494, eq495];
      <task-create-error-on-failure(|ctx, or117, ["Type mismatch: expected BasicType(Decimal()) or BasicType(Int()) got ", l-ty, " in ", op])> l;
      eq496 := <type-match(|ctx, l-ty); task-create-id(|ctx, [or117])> r-ty;
      <task-create-error-on-failure(|ctx, eq496, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r
  
  create-type-task(|ctx) :
    BinOp(l, op@Minimum(), r) -> <task-create-id(|ctx,[eq499])> l-ty
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq497 := <type-match(|ctx, BasicType(Decimal())); task-create-id(|ctx, [r-ty])> l-ty;
      eq498 := <type-match(|ctx, BasicType(Int())); task-create-id(|ctx, [r-ty])> l-ty;
      or118 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq497, eq498];
      <task-create-error-on-failure(|ctx, or118, ["Type mismatch: expected BasicType(Decimal()) or BasicType(Int()) got ", l-ty, " in ", op])> l;
      eq499 := <type-match(|ctx, l-ty); task-create-id(|ctx, [or118])> r-ty;
      <task-create-error-on-failure(|ctx, eq499, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r
  
  create-type-task(|ctx) :
    BinOp(l, op@Intersection(), r) -> <task-create-id(|ctx,[eq500])> l-ty
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq500 := <type-match(|ctx, l-ty); task-create-id(|ctx, [r-ty])> r-ty;
      <task-create-error-on-failure(|ctx, eq500, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r
  
  create-type-task(|ctx) :
    BinOp(l, op@Union(), r) -> <task-create-id(|ctx,[eq501])> l-ty
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq501 := <type-match(|ctx, l-ty); task-create-id(|ctx, [r-ty])> r-ty;
      <task-create-error-on-failure(|ctx, eq501, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r
  
  create-type-task(|ctx) :
    BinOp(l, op@Concat(), r) -> <task-create-id(|ctx,[eq502])> l-ty
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq502 := <type-match(|ctx, l-ty); task-create-id(|ctx, [r-ty])> r-ty;
      <task-create-error-on-failure(|ctx, eq502, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r
  
  create-type-task(|ctx) :
    UnOp(Head(), e) -> <task-create-id(|ctx,[e-ty])> e-ty
    where 
      e-ty := <type-task(|ctx)> e
  
  create-type-task(|ctx) :
    UnOp(Tail(), e) -> <task-create-id(|ctx,[e-ty])> e-ty
    where 
      e-ty := <type-task(|ctx)> e
  
  create-type-task(|ctx) :
    UnOp(Cardinality(), e) -> <task-create-id(|ctx,[x1967])> x1967
    where 
      x1967 := <type-is(|ctx)> BasicType(Int())
  
  create-type-task(|ctx) :
    UnOp(op@Negative(), e) -> <task-create-id(|ctx,[or119])> e-ty
    where 
      e-ty := <type-task(|ctx)> e;
      eq503 := <type-match(|ctx, BasicType(Decimal())); task-create-id(|ctx, [e-ty])> e-ty;
      eq504 := <type-match(|ctx, BasicType(Int())); task-create-id(|ctx, [e-ty])> e-ty;
      or119 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq503, eq504];
      <task-create-error-on-failure(|ctx, or119, ["Type mismatch: expected BasicType(Decimal()) or BasicType(Int()) got ", e-ty, " in ", op])> e
  

rules // projections
  
