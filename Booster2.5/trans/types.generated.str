module trans/types.generated

imports
  
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/types/-
  lib/runtime/properties/-
  lib/runtime/relations/-

imports

  
signature constructors
  
  
  
rules // functions 
  

rules // relations
  
  relation-is-transitive = ?"<sub:"
  
  relation-store-value(store): ("<sub:", BasicType(Int())) -> <store> BasicType(Decimal())
  relation-match-tuple = ?("<sub:", BasicType(Int()), BasicType(Decimal()))
  

rules // rules
  
  create-type-task(|ctx) :
    Input(a) -> <task-create-id(|ctx,[ty])> ty
    where 
      ty := <type-lookup(|ctx)> a
  
  create-type-task(|ctx) :
    Output(a) -> <task-create-id(|ctx,[ty])> ty
    where 
      ty := <type-lookup(|ctx)> a
  
  create-type-task(|ctx) :
    PathStart(a, prime) -> <task-create-id(|ctx,[ty])> ty
    where 
      ty := <type-lookup(|ctx)> a
  
  create-type-task(|ctx) :
    Path(path-start, PathComponent(path-component, prime)) -> <task-create-id(|ctx,[ty])> ty
    where 
      ty := <type-lookup(|ctx)> path-component
  
  create-type-task(|ctx) :
    t@This() -> <task-create-id(|ctx,[ty])> ty
    where 
      ty := <type-lookup(|ctx)> t
  
  create-type-task(|ctx) :
    UniDirectional(s) -> <task-create-id(|ctx,[ty])> ty
    where 
      ty := <type-lookup(|ctx)> s
  
  create-type-task(|ctx) :
    BiDirectional(class, attr) -> <task-create-id(|ctx,[ty])> ty
    where 
      ty := <type-lookup(|ctx)> class
  
  create-type-task(|ctx) :
    Optional(s) -> <task-create-id(|ctx,[ty])> ty
    where 
      ty := <type-task(|ctx)> s
  
  create-type-task(|ctx) :
    Set(s, mult) -> <task-create-id(|ctx,[ty])> ty
    where 
      ty := <type-task(|ctx)> s
  
  create-type-task(|ctx) :
    ty@BasicType(x) -> <task-create-id(|ctx,[])> ty
  
  nabl-constraint(|ctx) :
    Class(c, extends, members) -> <fail>
    where 
      relstore6 := <new-rel-tuple(|ctx, "<sub:", c)> Null()
  
  create-type-task(|ctx) :
    BasicValue(True()) -> <task-create-id(|ctx,[x804])> x804
    where 
      x804 := <type-is(|ctx)> BasicType(Boolean())
  
  create-type-task(|ctx) :
    BasicValue(False()) -> <task-create-id(|ctx,[x805])> x805
    where 
      x805 := <type-is(|ctx)> BasicType(Boolean())
  
  create-type-task(|ctx) :
    BasicValue(CurrentDate()) -> <task-create-id(|ctx,[x806])> x806
    where 
      x806 := <type-is(|ctx)> BasicType(Date())
  
  create-type-task(|ctx) :
    BasicValue(CurrentDateTime()) -> <task-create-id(|ctx,[x807])> x807
    where 
      x807 := <type-is(|ctx)> BasicType(DateTime())
  
  create-type-task(|ctx) :
    BasicValue(Decimal(i)) -> <task-create-id(|ctx,[x808])> x808
    where 
      x808 := <type-is(|ctx)> BasicType(Decimal())
  
  create-type-task(|ctx) :
    BasicValue(Integer(i)) -> <task-create-id(|ctx,[x809])> x809
    where 
      x809 := <type-is(|ctx)> BasicType(Int())
  
  create-type-task(|ctx) :
    BasicValue(String(i)) -> <task-create-id(|ctx,[x810])> x810
    where 
      x810 := <type-is(|ctx)> BasicType(String())
  
  create-type-task(|ctx) :
    BasicValue(CurrentTime()) -> <task-create-id(|ctx,[x811])> x811
    where 
      x811 := <type-is(|ctx)> BasicType(Time())
  
  create-type-task(|ctx) :
    Null() -> <task-create-id(|ctx,[x812])> x812
    where 
      x812 := <type-is(|ctx)> Null()
  
  create-type-task(|ctx) :
    BinRel(l, op@Equal(), r) -> <task-create-id(|ctx,[x813])> x813
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq258 := <type-match(|ctx, l-ty); task-create-id(|ctx, [r-ty])> r-ty;
      relmatch168 := <relation-create-match(|ctx); task-create-id(|ctx, [r-ty])> ("<sub:", r-ty, l-ty);
      or234 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq258, relmatch168];
      <task-create-error-on-failure(|ctx, or234, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r;
      x813 := <type-is(|ctx); task-create-id(|ctx, [or234])> BasicType(Boolean())
  
  create-type-task(|ctx) :
    BinRel(l, op@NotEqual(), r) -> <task-create-id(|ctx,[x813])> x813
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq259 := <type-match(|ctx, l-ty); task-create-id(|ctx, [r-ty])> r-ty;
      relmatch169 := <relation-create-match(|ctx); task-create-id(|ctx, [r-ty])> ("<sub:", r-ty, l-ty);
      or235 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq259, relmatch169];
      <task-create-error-on-failure(|ctx, or235, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r;
      x813 := <type-is(|ctx); task-create-id(|ctx, [or235])> BasicType(Boolean())
  
  create-type-task(|ctx) :
    BinRel(l, op@In(), r) -> <task-create-id(|ctx,[x813])> x813
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq260 := <type-match(|ctx, l-ty); task-create-id(|ctx, [r-ty])> r-ty;
      relmatch170 := <relation-create-match(|ctx); task-create-id(|ctx, [r-ty])> ("<sub:", r-ty, l-ty);
      or236 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq260, relmatch170];
      <task-create-error-on-failure(|ctx, or236, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r;
      x813 := <type-is(|ctx); task-create-id(|ctx, [or236])> BasicType(Boolean())
  
  create-type-task(|ctx) :
    BinRel(l, op@NotIn(), r) -> <task-create-id(|ctx,[x813])> x813
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq261 := <type-match(|ctx, l-ty); task-create-id(|ctx, [r-ty])> r-ty;
      relmatch171 := <relation-create-match(|ctx); task-create-id(|ctx, [r-ty])> ("<sub:", r-ty, l-ty);
      or237 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq261, relmatch171];
      <task-create-error-on-failure(|ctx, or237, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r;
      x813 := <type-is(|ctx); task-create-id(|ctx, [or237])> BasicType(Boolean())
  
  create-type-task(|ctx) :
    BinRel(l, op@Subset(), r) -> <task-create-id(|ctx,[x813])> x813
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq262 := <type-match(|ctx, l-ty); task-create-id(|ctx, [r-ty])> r-ty;
      relmatch172 := <relation-create-match(|ctx); task-create-id(|ctx, [r-ty])> ("<sub:", r-ty, l-ty);
      or238 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq262, relmatch172];
      <task-create-error-on-failure(|ctx, or238, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r;
      x813 := <type-is(|ctx); task-create-id(|ctx, [or238])> BasicType(Boolean())
  
  create-type-task(|ctx) :
    BinRel(l, op@SubsetEquals(), r) -> <task-create-id(|ctx,[x813])> x813
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq263 := <type-match(|ctx, l-ty); task-create-id(|ctx, [r-ty])> r-ty;
      relmatch173 := <relation-create-match(|ctx); task-create-id(|ctx, [r-ty])> ("<sub:", r-ty, l-ty);
      or239 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq263, relmatch173];
      <task-create-error-on-failure(|ctx, or239, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r;
      x813 := <type-is(|ctx); task-create-id(|ctx, [or239])> BasicType(Boolean())
  
  create-type-task(|ctx) :
    BinRel(l, op@Superset(), r) -> <task-create-id(|ctx,[x813])> x813
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq264 := <type-match(|ctx, l-ty); task-create-id(|ctx, [r-ty])> r-ty;
      relmatch174 := <relation-create-match(|ctx); task-create-id(|ctx, [r-ty])> ("<sub:", r-ty, l-ty);
      or240 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq264, relmatch174];
      <task-create-error-on-failure(|ctx, or240, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r;
      x813 := <type-is(|ctx); task-create-id(|ctx, [or240])> BasicType(Boolean())
  
  create-type-task(|ctx) :
    BinRel(l, op@SupersetEquals(), r) -> <task-create-id(|ctx,[x813])> x813
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq265 := <type-match(|ctx, l-ty); task-create-id(|ctx, [r-ty])> r-ty;
      relmatch175 := <relation-create-match(|ctx); task-create-id(|ctx, [r-ty])> ("<sub:", r-ty, l-ty);
      or241 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq265, relmatch175];
      <task-create-error-on-failure(|ctx, or241, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r;
      x813 := <type-is(|ctx); task-create-id(|ctx, [or241])> BasicType(Boolean())
  
  create-type-task(|ctx) :
    BinRel(l, op@LessThan(), r) -> <task-create-id(|ctx,[x814])> x814
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq266 := <type-match(|ctx, BasicType(Decimal())); task-create-id(|ctx, [r-ty])> l-ty;
      eq267 := <type-match(|ctx, BasicType(Int())); task-create-id(|ctx, [r-ty])> l-ty;
      or242 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq266, eq267];
      <task-create-error-on-failure(|ctx, or242, ["Type mismatch: expected BasicType(Decimal()) or BasicType(Int()) got ", l-ty, " in ", op])> l;
      eq268 := <type-match(|ctx, l-ty); task-create-id(|ctx, [or242])> r-ty;
      relmatch176 := <relation-create-match(|ctx); task-create-id(|ctx, [or242])> ("<sub:", r-ty, l-ty);
      or243 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq268, relmatch176];
      relmatch177 := <relation-create-match(|ctx); task-create-id(|ctx, [or242])> ("<sub:", l-ty, r-ty);
      or244 := <type-is(|ctx)> <task-create-choice(|ctx)> [or243, relmatch177];
      <task-create-error-on-failure(|ctx, or244, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r;
      x814 := <type-is(|ctx); task-create-id(|ctx, [or244])> BasicType(Boolean())
  
  create-type-task(|ctx) :
    BinRel(l, op@LessThanEquals(), r) -> <task-create-id(|ctx,[x814])> x814
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq269 := <type-match(|ctx, BasicType(Decimal())); task-create-id(|ctx, [r-ty])> l-ty;
      eq270 := <type-match(|ctx, BasicType(Int())); task-create-id(|ctx, [r-ty])> l-ty;
      or245 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq269, eq270];
      <task-create-error-on-failure(|ctx, or245, ["Type mismatch: expected BasicType(Decimal()) or BasicType(Int()) got ", l-ty, " in ", op])> l;
      eq271 := <type-match(|ctx, l-ty); task-create-id(|ctx, [or245])> r-ty;
      relmatch178 := <relation-create-match(|ctx); task-create-id(|ctx, [or245])> ("<sub:", r-ty, l-ty);
      or246 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq271, relmatch178];
      relmatch179 := <relation-create-match(|ctx); task-create-id(|ctx, [or245])> ("<sub:", l-ty, r-ty);
      or247 := <type-is(|ctx)> <task-create-choice(|ctx)> [or246, relmatch179];
      <task-create-error-on-failure(|ctx, or247, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r;
      x814 := <type-is(|ctx); task-create-id(|ctx, [or247])> BasicType(Boolean())
  
  create-type-task(|ctx) :
    BinRel(l, op@GreaterThan(), r) -> <task-create-id(|ctx,[x814])> x814
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq272 := <type-match(|ctx, BasicType(Decimal())); task-create-id(|ctx, [r-ty])> l-ty;
      eq273 := <type-match(|ctx, BasicType(Int())); task-create-id(|ctx, [r-ty])> l-ty;
      or248 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq272, eq273];
      <task-create-error-on-failure(|ctx, or248, ["Type mismatch: expected BasicType(Decimal()) or BasicType(Int()) got ", l-ty, " in ", op])> l;
      eq274 := <type-match(|ctx, l-ty); task-create-id(|ctx, [or248])> r-ty;
      relmatch180 := <relation-create-match(|ctx); task-create-id(|ctx, [or248])> ("<sub:", r-ty, l-ty);
      or249 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq274, relmatch180];
      relmatch181 := <relation-create-match(|ctx); task-create-id(|ctx, [or248])> ("<sub:", l-ty, r-ty);
      or250 := <type-is(|ctx)> <task-create-choice(|ctx)> [or249, relmatch181];
      <task-create-error-on-failure(|ctx, or250, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r;
      x814 := <type-is(|ctx); task-create-id(|ctx, [or250])> BasicType(Boolean())
  
  create-type-task(|ctx) :
    BinRel(l, op@GreaterThanEquals(), r) -> <task-create-id(|ctx,[x814])> x814
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq275 := <type-match(|ctx, BasicType(Decimal())); task-create-id(|ctx, [r-ty])> l-ty;
      eq276 := <type-match(|ctx, BasicType(Int())); task-create-id(|ctx, [r-ty])> l-ty;
      or251 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq275, eq276];
      <task-create-error-on-failure(|ctx, or251, ["Type mismatch: expected BasicType(Decimal()) or BasicType(Int()) got ", l-ty, " in ", op])> l;
      eq277 := <type-match(|ctx, l-ty); task-create-id(|ctx, [or251])> r-ty;
      relmatch182 := <relation-create-match(|ctx); task-create-id(|ctx, [or251])> ("<sub:", r-ty, l-ty);
      or252 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq277, relmatch182];
      relmatch183 := <relation-create-match(|ctx); task-create-id(|ctx, [or251])> ("<sub:", l-ty, r-ty);
      or253 := <type-is(|ctx)> <task-create-choice(|ctx)> [or252, relmatch183];
      <task-create-error-on-failure(|ctx, or253, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r;
      x814 := <type-is(|ctx); task-create-id(|ctx, [or253])> BasicType(Boolean())
  
  create-type-task(|ctx) :
    BinOp(l, op@Plus(), r) -> <task-create-id(|ctx,[op-ty])> op-ty
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq278 := <type-match(|ctx, BasicType(Decimal())); task-create-id(|ctx, [r-ty])> l-ty;
      eq279 := <type-match(|ctx, BasicType(Int())); task-create-id(|ctx, [r-ty])> l-ty;
      or254 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq278, eq279];
      <task-create-error-on-failure(|ctx, or254, ["Type mismatch: expected BasicType(Decimal()) or BasicType(Int()) got ", l-ty, " in ", op])> l;
      eq280 := <type-match(|ctx, l-ty); task-create-id(|ctx, [or254])> r-ty;
      op-ty60 := <type-is(|ctx); task-create-id(|ctx, [eq280])> l-ty;
      relmatch184 := <relation-create-match(|ctx); task-create-id(|ctx, [or254])> ("<sub:", r-ty, l-ty);
      op-ty61 := <type-is(|ctx); task-create-id(|ctx, [relmatch184])> l-ty;
      or255 := <type-is(|ctx)> <task-create-choice(|ctx)> [op-ty60, op-ty61];
      op-ty62 := <type-is(|ctx); task-create-id(|ctx, [or255])> <task-create-choice(|ctx)> [op-ty60, op-ty61];
      relmatch185 := <relation-create-match(|ctx); task-create-id(|ctx, [or254])> ("<sub:", l-ty, r-ty);
      op-ty63 := <type-is(|ctx); task-create-id(|ctx, [relmatch185])> r-ty;
      or256 := <type-is(|ctx)> <task-create-choice(|ctx)> [op-ty62, op-ty63];
      op-ty := <type-is(|ctx); task-create-id(|ctx, [or256])> <task-create-choice(|ctx)> [op-ty62, op-ty63];
      <task-create-error-on-failure(|ctx, op-ty, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r
  
  create-type-task(|ctx) :
    BinOp(l, op@Minus(), r) -> <task-create-id(|ctx,[op-ty])> op-ty
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq281 := <type-match(|ctx, BasicType(Decimal())); task-create-id(|ctx, [r-ty])> l-ty;
      eq282 := <type-match(|ctx, BasicType(Int())); task-create-id(|ctx, [r-ty])> l-ty;
      or257 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq281, eq282];
      <task-create-error-on-failure(|ctx, or257, ["Type mismatch: expected BasicType(Decimal()) or BasicType(Int()) got ", l-ty, " in ", op])> l;
      eq283 := <type-match(|ctx, l-ty); task-create-id(|ctx, [or257])> r-ty;
      op-ty60 := <type-is(|ctx); task-create-id(|ctx, [eq283])> l-ty;
      relmatch186 := <relation-create-match(|ctx); task-create-id(|ctx, [or257])> ("<sub:", r-ty, l-ty);
      op-ty61 := <type-is(|ctx); task-create-id(|ctx, [relmatch186])> l-ty;
      or258 := <type-is(|ctx)> <task-create-choice(|ctx)> [op-ty60, op-ty61];
      op-ty62 := <type-is(|ctx); task-create-id(|ctx, [or258])> <task-create-choice(|ctx)> [op-ty60, op-ty61];
      relmatch187 := <relation-create-match(|ctx); task-create-id(|ctx, [or257])> ("<sub:", l-ty, r-ty);
      op-ty63 := <type-is(|ctx); task-create-id(|ctx, [relmatch187])> r-ty;
      or259 := <type-is(|ctx)> <task-create-choice(|ctx)> [op-ty62, op-ty63];
      op-ty := <type-is(|ctx); task-create-id(|ctx, [or259])> <task-create-choice(|ctx)> [op-ty62, op-ty63];
      <task-create-error-on-failure(|ctx, op-ty, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r
  
  create-type-task(|ctx) :
    BinOp(l, op@Times(), r) -> <task-create-id(|ctx,[op-ty])> op-ty
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq284 := <type-match(|ctx, BasicType(Decimal())); task-create-id(|ctx, [r-ty])> l-ty;
      eq285 := <type-match(|ctx, BasicType(Int())); task-create-id(|ctx, [r-ty])> l-ty;
      or260 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq284, eq285];
      <task-create-error-on-failure(|ctx, or260, ["Type mismatch: expected BasicType(Decimal()) or BasicType(Int()) got ", l-ty, " in ", op])> l;
      eq286 := <type-match(|ctx, l-ty); task-create-id(|ctx, [or260])> r-ty;
      op-ty60 := <type-is(|ctx); task-create-id(|ctx, [eq286])> l-ty;
      relmatch188 := <relation-create-match(|ctx); task-create-id(|ctx, [or260])> ("<sub:", r-ty, l-ty);
      op-ty61 := <type-is(|ctx); task-create-id(|ctx, [relmatch188])> l-ty;
      or261 := <type-is(|ctx)> <task-create-choice(|ctx)> [op-ty60, op-ty61];
      op-ty62 := <type-is(|ctx); task-create-id(|ctx, [or261])> <task-create-choice(|ctx)> [op-ty60, op-ty61];
      relmatch189 := <relation-create-match(|ctx); task-create-id(|ctx, [or260])> ("<sub:", l-ty, r-ty);
      op-ty63 := <type-is(|ctx); task-create-id(|ctx, [relmatch189])> r-ty;
      or262 := <type-is(|ctx)> <task-create-choice(|ctx)> [op-ty62, op-ty63];
      op-ty := <type-is(|ctx); task-create-id(|ctx, [or262])> <task-create-choice(|ctx)> [op-ty62, op-ty63];
      <task-create-error-on-failure(|ctx, op-ty, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r
  
  create-type-task(|ctx) :
    BinOp(l, op@Divide(), r) -> <task-create-id(|ctx,[op-ty])> op-ty
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq287 := <type-match(|ctx, BasicType(Decimal())); task-create-id(|ctx, [r-ty])> l-ty;
      eq288 := <type-match(|ctx, BasicType(Int())); task-create-id(|ctx, [r-ty])> l-ty;
      or263 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq287, eq288];
      <task-create-error-on-failure(|ctx, or263, ["Type mismatch: expected BasicType(Decimal()) or BasicType(Int()) got ", l-ty, " in ", op])> l;
      eq289 := <type-match(|ctx, l-ty); task-create-id(|ctx, [or263])> r-ty;
      op-ty60 := <type-is(|ctx); task-create-id(|ctx, [eq289])> l-ty;
      relmatch190 := <relation-create-match(|ctx); task-create-id(|ctx, [or263])> ("<sub:", r-ty, l-ty);
      op-ty61 := <type-is(|ctx); task-create-id(|ctx, [relmatch190])> l-ty;
      or264 := <type-is(|ctx)> <task-create-choice(|ctx)> [op-ty60, op-ty61];
      op-ty62 := <type-is(|ctx); task-create-id(|ctx, [or264])> <task-create-choice(|ctx)> [op-ty60, op-ty61];
      relmatch191 := <relation-create-match(|ctx); task-create-id(|ctx, [or263])> ("<sub:", l-ty, r-ty);
      op-ty63 := <type-is(|ctx); task-create-id(|ctx, [relmatch191])> r-ty;
      or265 := <type-is(|ctx)> <task-create-choice(|ctx)> [op-ty62, op-ty63];
      op-ty := <type-is(|ctx); task-create-id(|ctx, [or265])> <task-create-choice(|ctx)> [op-ty62, op-ty63];
      <task-create-error-on-failure(|ctx, op-ty, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r
  
  create-type-task(|ctx) :
    BinOp(l, op@Maximum(), r) -> <task-create-id(|ctx,[op-ty])> op-ty
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq290 := <type-match(|ctx, BasicType(Decimal())); task-create-id(|ctx, [r-ty])> l-ty;
      eq291 := <type-match(|ctx, BasicType(Int())); task-create-id(|ctx, [r-ty])> l-ty;
      or266 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq290, eq291];
      <task-create-error-on-failure(|ctx, or266, ["Type mismatch: expected BasicType(Decimal()) or BasicType(Int()) got ", l-ty, " in ", op])> l;
      eq292 := <type-match(|ctx, l-ty); task-create-id(|ctx, [or266])> r-ty;
      op-ty60 := <type-is(|ctx); task-create-id(|ctx, [eq292])> l-ty;
      relmatch192 := <relation-create-match(|ctx); task-create-id(|ctx, [or266])> ("<sub:", r-ty, l-ty);
      op-ty61 := <type-is(|ctx); task-create-id(|ctx, [relmatch192])> l-ty;
      or267 := <type-is(|ctx)> <task-create-choice(|ctx)> [op-ty60, op-ty61];
      op-ty62 := <type-is(|ctx); task-create-id(|ctx, [or267])> <task-create-choice(|ctx)> [op-ty60, op-ty61];
      relmatch193 := <relation-create-match(|ctx); task-create-id(|ctx, [or266])> ("<sub:", l-ty, r-ty);
      op-ty63 := <type-is(|ctx); task-create-id(|ctx, [relmatch193])> r-ty;
      or268 := <type-is(|ctx)> <task-create-choice(|ctx)> [op-ty62, op-ty63];
      op-ty := <type-is(|ctx); task-create-id(|ctx, [or268])> <task-create-choice(|ctx)> [op-ty62, op-ty63];
      <task-create-error-on-failure(|ctx, op-ty, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r
  
  create-type-task(|ctx) :
    BinOp(l, op@Minimum(), r) -> <task-create-id(|ctx,[op-ty])> op-ty
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq293 := <type-match(|ctx, BasicType(Decimal())); task-create-id(|ctx, [r-ty])> l-ty;
      eq294 := <type-match(|ctx, BasicType(Int())); task-create-id(|ctx, [r-ty])> l-ty;
      or269 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq293, eq294];
      <task-create-error-on-failure(|ctx, or269, ["Type mismatch: expected BasicType(Decimal()) or BasicType(Int()) got ", l-ty, " in ", op])> l;
      eq295 := <type-match(|ctx, l-ty); task-create-id(|ctx, [or269])> r-ty;
      op-ty60 := <type-is(|ctx); task-create-id(|ctx, [eq295])> l-ty;
      relmatch194 := <relation-create-match(|ctx); task-create-id(|ctx, [or269])> ("<sub:", r-ty, l-ty);
      op-ty61 := <type-is(|ctx); task-create-id(|ctx, [relmatch194])> l-ty;
      or270 := <type-is(|ctx)> <task-create-choice(|ctx)> [op-ty60, op-ty61];
      op-ty62 := <type-is(|ctx); task-create-id(|ctx, [or270])> <task-create-choice(|ctx)> [op-ty60, op-ty61];
      relmatch195 := <relation-create-match(|ctx); task-create-id(|ctx, [or269])> ("<sub:", l-ty, r-ty);
      op-ty63 := <type-is(|ctx); task-create-id(|ctx, [relmatch195])> r-ty;
      or271 := <type-is(|ctx)> <task-create-choice(|ctx)> [op-ty62, op-ty63];
      op-ty := <type-is(|ctx); task-create-id(|ctx, [or271])> <task-create-choice(|ctx)> [op-ty62, op-ty63];
      <task-create-error-on-failure(|ctx, op-ty, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r
  
  create-type-task(|ctx) :
    BinOp(l, op@Intersection(), r) -> <task-create-id(|ctx,[eq296])> l-ty
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq296 := <type-match(|ctx, l-ty); task-create-id(|ctx, [r-ty])> r-ty;
      <task-create-error-on-failure(|ctx, eq296, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r
  
  create-type-task(|ctx) :
    BinOp(l, op@Union(), r) -> <task-create-id(|ctx,[eq297])> l-ty
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq297 := <type-match(|ctx, l-ty); task-create-id(|ctx, [r-ty])> r-ty;
      <task-create-error-on-failure(|ctx, eq297, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r
  
  create-type-task(|ctx) :
    BinOp(l, op@Concat(), r) -> <task-create-id(|ctx,[eq298])> l-ty
    where 
      l-ty := <type-task(|ctx)> l;
      r-ty := <type-task(|ctx); task-create-id(|ctx, [l-ty])> r;
      eq298 := <type-match(|ctx, l-ty); task-create-id(|ctx, [r-ty])> r-ty;
      <task-create-error-on-failure(|ctx, eq298, ["Type mismatch: expected ", l-ty, " got ", r-ty, " in ", op])> r
  
  create-type-task(|ctx) :
    UnOp(Head(), e) -> <task-create-id(|ctx,[e-ty])> e-ty
    where 
      e-ty := <type-task(|ctx)> e
  
  create-type-task(|ctx) :
    UnOp(Tail(), e) -> <task-create-id(|ctx,[e-ty])> e-ty
    where 
      e-ty := <type-task(|ctx)> e
  
  create-type-task(|ctx) :
    UnOp(Cardinality(), e) -> <task-create-id(|ctx,[x815])> x815
    where 
      x815 := <type-is(|ctx)> BasicType(Int())
  
  create-type-task(|ctx) :
    UnOp(op@Negative(), e) -> <task-create-id(|ctx,[or272])> e-ty
    where 
      e-ty := <type-task(|ctx)> e;
      eq299 := <type-match(|ctx, BasicType(Decimal())); task-create-id(|ctx, [e-ty])> e-ty;
      eq300 := <type-match(|ctx, BasicType(Int())); task-create-id(|ctx, [e-ty])> e-ty;
      or272 := <type-is(|ctx)> <task-create-choice(|ctx)> [eq299, eq300];
      <task-create-error-on-failure(|ctx, or272, ["Type mismatch: expected BasicType(Decimal()) or BasicType(Int()) got ", e-ty, " in ", op])> e
  

rules // projections
  
