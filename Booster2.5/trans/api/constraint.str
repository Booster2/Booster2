module trans/api/constraint

imports
	
	include/Booster25

rules // primed    TODO: rewrite
	
/* 	make-pre-state:
		takes a constraint, and returns its representation in the 
		pre-state of a method 			
*/
	make-pre-state:
		constraint ->
			<bottomup(try( (\ PathComponent(name, Some(Primed())) -> PathComponent(name, None()) \) <+
						   (\ PathStart(name, Some(Primed())) -> PathStart(name, None()) \) <+
						   (\ ThisPrimed() -> This() \)  
						   		))> constraint 	

/*	is-pre-state
		takes a constraint, and returns if can be entirely evaluated in the pre-state.  Ie. there are no primes 
*/
	is-pre-state:
		constraint ->
			<equal>([], <collect(?PathComponent(name, Some(Primed())) <+ 
								?PathStart(name, Some(Primed())) <+
								?ThisPrimed() <+
								?Output(s))> constraint)

	is-post-state = not(is-pre-state)

/* conjoin constraints
	 takes a list of constraints, and produces a single constraint
*/

	conjoin-constraints: [] -> True()
	conjoin-constraints: [c] -> c
	conjoin-constraints: [c,cs*] -> And(c, <conjoin-constraints>[cs*])

rules

	// remove conjuncts of a constraint that contain inputs or outputs.
	// Occasionally we wish to exclude some inputs or outputs - we use the parameter
	// is, os, or ios to control this.

	remove-inputs(|is): c ->
			<topdown(\ trm -> <remove-input(|is) <+ !trm> trm \)> c

	remove-outputs(|os): c ->
			<topdown(\ trm -> <remove-output(|os) <+ !trm> trm \)> c

	remove-inputs-and-outputs(|ios): c ->
			<topdown(\ trm -> <remove-output(|ios) <+ !trm> trm \)>
				<topdown(\ trm -> <remove-input(|ios) <+ !trm> trm \)> c

	
	remove-input(|is):
		constraint -> True() 
			where 
				<is-relation> constraint;
				is' := <collect-all(?Input(_))> constraint;
				<not(subseteq)>(is', is)

	remove-output(|os):
		constraint -> True() 
			where
				<is-relation> constraint; 
				os' := <collect-all(?Output(_))> constraint;
				<not(subseteq)>(os', os)

	is-relation = ?Equal(_,_) <+
								?NotEqual(_,_) <+
								?GreaterThan(_,_) <+
								?GreaterThanEquals(_,_) <+
								?LessThan(_,_) <+
								?LessThanEquals(_,_) <+
								?In(_,_) <+
								?NotIn(_,_) <+
								?Subset(_,_) <+
								?SubsetEquals(_,_) <+
								?Superset(_,_) <+
								?SupersetEquals(_,_)
	
rules