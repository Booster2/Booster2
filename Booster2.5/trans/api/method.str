module trans/api/method

imports
	
	include/Booster25
	trans/lib/eq
	trans/api/_runtime
	trans/api/_runtime-constructors

rules // conjoin methods
	
	// @type [Method] -> [Method]
	method-conjoin-all: [] -> []
	method-conjoin-all: [m|m-tail*] -> m'*
		with
			m-tail'* := <method-conjoin-all>m-tail*;
			m'*      := <method-conjoin(|m)>m-tail'*
	
	// @type (|Method) [Method] -> [Method]
	method-conjoin(|m): method* -> method'*
		where
			is-list
		with
			method'* := <one(method-conjoin(|m))>method* <+
			method'* := [m|method*]
	
	// @type (|Method) Method -> Method or fail
	method-conjoin(|m): Method(name1, body1) -> Method(name, body)
		where
			Method(name2, body2) := m;
			<eq-an>(name1, name2)
		with
			name := name1;
			body := And(body1, body2)

	method-parent = _nabl-uri ; _nabl-uri-parent ; _nabl-uri-name
	
	is-obj-method: m -> False() where <equal>(<collect-all(?This())> m, [])
	is-obj-method = !True()
	
	method-inputs = ?Method(name, <id>) ; collect-all(?Input(_ {Def(_)}))
	method-outputs = ?Method(name, <id>) ; collect-all(?Output(_ {Def(_)}))
