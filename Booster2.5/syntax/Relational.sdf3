module Relational

imports Common


context-free start-symbols

  Statement

context-free syntax


  Statement.DropDatabase = <drop database if exists `<ID>`;> 
	Statement.CreateDatabase = <create database `<ID>`;>
	Statement.UseDatabase = <use `<ID>`;
	SET autocommit=1;>
	Statement.DropTable = <drop table if exists `<ID>`;>
  Statement.CreateTable = <create table `<ID>` ( <PrimaryKeyColumn>);>
  PrimaryKeyColumn.PrimaryKeyColumn = <`<ID>` <SQLType> <ColumnNullable?> <ColumnDefault?> <Extra?> primary key <Reference?>>
  Statement.CreateColumn = < alter table `<ID>` add column `<ID>`  <SQLType> <ColumnNullable?> <ColumnDefault?>  <Extra?> <Key?> <Reference?>;>
  
  ColumnDefault.ColumnDefault = <default <SimpleExpression> >

  ColumnNullable.ColumnNullable = <null>
  ColumnNullable.ColumnNotNullable = <not null>
  SQLType.Varchar = <varchar ( <INT> )> 
  SQLType.Int = <int> 
  SQLType.Bit = <bit> 
  SQLType.DateTime = <datetime> 
  SQLType.TimeStamp = <timestamp> 
  SQLType.Date = <date> 
  SQLType.Time = <time> 
  SQLType.Text = <text>
  SQLType.Decimal = <decimal> 
  BOOL.True = <true> 
  BOOL.False = <false> 
  Extra.AutoIncrement = <auto_increment> 
  Extra.NoExtra = </"/"> 
  Key.Primary = <primary key> 
  Key.Unique = <Unique> 
  Key.Multiple = <Multiple> 
  Key.NoKey = <None> 
  Reference.Reference = <, add foreign key (`<ID>`) references `<ID>` ( <{ColumnName ","}*> )> 
  Statement.StatementList = < <{Statement "\n"}*> > 
  Statement.DropProcedure = <drop procedure if exists `<ID>`;>
  Statement.CreateProcedure = 
	 			  <delimiter //
	 			  create procedure `<ID>` ( <{Parameter ","}*>)
	 				begin
	 				declare _errcode CHAR(5) DEFAULT '00000';
  				declare _msg TEXT;
	 				declare exit handler for sqlwarning, sqlexception, not found 
	 				begin
	 				  get diagnostics condition 1
        			_errcode = RETURNED_SQLSTATE, _msg = MESSAGE_TEXT;
        		call log_debug(_msg);	
						rollback;
					end; 
					start transaction;
	 			    <Statement>
	 			  commit;
	 			 	end //
	 			  delimiter ;>
	Statement.DropFunction = <drop function if exists `<ID>`;>
  Statement.CreateFunction = 
	 			  <delimiter //
	 			  create function `<ID>` ( <{FunctionParameter ","}*>)
	 			  	returns <SQLType>
	 				begin
	 			    <Statement>
	 			  end //
	 			  delimiter ;>  
  
  FunctionParameter.Input = <<ID> <SQLType>> 
  Parameter.Input = <in <ID> <SQLType>> 
  Parameter.Output = <out <ID> <SQLType>> 
  Parameter.InOut = <inout <ID> <SQLType>> 
  Statement.IfThen = <if <SQLExpression> then <Statement> <ElseIf*> <Else?> end if;> 
  Statement.BeginEnd = <begin <DeclareList> <Statement> end;> 
  Statement = Update 
  Statement = Insert 
  Statement.InsertInto = InsertInto 
  Statement.Delete = Delete 
  Statement = Return 
  Statement = VariableAssign 
  SQLExpression.Star = <*> 
  SQLExpression.True = <true> 
  SQLExpression.False = <false> 
  ElseIf.ElseIf = <elseif (<SQLExpression>) then <Statement>> 
  Else.Else = <else <Statement>> 
  SQLExpression.Or = <<SQLExpression> OR <SQLExpression>> 
  SQLExpression.Or = <<SQLExpression> || <SQLExpression>> 
  SQLExpression.Xor = <<SQLExpression> XOR <SQLExpression>> 
  SQLExpression.And = <<SQLExpression> AND <SQLExpression>> 
  SQLExpression.And = <<SQLExpression> && <SQLExpression>> 
  SQLExpression.Not = <NOT <SQLExpression>> 
  SQLExpression.Not = <! <SQLExpression>> 
  SQLExpression.Is = <<BooleanPrimary> IS <Not?> <TFU>> 
  SQLExpression = BooleanPrimary 
  SQLExpression = SimpleExpression 
  TFU.True = <True> 
  TFU.False = <False> 
  TFU.Unknown = <Unknown> 
  Not.Not = <Not> 
  BooleanPrimary.IsNull = <<BooleanPrimary> IS <Not?> NULL> 
  BooleanPrimary.Iff = <<BooleanPrimary> \<=\> <Predicate>> 
  BooleanPrimary.Equal = <<BooleanPrimary> = <BooleanPrimary>> 
  BooleanPrimary.GreaterThanEquals = <<BooleanPrimary> \>= <BooleanPrimary>> 
  BooleanPrimary.GreaterThan = <<BooleanPrimary> \> <BooleanPrimary>> 
  BooleanPrimary.LessThanEquals = <<BooleanPrimary> \<= <BooleanPrimary>> 
  BooleanPrimary.LessThan = <<BooleanPrimary> \< <BooleanPrimary>> 
  BooleanPrimary.NotEqual = <<BooleanPrimary> \<\> <BooleanPrimary>> 
  BooleanPrimary.NotEqual = <<BooleanPrimary> != <BooleanPrimary>> 
  BooleanPrimary.Equal = <<BooleanPrimary> = <AllAny> <Query>> 
  BooleanPrimary.GreaterThanEquals = <<BooleanPrimary> \>= <AllAny> <Query>> 
  BooleanPrimary.GreaterThan = <<BooleanPrimary> \> <AllAny> <Query>> 
  BooleanPrimary.LessThanEquals = <<BooleanPrimary> \<= <AllAny> <Query>> 
  BooleanPrimary.LessThan = <<BooleanPrimary> \< <AllAny> <Query>> 
  BooleanPrimary.NotEqual = <<BooleanPrimary> \<\> <AllAny> <Query>> 
  BooleanPrimary.NotEqual = <<BooleanPrimary> != <AllAny> <Query>> 
  AllAny.All = <ALL> 
  AllAny.All = <ANY> 
  BooleanPrimary = Predicate 
  Predicate.InQuery = <<BitExpression> <Not?> IN <Query>> 
  Predicate.InSet = <<BitExpression> <Not?> IN <SetExpression>> 
  Predicate.Between = <<BitExpression> <Not?> BETWEEN <BitExpression> AND <Predicate>> 
  Predicate.SoundsLike = <<BitExpression> SOUNDS LIKE <BitExpression>> 
  Predicate.Like = <<BitExpression> <Not?> LIKE <SimpleExpression> <Escape?>> 
  Predicate.Regexp = <<BitExpression> <Not?> REGEXP <BitExpression>> 
  Predicate = BitExpression 
  Escape.Escape = <ESCAPE <SimpleExpression>> 
  BitExpression.BitOr = <<BitExpression> | <BitExpression>> 
  BitExpression.BitAnd = <<BitExpression> & <BitExpression>> 
  BitExpression.BitShiftLeft = <<BitExpression> \<\< <BitExpression>> 
  BitExpression.BitShiftRight = <<BitExpression> \>\> <BitExpression>> 
  BitExpression.Plus = <<BitExpression> + <BitExpression>> 
  BitExpression.Minus = <<BitExpression> - <BitExpression>> 
  BitExpression.Times = <<BitExpression> * <BitExpression>> 
  BitExpression.Divide = <<BitExpression> / <BitExpression>> 
  BitExpression.Div = <<BitExpression> DIV <BitExpression>> 
  BitExpression.Mod = <<BitExpression> MOD <BitExpression>> 
  BitExpression.Percent = <<BitExpression> % <BitExpression>> 
  BitExpression.Power = <<BitExpression> ^ <BitExpression>> 
  BitExpression.PlusInt = <<BitExpression> + <IntervalExpression>> 
  BitExpression.MinusInt = <<BitExpression> - <IntervalExpression>> 
  BitExpression = SimpleExpression 
  SimpleExpression = Literal 
  SimpleExpression = Identifier 
  SimpleExpression = FunctionCall 
  SimpleExpression.Collate = <<SimpleExpression> COLLATE <CollationName>> 
  SimpleExpression = ParamMarker 
  SimpleExpression = Variable 
  SimpleExpression.Or = <<SimpleExpression> || <SimpleExpression>> 
  SimpleExpression.UnaryPlus = <+ <SimpleExpression>> 
  SimpleExpression.UnaryMinus = <- <SimpleExpression>> 
  SimpleExpression.Reverse = <~ <SimpleExpression>> 
  SimpleExpression.Not = <! <SimpleExpression>> 
  SimpleExpression.Binary = <BINARY <SimpleExpression>> 
  SetExpression.SetExpression = <( <{SQLExpression ","}+> )> 
  SimpleExpression = SetExpression 
  SimpleExpression.Row = <ROW <SQLExpression> , <{SQLExpression ","}+>> 
  SimpleExpression = Query 
  SimpleExpression.Exists = <EXISTS <Query>> 
  SimpleExpression.EscapeSyntax = <{ <Identifier> <SQLExpression> }> 
  SimpleExpression = MatchExpression 
  SimpleExpression = CaseExpression 
  SimpleExpression = IntervalExpression 
  Literal.String = < '<SQLSTRING>' > 
  Literal.Int = INT 
  Literal.Decimal = DECIMAL 
  True.True = <true> 
  False.False = <false> 
  Literal.Boolean = True
  Literal.Boolean = False
  Literal.Null = <null> 
  Identifier.ColumnName = <`<ID>`> 
  Identifier.TableColumnName = <`<ID>` . `<ID>`> 
  Identifier.DBTableColumnName = <`<ID>` . `<ID>` . `<ID>`> 
  Variable.LocalVariable = <@<ID>> 
  Variable.SystemVariable = ID 
  ParamMarker.Marker = <?> 
  MatchExpression.MatchExpression = <MATCH ( <{ID ","}+> ) AGAINST ( <SQLExpression> <SearchModifier?> )> 
  SearchModifier.InBooleanMode = <IN BOOLEAN MODE> 
  SearchModifier.WithQueryExpansion = <WITH QUERY EXPANSION> 
  IntervalExpression.IntervalExpression = <INTERVAL <SQLExpression> <Unit>> 
  Unit.MicroSecondUnit = <MICROSECOND> 
  Unit.SecondUnit = <SECOND> 
  Unit.MinuteUnit = <MINUTE> 
  Unit.HourUnit = <HOUR> 
  Unit.DayUnit = <DAY> 
  Unit.WeekUnit = <WEEK> 
  Unit.MonthUnit = <MONTH> 
  Unit.QuarterUnit = <QUARTER> 
  Unit.YearUnit = <YEAR> 
  Unit.SecondMicroSecondUnit = <SECOND_MICROSECOND> 
  Unit.MinuteMicroSecondUnit = <MINUTE_MICROSECOND> 
  Unit.MinuteSecondUnit = <MINUTE_SECOND> 
  Unit.HourMicroSecondUnit = <HOUR_MICROSECOND> 
  Unit.HourSecondUnit = <HOUR_SECOND> 
  Unit.HourMinuteUnit = <HOUR_MINUTE> 
  Unit.DayMicroSecondUnit = <DAY_MICROSECOND> 
  Unit.DaySecondUnit = <DAY_SECOND> 
  Unit.DayMinuteUnit = <DAY_MINUTE> 
  Unit.DayHourUnit = <DAY_HOUR> 
  Unit.YearMonthUnit = <YEAR_MONTH> 
  CaseExpression.CaseExpression = <CASE <SQLExpression> <{CaseWhen ""}+> <CaseElse?> END> 
  CaseWhen.CaseWhen = <WHEN <SQLExpression> THEN <SQLExpression>> 
  CaseElse.CaseElse = <ELSE <SQLExpression>> 
  FunctionCall.FunctionCall = <<ID>(<{Parameter ","}*>)> 
  Parameter = SQLExpression 
  CollationName = ID 
  Query.SelectQuery = <(SELECT <{SelectType ""}*> <{SelectExpression ","}+> <FromPart?> <WherePart?> <GroupByPart?> <HavingPart?> <OrderByPart?> <LimitPart?> <ProcedurePart?> <IntoPart?> <ModePart?>)> 
  Statement.SelectStatement = <SELECT <{SelectType ""}*> <{SelectExpression ","}+> <FromPart?> <WherePart?> <GroupByPart?> <HavingPart?> <OrderByPart?> <LimitPart?> <ProcedurePart?> <IntoPart?> <ModePart?>;> 
  SelectType.All = <ALL> 
  SelectType.Distinct = <DISTINCT> 
  SelectType.DistinctRow = <DISTINCTROW> 
  SelectType.HighPriority = <HIGH_PRIORITY> 
  SelectType.StraightJoin = <STRAIGHT_JOIN> 
  SelectType.SmallResult = <SQL_SMALL_RESULT> 
  SelectType.BigResult = <SQL_BIG_RESULT> 
  SelectType.BufferResult = <SQL_BUFFER_RESULT> 
  SelectType.Cache = <SQL_CACHE> 
  SelectType.NoCache = <SQL_NO_CACHE> 
  SelectType.CalcFoundRows = <SQL_CALC_FOUND_ROWS> 
  SelectExpression = SQLExpression 
  SelectExpression.ColumnName = <`<ID>`> 
  SelectExpression.TableColumnName = <`<ID>` . `<ID>`> 
  SelectExpression.ExpressionAs = <<SQLExpression> AS <ID>> 
  SelectExpression.ColumnNameAs = <`<ID>` AS `<ID>`> 
  SelectExpression.TableColumnNameAs = <`<ID>` . `<ID>` AS `<ID>`> 
  SelectExpression.Star = <*> 
  FromPart.FromPart = <FROM <{TableReference ""}*>> 
  WherePart.Where = <WHERE <SQLExpression>> 
  GroupByPart.GroupByPart = <GROUP BY <SQLExpression> <Order?> <Rollup?>> 
  Rollup.Rollup = <WITH ROLLUP> 
  Order.Ascending = <ASC> 
  Order.Descending = <DESC> 
  HavingPart.HavingPart = <HAVING <SQLExpression>> 
  OrderByPart.OrderByPart = <ORDER BY <SQLExpression> <Order?>> 
  LimitPart.LimitOffset = <LIMIT <INT?> <INT>> 
  LimitPart.LimitOffset = <LIMIT <INT> OFFSET <INT>> 
  ProcedurePart.ProcedurePart = <PROCEDURE <ID> ( <{Parameter ","}*> )> 
  IntoPart.IntoOutFile = <INTO OUTFILE <SQLSTRING> <CharSet?> <ExportOptions>> 
  IntoPart.IntoDumpFile = <INTO DUMPFILE <SQLSTRING>> 
  IntoPart.Into = <INTO <{TableName ","}*>> 
  CharSet.CharSet = <CHARACTER SET <ID>> 
  ModePart.ForUpdate = <FOR UPDATE> 
  ModePart.LockShareMode = <LOCK IN SHARE MODE> 
  ExportOptions.ExportOptions = <ExportOptionsUnknown> 
  TableReference = TableFactor 
  TableReference = JoinTable 
  TableFactor = TableName
  TableName.TableName = <`<ID>`> 
  TableFactor.Aliased = <`<ID>` <Alias> <{IndexHint ""}*>> 
  TableFactor.Query = <<Query> <Alias>> 
  TableFactor.Bracket = <( <{TableReference ""}*> )> 
  TableFactor.OJ = <OJ <TableReference> LEFT OUTER JOIN <TableReference> ON <SQLExpression>> 
  Alias.Alias = <AS <ID>> 
  JoinTable.InnerJoin = <<TableReference> INNER JOIN <TableFactor> <JoinCondition?>> 
  JoinTable.CrossJoin = <<TableReference> CROSS JOIN <TableFactor> <JoinCondition?>> 
  JoinTable.StraightJoin = <<TableReference> STRAIGHT_JOIN <TableFactor> <JoinCondition?>> 
  JoinTable.LeftJoin = <<TableReference> LEFT JOIN <TableReference> <JoinCondition>> 
  JoinTable.LeftOuterJoin = <<TableReference> LEFT OUTER JOIN <TableReference> <JoinCondition>> 
  JoinTable.RightJoin = <<TableReference> RIGHT JOIN <TableReference> <JoinCondition>> 
  JoinTable.RightOuterJoin = <<TableReference> RIGHT OUTER JOIN <TableReference> <JoinCondition>> 
  JoinTable.NaturalLeftJoin = <<TableReference> NATURAL LEFT JOIN <TableFactor> <JoinCondition>> 
  JoinTable.NaturalLeftOuterJoin = <<TableReference> NATURAL LEFT OUTER JOIN <TableFactor> <JoinCondition>> 
  JoinTable.NaturalRightJoin = <<TableReference> NATURAL RIGHT JOIN <TableFactor> <JoinCondition>> 
  JoinTable.NaturalRightOuterJoin = <<TableReference> NATURAL RIGHT OUTER JOIN <TableFactor> <JoinCondition>> 
  JoinCondition.On = <ON <SQLExpression>> 
  JoinCondition.Using = <USING <{ID ","}+>> 
  IndexHint.Use = <USE <IndexKey> <ForClause?>> 
  IndexHint.Ignore = <IGNORE <IndexKey> <ForClause?>> 
  IndexHint.Force = <FORCE <IndexKey> <ForClause?>> 
  IndexKey.Index = <INDEX> 
  IndexKey.Key = <KEY> 
  ForClause.ForClause = <FOR <Jog> <{ID ","}+>> 
  Jog.Join = <JOIN> 
  Jog.OrderBy = <ORDER BY> 
  Jog.GroupBy = <GROUP BY> 
  Update.Update = <UPDATE <UpdateOption*> <TableReference> SET <{UpdateSet ","}+ > <WherePart?> <OrderByPart?> <LimitPart?>;> 
  UpdateOption.LowPriority = <LOW_PRIORITY> 
  UpdateOption.Ignore = <IGNORE> 
  UpdateSet.UpdateSet = <<ID> = <SQLExpression>> 
  UpdateSet.UpdateSetDefault = <<ID> = DEFAULT> 
  Insert.Insert = <	insert <InsertPriority?> <Ignore?> <Into?> `<ID>` ( <{ ColumnName ","}*> ) values ( <{SQLExpression ","}*> ) <OnDuplicate?>;>
  ColumnName.ColumnName = <`<ID>`>
  InsertInto.InsertInto = <insert into <ID> ( <{ID ","}*> ) <Query>;> 
  InsertPriority.LowPriority = <LOW_PRIORITY> 
  InsertPriority.DelayedPriority = <DELAYED> 
  InsertPriority.HighPriority = <HIGH_PRIORITY> 
  Ignore.Ignore = <IGNORE> 
  Into.Into = <into> 
  Values.Values = <Values> 
  Values.Values = <Value> 
  OnDuplicate.OnDuplicate = <ON DUPLICATE KEY UPDATE <{UpdatePart ","}*>> 
  Delete.Delete = <DELETE <DeletePriority?> <Quick?> <Ignore?> FROM <ID> <WherePart?> <OrderByPart?> <LimitPart?>;> 
  DeletePriority.DeletePriority = <LOW_PRIORITY> 
  Quick.Quick = <QUICK> 
  UpdatePart.UpdatePart = <<ID> = <SQLExpression>> 
  DeclareList.DeclareList = <<Declare*>> 
  Declare.Declare = <DECLARE <{ID ","}+> <SQLType> <DefaultDeclare?>;> 
  DefaultDeclare.DefaultDeclare = <default <SQLExpression>> 
  Return.Return = <return <SQLExpression>;> 
  VariableAssign.VariableAssign = <set @<ID> = <SQLExpression>;>
  
context-free syntax   
