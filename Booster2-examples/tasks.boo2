System TaskManager

class Project
{
	attributes
		title (ID) : String
		phases : SET (Phase.forProject)
		projectRoles : SET(ProjectRole.forProject)
		projectTasks : SET(Task.forProjects)
	methods
		create{project! /: Project & project! : Project' & project!.title'=title?}
		destroy{project? : Project & project?.projectRoles={} & project?.projectTasks={} & project? /: Project'}
		addPerson1{ProjectRole.createProjectRole(project?=this, role?=role?, person?=person?) } // maybe we could use a substitution syntax: [project?=this]ProjectRole.createProjectRole
		// addPerson2{ProjectRole.createProjectRole() & project?=this} // this should be valid too
		/*newPhase{phase! : phases' & phase!.phase' = phase? & phase!.startDate = startDate? & endDate? /= null => phase!.endDate'=endDate?}*/ // this fails WP
}

class Phase
{
	attributes
	
		phase (ID) : String
		startDate (ID) : Date
		endDate (ID) : [Date]
		forProject: Project.phases
		phaseTasks : SET(Task.forPhases)
		phaseTargets : SET(Target.targetForPhase)
}

class ProjectRole
{
	attributes
		role (ID) : Role
		peopleWithRole : SET(Person.projectRoles)
		forProject (ID) : Project.projectRoles
	methods
		createProjectRole{projectRole! : ProjectRole' & projectRole!.role'=role? & person? : projectRole!.peopleWithRole' & projectRole!.forProject=project?}
}

class Role
{
	attributes
		title (ID) : String
		description : [String]
}

class Person
{
	attributes
		prenomials (ID) : Prenomial
		firstName (ID) : String
		middleNames : String
		lastName (ID) : String
		postfixes : String
		projectRoles : SET(ProjectRole.peopleWithRole)
		personTasks : SET(Task.assignedTo)
		personTargets : SET(Target.targetForPerson)
}

class Prenomial
{
	attributes
		affix (ID) : String
}

class Task
{
	attributes
		taskNumber (ID) : INT
		title (ID) : String
		description : String
		forProjects : SET(Project.projectTasks)
		forPhases : SET(Phase.phaseTasks)
		assignedTo : SET(Person.personTasks)
		taskTargets : SET(Target.targetForTask)
	methods
		createTask
		{
			task! /: Task & task! : Task' & task!.title=title?
			// Barfs on this:
			/* &
			(exists num : INT @ ((forall task2 : Task @ num /= task2.taskNumber) => task!.taskNumber'=num ))
			*/
			// Using set comprehension
			/*
			 & (exists num : INT @ (num /: {task2 : Task @ task2.taskNumber} => task!.taskNumber'=num ))
			 */
			 // constraint wise:
			 /*
			 &
			 task!.taskNumber : {num : INT | (num /: {task2 : Task @ task2.taskNumber}) @ num}
			 */
		}
	invariants
		forall task : Task @ (forall task2 : Task @ (task /= task2 & task.taskNumber /= task2.taskNumber)) /* All task numbers are unique */
		/*forall task : Task' @ task /: Task & (exists num : INT @ ((forall task2 : Task @ num /= task2.taskNumber) => task.taskNumber'=num )) */ /* Choose a new task number - doesn't like Task' */
		
}

set TargetTypeEnum {deadline,target,planning} // must be hit, to be aimed for no guarentees, for planning

class TargetType
{
	attributes
		targetTypeId (ID) : String
		targetTypeCtl : TargetTypeEnum
}

class Target
{
	attributes
		targetDate (ID) : Date
		targetType : TargetType
		targetForTask: [Task.taskTargets]
		targetForPerson : [Person.personTargets]
		targetForPhase : [Phase.phaseTargets]
}

